[{"/home/pankaj/easy-job-intern/src/index.js":"1","/home/pankaj/easy-job-intern/src/reportWebVitals.js":"2","/home/pankaj/easy-job-intern/src/App.js":"3","/home/pankaj/easy-job-intern/src/reducers/userReducer.js":"4","/home/pankaj/easy-job-intern/src/components/footer/footer.js":"5","/home/pankaj/easy-job-intern/src/components/home/home.js":"6","/home/pankaj/easy-job-intern/src/components/navbar/navbar.js":"7","/home/pankaj/easy-job-intern/src/components/student/login.js":"8","/home/pankaj/easy-job-intern/src/components/student/register.js":"9","/home/pankaj/easy-job-intern/src/components/employer/employerSignup.js":"10","/home/pankaj/easy-job-intern/src/components/employer/employerSignin.js":"11","/home/pankaj/easy-job-intern/src/components/contact-us/contact-us.js":"12","/home/pankaj/easy-job-intern/src/components/about-us/about-us.js":"13","/home/pankaj/easy-job-intern/src/components/privacy-policy/privacy-policy.js":"14","/home/pankaj/easy-job-intern/src/components/terms-condition/terms-condition.js":"15","/home/pankaj/easy-job-intern/src/components/CreateNew/CreatFreshersJob.js":"16","/home/pankaj/easy-job-intern/src/components/CreateNew/CreateInternship.js":"17","/home/pankaj/easy-job-intern/src/components/CreateNew/CreateJob.js":"18","/home/pankaj/easy-job-intern/src/components/Error/Error.js":"19","/home/pankaj/easy-job-intern/src/components/student-profile/Profile.js":"20","/home/pankaj/easy-job-intern/src/components/Internships/AllInternships.js":"21","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByIndustry.js":"22","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByStream.js":"23","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByLocation.js":"24","/home/pankaj/easy-job-intern/src/components/FreshersJob/AllFresherJob.js":"25","/home/pankaj/easy-job-intern/src/components/Jobs/AllJobs.js":"26","/home/pankaj/easy-job-intern/src/components/UpdateForm/InternshipUpdate.js":"27","/home/pankaj/easy-job-intern/src/components/UpdateForm/JobUpdate.js":"28","/home/pankaj/easy-job-intern/src/components/UpdateForm/FresherJobUpdate.js":"29","/home/pankaj/easy-job-intern/src/components/welcomeSignup/welcomeSignup.js":"30","/home/pankaj/easy-job-intern/src/components/welcomeSignup/welcomeSignupEmployer.js":"31","/home/pankaj/easy-job-intern/src/utils/checkValidation.js":"32","/home/pankaj/easy-job-intern/src/components/student-profile/Start.js":"33","/home/pankaj/easy-job-intern/src/components/student-profile/Experience.js":"34","/home/pankaj/easy-job-intern/src/components/student-profile/Education.js":"35","/home/pankaj/easy-job-intern/src/components/student-profile/Project.js":"36","/home/pankaj/easy-job-intern/src/components/student-profile/Other.js":"37","/home/pankaj/easy-job-intern/src/components/student-profile/Volunteer.js":"38","/home/pankaj/easy-job-intern/src/components/student-profile/Achievments.js":"39","/home/pankaj/easy-job-intern/src/components/student-profile/Input.js":"40","/home/pankaj/easy-job-intern/src/components/student-profile/Skills.js":"41","/home/pankaj/easy-job-intern/src/components/student-profile/Label.js":"42"},{"size":500,"mtime":1620789266119,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1620789266119,"results":"45","hashOfConfig":"44"},{"size":8497,"mtime":1620789266115,"results":"46","hashOfConfig":"44"},{"size":204,"mtime":1620789266119,"results":"47","hashOfConfig":"44"},{"size":7706,"mtime":1620789266119,"results":"48","hashOfConfig":"44"},{"size":10657,"mtime":1620789266119,"results":"49","hashOfConfig":"44"},{"size":6929,"mtime":1620789266119,"results":"50","hashOfConfig":"44"},{"size":8153,"mtime":1620789266119,"results":"51","hashOfConfig":"44"},{"size":17108,"mtime":1620789266119,"results":"52","hashOfConfig":"44"},{"size":13858,"mtime":1620789266119,"results":"53","hashOfConfig":"44"},{"size":8297,"mtime":1620789266115,"results":"54","hashOfConfig":"44"},{"size":6706,"mtime":1620789266115,"results":"55","hashOfConfig":"44"},{"size":4007,"mtime":1620789266115,"results":"56","hashOfConfig":"44"},{"size":1754,"mtime":1620789266119,"results":"57","hashOfConfig":"44"},{"size":2196,"mtime":1620789266119,"results":"58","hashOfConfig":"44"},{"size":12035,"mtime":1620789266115,"results":"59","hashOfConfig":"44"},{"size":15700,"mtime":1620789266115,"results":"60","hashOfConfig":"44"},{"size":12922,"mtime":1620789266115,"results":"61","hashOfConfig":"44"},{"size":375,"mtime":1620789266115,"results":"62","hashOfConfig":"44"},{"size":1215,"mtime":1620789266119,"results":"63","hashOfConfig":"44"},{"size":7917,"mtime":1620789266115,"results":"64","hashOfConfig":"44"},{"size":8154,"mtime":1620789266115,"results":"65","hashOfConfig":"44"},{"size":8144,"mtime":1620789266115,"results":"66","hashOfConfig":"44"},{"size":8154,"mtime":1620789266115,"results":"67","hashOfConfig":"44"},{"size":6951,"mtime":1620789266115,"results":"68","hashOfConfig":"44"},{"size":7849,"mtime":1620789266115,"results":"69","hashOfConfig":"44"},{"size":16935,"mtime":1620789266115,"results":"70","hashOfConfig":"44"},{"size":11381,"mtime":1620789266115,"results":"71","hashOfConfig":"44"},{"size":10533,"mtime":1620789266115,"results":"72","hashOfConfig":"44"},{"size":807,"mtime":1620789266119,"results":"73","hashOfConfig":"44"},{"size":830,"mtime":1620789266119,"results":"74","hashOfConfig":"44"},{"size":1808,"mtime":1620789266119,"results":"75","hashOfConfig":"44"},{"size":3327,"mtime":1620789266119,"results":"76","hashOfConfig":"44"},{"size":4119,"mtime":1620789266119,"results":"77","hashOfConfig":"44"},{"size":4409,"mtime":1620789266119,"results":"78","hashOfConfig":"44"},{"size":3734,"mtime":1620789266119,"results":"79","hashOfConfig":"44"},{"size":1979,"mtime":1620789266119,"results":"80","hashOfConfig":"44"},{"size":2032,"mtime":1620789266119,"results":"81","hashOfConfig":"44"},{"size":2018,"mtime":1620789266119,"results":"82","hashOfConfig":"44"},{"size":174,"mtime":1620789266119,"results":"83","hashOfConfig":"44"},{"size":1988,"mtime":1620789266119,"results":"84","hashOfConfig":"44"},{"size":194,"mtime":1620789266119,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mqxa51",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pankaj/easy-job-intern/src/index.js",[],"/home/pankaj/easy-job-intern/src/reportWebVitals.js",[],"/home/pankaj/easy-job-intern/src/App.js",[],"/home/pankaj/easy-job-intern/src/reducers/userReducer.js",[],"/home/pankaj/easy-job-intern/src/components/footer/footer.js",[],"/home/pankaj/easy-job-intern/src/components/home/home.js",[],"/home/pankaj/easy-job-intern/src/components/navbar/navbar.js",[],"/home/pankaj/easy-job-intern/src/components/student/login.js",["192"],"import React, { useContext, useState } from \"react\";\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport axios from \"axios\";\nimport \"./register.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { UserContext } from \"../../App\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nfunction LoginForm() {\n  const { dispatch } = useContext(UserContext);\n  const history = useHistory();\n\n  //creating a dicitionary for every field of the form\n  const initialState = {\n    email: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n  };\n  const [formValues, setFormValues] = useState(initialState);\n\n  const [formIsValid ,setFormIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitSignin = (e) => {\n    e.preventDefault();\n    const { email, password } = formValues;\n    axios\n      .post(\"http://localhost:5000/student/signin\", {\n        email: email.value,\n        password: password.value,\n      })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          localStorage.setItem(\"jwt\", res.data.token);\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n          localStorage.setItem(\"type\", JSON.stringify(\"student\"));\n          dispatch({ type: \"USER\", payload: { user: res.data.user , userType: \"student\"} });\n          console.log(\n            \"Token: \",\n            res.data.token,\n            \"User Details: \",\n            res.data.user\n          );\n          // alert(\"Signin Successfull\");\n          const notify = () => toast(\"Signin Successfull\");\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n    setFormValues(initialState);\n  };\n\n  const togglePasswordVisiblity = () => {\n    // to handle visibility of passsword\n\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\n  };\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n        <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Student Signin\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignin(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                    type={formValues.showPassword ? \"text\" : \"password\"}\n                    className={`${\n                      !formValues.password.valid && formValues.password.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={formValues.password.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.password.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.password.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#ffc107\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group\n                style={{\n                  textAlign: \"left\",\n                  fontSize: \"1.5vh\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <Link to=\"/student-signup\">\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                    Don't have an account? Sign up\n                  </a>\n                </Link>\n              </Form.Group>\n\n              <Button\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Signin\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n}\nexport default LoginForm;\n","/home/pankaj/easy-job-intern/src/components/student/register.js",["193"],"import React, { useState } from \"react\";\nimport { Button, Form, Card, InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport \"./register.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst StudentSignup = () => {\n  const history = useHistory();\n  //creating a dicitionary for every field of the form\n  const initialState = {\n    personName: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        minLength: 5,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n    email: {\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n        checkPassword: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n    contact: {\n      value: \"\",\n      validation: {\n        required: true,\n        Length: 10,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    degree: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    institutionName: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    branch: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    year: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [signupError, setSignupError] = useState(null);\n\n  const [formIsValid ,setFormIsValid] = useState(false); //boolean to check that the whole form is valid or not\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const passwordIsValidChecker = () => {\n    const { password, passwordConfirmation } = formValues;\n    return password.value === passwordConfirmation.value;\n  };\n\n  const submitSignup = (e) => {\n    const {\n      personName,\n      email,\n      password,\n      passwordConfirmation,\n      contact,\n      branch,\n      year,\n      degree,\n      institutionName,\n    } = formValues;\n\n    e.preventDefault();\n    if (!passwordIsValidChecker()) {\n      setSignupError(\"Passwords do not match\");\n      return;\n    } else {\n      axios\n        .post(\"http://localhost:5000/student/signup\", {\n          personName: personName.value,\n          email: email.value,\n          password: password.value,\n          contact: contact.value,\n          passwordConfirmation: passwordConfirmation.value,\n          branch: branch.value,\n          year: year.value,\n          degree: degree.value,\n          institutionName: institutionName.value,\n        })\n        .then((res) => {\n          console.log(res.data.user);\n          // alert(res.data.message);\n          const notify = () => toast(res.data.message);\n          notify();\n          if(res.data.user){\n            history.pushState(\"/student-login\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    setFormValues(initialState);\n  };\n  const togglePasswordVisiblity = () => { // to handle visibility of passsword \n    \n      setFormValues({...formValues, showPassword: !(formValues.showPassword)});\n    \n  };\n\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#6EE2CD\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Student Signup\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignup(e)}>\n              {/* Name of the student */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.personName.valid &&\n                    formValues.personName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  name=\"personName\"\n                  value={formValues.personName.value}\n                  onChange={handleChange}\n                />\n                {formValues.personName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.personName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Email address */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              {/*  Password */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n                <InputGroup>\n                <Form.Control\n                  className={`${\n                    !formValues.password.valid && formValues.password.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type={formValues.showPassword?\"text\":\"password\"}\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  value={formValues.password.value}\n                  onChange={handleChange}\n                />\n                {formValues.password.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.password.errorMessage}\n                  </span>\n                )}\n                <InputGroup.Append>\n                      <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\n                        <IconButton style={{width: \"25px\"}}\n                          onClick={togglePasswordVisiblity}\n                        >\n                          {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton> \n                      </InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n\n              {/* Confirm Password */}\n              <Form.Group\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Confirm Password\n                </Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    className={`${\n                      !formValues.passwordConfirmation.valid &&\n                      formValues.passwordConfirmation.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                    type=\"password\"\n                    placeholder=\"Re-enter Password\"\n                    name=\"passwordConfirmation\"\n                    value={formValues.passwordConfirmation.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.passwordConfirmation.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.passwordConfirmation.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\n                      <IconButton style={{width: \"25px\"}}\n                          onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\n                      </IconButton> \n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n\n              {/* Contact Number */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.contact.valid && formValues.contact.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"number\"\n                  placeholder=\"Enter your contact number\"\n                  name=\"contact\"\n                  value={formValues.contact.value}\n                  onChange={handleChange}\n                />\n                {formValues.contact.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.contact.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Degree */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Which degree you are pursuing?\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.degree.valid && formValues.degree.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter complete name of your degree\"\n                  name=\"degree\"\n                  value={formValues.degree.value}\n                  onChange={handleChange}\n                />\n                {formValues.degree.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.degree.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* College Name */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicName\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  College Name\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.institutionName.valid &&\n                    formValues.institutionName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Your college name\"\n                  name=\"institutionName\"\n                  value={formValues.institutionName.value}\n                  onChange={handleChange}\n                />\n                {formValues.institutionName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.institutionName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Branch of study */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Field of study\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.branch.valid && formValues.branch.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your field of study\"\n                  name=\"branch\"\n                  value={formValues.branch.value}\n                  onChange={handleChange}\n                />\n                {formValues.branch.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.branch.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Year of study */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Which year of college you are in?\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.year.valid && formValues.year.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your college year\"\n                  name=\"year\"\n                  value={formValues.year.value}\n                  onChange={handleChange}\n                />\n                {formValues.year.errorMessage && (\n                  <span className=\"error\">{formValues.year.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              {/* Already a user? */}\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\n                <Link to=\"/student-login\">\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                    Already have an account? Sign in\n                  </a>\n                </Link>\n              </Form.Group>\n\n              {signupError ? (\n                <Form.Text\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\n                  className=\"text-danger\"\n                >\n                  {signupError}\n                </Form.Text>\n              ) : null}\n              <Button\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Register\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n};\nexport default StudentSignup;\n","/home/pankaj/easy-job-intern/src/components/employer/employerSignup.js",["194"],"import React, { useState } from \"react\";\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport \"./employer.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst EmployerSignup = () => {\n  const history = useHistory();\n  //listing initial states of the fields present in the form\n  const initialState = {\n    companyName: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 3,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    email: {\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n        checkPassword: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n\n    contact: {\n      value: \"\",\n      validation: {\n        required: true,\n        Length: 10,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    personName: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [signupError, setSignupError] = useState(null);\n\n  const [formIsValid ,setFormIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const passwordIsValidChecker = () => {\n    const { password, passwordConfirmation } = formValues;\n    return password.value === passwordConfirmation.value;\n  };\n\n  const submitSignup = (e) => {\n    const {\n      companyName,\n      email,\n      password,\n      passwordConfirmation,\n      personName,\n      contact,\n    } = formValues;\n\n    e.preventDefault();\n    if (!passwordIsValidChecker()) {\n      setSignupError(\"Passwords do not match\");\n      return;\n    } else {\n      axios\n        .post(\"http://localhost:5000/employer/signup\", {\n          personName: personName.value,\n          email: email.value,\n          password: password.value,\n          contact: contact.value,\n          passwordConfirmation: passwordConfirmation.value,\n          companyName: companyName.value,\n        })\n        .then((res) => {\n          console.log(res.data.user);\n          // alert(res.data.message);\n          const notify = () => toast(res.data.message);\n          notify();\n          if(res.data.user){\n            history.push(\"/employer-login\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    setFormValues(initialState);\n  };\n  const togglePasswordVisiblity = () => {\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\n  };\n\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n        <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\n          }}\n          className=\"employer_form_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#6EE2CD\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Employer Signup\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignup(e)}>\n              {/* Name of the company */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Company Name\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.companyName.valid &&\n                    formValues.companyName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter the company name\"\n                  name=\"companyName\"\n                  value={formValues.companyName.value}\n                  onChange={handleChange}\n                />\n                {formValues.companyName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.companyName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/*Email  */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              {/* Password */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    className={`${\n                      !formValues.password.valid && formValues.password.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                    type={formValues.showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={formValues.password.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.password.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.password.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#6EE2CD\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              {/* Password Confirmation */}\n              <Form.Group\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Confirm Password\n                </Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    className={`${\n                      !formValues.passwordConfirmation.valid &&\n                      formValues.passwordConfirmation.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                    type=\"password\"\n                    placeholder=\"Re-enter Password\"\n                    name=\"passwordConfirmation\"\n                    value={formValues.passwordConfirmation.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.passwordConfirmation.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.passwordConfirmation.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#6EE2CD\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              {/* Person Name */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.personName.valid &&\n                    formValues.personName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  name=\"personName\"\n                  value={formValues.personName.value}\n                  onChange={handleChange}\n                />\n                {formValues.personName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.personName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* contact */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.contact.valid && formValues.contact.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"number\"\n                  placeholder=\"Enter your contact number\"\n                  name=\"contact\"\n                  value={formValues.contact.value}\n                  onChange={handleChange}\n                />\n                {formValues.contact.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.contact.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n              {/* For Existing user */}\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\n                <Link to=\"/employer-login\">\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                    Already have an account? Sign in\n                  </a>\n                </Link>\n              </Form.Group>\n\n              {signupError ? (\n                <Form.Text\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\n                  className=\"text-danger\"\n                >\n                  {signupError}\n                </Form.Text>\n              ) : null}\n              <Button\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Register\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n};\n\nexport default EmployerSignup;\n","/home/pankaj/easy-job-intern/src/components/employer/employerSignin.js",["195"],"import React, { useContext, useState } from \"react\";\nimport { Button, Card, Form,  InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport axios from \"axios\";\nimport \"./employer.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { UserContext } from \"../../App\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nfunction EmployerSignin() {\n  const { state, dispatch } = useContext(UserContext);\n  const history = useHistory();\n\n  const initialState = {\n    email: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n  };\n  const [formValues, setFormValues] = useState(initialState);\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitSignin = (e) => {\n    e.preventDefault();\n    const { email, password } = formValues;\n    axios\n      .post(\"http://localhost:5000/employer/signin\", {\n        email: email.value,\n        password: password.value,\n      })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          // toast(res.data.error);\n          console.log(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          localStorage.setItem(\"jwt\", res.data.token);\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n          localStorage.setItem(\"type\", JSON.stringify(\"employee\"))\n          dispatch({ type: \"USER\", payload: {user: res.data.user , userType: \"employee\"} });\n          console.log(state);\n          console.log(\n            \"Token: \",\n            res.data.token,\n            \"User Details: \",\n            res.data.user\n          );\n          // alert(\"Signin Successfull\");\n          // toast(\"Signin Successfull\");\n          const notify = () => toast('Signin Successfull');\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n    setFormValues(initialState);\n  };\n\n  const togglePasswordVisiblity = () => {\n    // to handle visibility of passsword\n\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\n  };\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"employer_form_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Employer Signin\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignin(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n\n                <InputGroup>\n                  <Form.Control\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                    type={formValues.showPassword ? \"text\" : \"password\"}\n                    className={`${\n                      !formValues.password.valid && formValues.password.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={formValues.password.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.password.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.password.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#ffc107\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n\n                <Form.Group\n                  style={{\n                    textAlign: \"left\",\n                    fontSize: \"1.5vh\",\n                    marginTop: \"10px\",\n                  }}\n                >\n                  <Link to=\"/employer-signup\">\n                    <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                      Don't have an account? Sign up\n                    </a>\n                  </Link>\n                </Form.Group>\n              </Form.Group>\n              <Button\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Signin\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n}\n\nexport default EmployerSignin;\n","/home/pankaj/easy-job-intern/src/components/contact-us/contact-us.js",[],"/home/pankaj/easy-job-intern/src/components/about-us/about-us.js",[],"/home/pankaj/easy-job-intern/src/components/privacy-policy/privacy-policy.js",[],"/home/pankaj/easy-job-intern/src/components/terms-condition/terms-condition.js",[],"/home/pankaj/easy-job-intern/src/components/CreateNew/CreatFreshersJob.js",[],"/home/pankaj/easy-job-intern/src/components/CreateNew/CreateInternship.js",[],"/home/pankaj/easy-job-intern/src/components/CreateNew/CreateJob.js",[],"/home/pankaj/easy-job-intern/src/components/Error/Error.js",[],"/home/pankaj/easy-job-intern/src/components/student-profile/Profile.js",["196","197","198","199","200","201","202","203"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Skills from \"./Skills\"\nimport Input from \"./Input\";\nimport Achievments from \"./Achievments\";\nimport Volunteer from \"./Volunteer\";\nimport Other from \"./Other\";\nimport Project from \"./Project\";\nimport Experience from \"./Experience\";\nimport Education from \"./Education\";\nimport Start from \"./Start\";\n\nconst Profile=()=>\n{\n  \n\n   return(\n        <>\n        <h1 className=\"heading\">Student Profile Builder</h1>\n        <h6>Please Enter the details below to complete your student profile:-</h6>\n        <div className=\"main-box\">\n\n            <Start/>        \n            <Education/>\n            <Experience/>\n            <Project/>\n             <Skills/>\n             <Achievments/>\n             <Volunteer/>\n             <Other/>\n             \n\n\n          \n\n \n        </div>\n        <br/>\n\n        \n        </>\n   );\n    \n}\n\n\nexport default Profile;\n\n\n\n","/home/pankaj/easy-job-intern/src/components/Internships/AllInternships.js",["204","205","206","207","208","209","210"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  Col,\n  Dropdown,\n  DropdownButton,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  Row,Spinner,Alert\n} from \"react-bootstrap\";\n\nimport toast, { Toaster } from \"react-hot-toast\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"./AllInternships.css\";\nimport { UserContext } from \"../../App\";\n\nconst AllInternships = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  console.log(internships);\n  console.log(state);\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-internships\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [internships]);\n\n  if (internships && internships[4]) {\n    console.log(internships[4]);\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const GettingDuration = (time) => {\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\n    console.log(t);\n    return t > 1 ? t + \" Months\" : t + \" Month\";\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-internship\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : internships && !internships.length > 0 ? (\n          <Alert variant=\"danger\" className=\"w-100 \" style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>\n            No internships available right now\n          </Alert>\n        ) : (\n          internships &&\n          internships.map((internship) => {\n            // console.log(internship.createdBy._id, state.user._id);\n            return (\n              <Col\n                key={internship._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {internship.companyName}{\" \"}\n                      {state &&\n                        internship.createdBy &&\n                        state.user._id == internship.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-internship/${internship._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(internship._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {internship.location}\n                    </Card.Subtitle>\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\n                      {internship.industry} {internship.industry && internship.stream && \",\"} {internship.stream}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {internship.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Stipend: {internship.stipend}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Duration: {GettingDuration(internship.duration)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(internship.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        End Date: {GettingMonth(internship.endDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {internship.techstack &&\n                        internship.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllInternships;\n","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByIndustry.js",["211","212","213","214","215","216","217"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  Col,\n  Dropdown,\n  DropdownButton,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  Row,\n  Spinner,\n  Alert,\n} from \"react-bootstrap\";\n\nimport toast, { Toaster } from \"react-hot-toast\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"./AllInternships.css\";\nimport { UserContext } from \"../../App\";\n\nconst InternshipsByIndustry = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { industry } = useParams();\n\n  console.log(internships);\n  console.log(state);\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/user/industry-internship/${industry}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [internships]);\n\n  if (internships && internships[4]) {\n    console.log(internships[4]);\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const GettingDuration = (time) => {\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\n    console.log(t);\n    return t > 1 ? t + \" Months\" : t + \" Month\";\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-internship\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : internships && !internships.length > 0 ? (\n          <Alert\n            variant=\"danger\"\n            className=\"w-100 \"\n            style={{\n              backgroundColor: \"#343A40\",\n              border: \"none\",\n              color: \"#ffc107\",\n            }}\n          >\n            No internships available right now\n          </Alert>\n        ) : (\n          internships &&\n          internships.map((internship) => {\n            // console.log(internship.createdBy._id, state.user._id);\n            return (\n              <Col\n                key={internship._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {internship.companyName}{\" \"}\n                      {state &&\n                        internship.createdBy &&\n                        state.user._id == internship.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-internship/${internship._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(internship._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {internship.location}\n                    </Card.Subtitle>\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\n                      {internship.industry}{\" \"}\n                      {internship.industry && internship.stream && \",\"}{\" \"}\n                      {internship.stream}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {internship.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Stipend: {internship.stipend}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Duration: {GettingDuration(internship.duration)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(internship.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        End Date: {GettingMonth(internship.endDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {internship.techstack &&\n                        internship.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default InternshipsByIndustry;\n","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByStream.js",["218","219","220","221","222","223","224"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  Col,\n  Dropdown,\n  DropdownButton,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  Row,\n  Spinner,\n  Alert,\n} from \"react-bootstrap\";\n\nimport toast, { Toaster } from \"react-hot-toast\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"./AllInternships.css\";\nimport { UserContext } from \"../../App\";\n\nconst InternshipsByStream = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { stream } = useParams();\n\n  console.log(internships);\n  console.log(state);\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/user/stream-internship/${stream}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [internships]);\n\n  if (internships && internships[4]) {\n    console.log(internships[4]);\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const GettingDuration = (time) => {\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\n    console.log(t);\n    return t > 1 ? t + \" Months\" : t + \" Month\";\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-internship\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : internships && !internships.length > 0 ? (\n          <Alert\n            variant=\"danger\"\n            className=\"w-100 \"\n            style={{\n              backgroundColor: \"#343A40\",\n              border: \"none\",\n              color: \"#ffc107\",\n            }}\n          >\n            No internships available right now\n          </Alert>\n        ) : (\n          internships &&\n          internships.map((internship) => {\n            // console.log(internship.createdBy._id, state.user._id);\n            return (\n              <Col\n                key={internship._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {internship.companyName}{\" \"}\n                      {state &&\n                        internship.createdBy &&\n                        state.user._id == internship.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-internship/${internship._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(internship._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {internship.location}\n                    </Card.Subtitle>\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\n                      {internship.industry}{\" \"}\n                      {internship.industry && internship.stream && \",\"}{\" \"}\n                      {internship.stream}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {internship.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Stipend: {internship.stipend}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Duration: {GettingDuration(internship.duration)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(internship.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        End Date: {GettingMonth(internship.endDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {internship.techstack &&\n                        internship.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default InternshipsByStream;\n","/home/pankaj/easy-job-intern/src/components/Internships/InternshipByLocation.js",["225","226","227","228","229","230","231"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  Col,\n  Dropdown,\n  DropdownButton,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  Row,\n  Spinner,\n  Alert,\n} from \"react-bootstrap\";\n\nimport toast, { Toaster } from \"react-hot-toast\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"./AllInternships.css\";\nimport { UserContext } from \"../../App\";\n\nconst InternshipsByLocation = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { location } = useParams();\n\n  console.log(internships);\n  console.log(state);\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/user/location-internship/${location}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [internships]);\n\n  if (internships && internships[4]) {\n    console.log(internships[4]);\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const GettingDuration = (time) => {\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\n    console.log(t);\n    return t > 1 ? t + \" Months\" : t + \" Month\";\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-internship\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : internships && !internships.length > 0 ? (\n          <Alert\n            variant=\"danger\"\n            className=\"w-100 \"\n            style={{\n              backgroundColor: \"#343A40\",\n              border: \"none\",\n              color: \"#ffc107\",\n            }}\n          >\n            No internships available right now\n          </Alert>\n        ) : (\n          internships &&\n          internships.map((internship) => {\n            // console.log(internship.createdBy._id, state.user._id);\n            return (\n              <Col\n                key={internship._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {internship.companyName}{\" \"}\n                      {state &&\n                        internship.createdBy &&\n                        state.user._id == internship.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-internship/${internship._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(internship._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {internship.location}\n                    </Card.Subtitle>\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\n                      {internship.industry}{\" \"}\n                      {internship.industry && internship.stream && \",\"}{\" \"}\n                      {internship.stream}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {internship.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Stipend: {internship.stipend}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Duration: {GettingDuration(internship.duration)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(internship.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        End Date: {GettingMonth(internship.endDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {internship.techstack &&\n                        internship.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default InternshipsByLocation;\n","/home/pankaj/easy-job-intern/src/components/FreshersJob/AllFresherJob.js",["232","233"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Col,\n  Dropdown,\n  ListGroup,\n  ListGroupItem,\n  Row,\n  Spinner,Alert\n} from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { UserContext } from \"../../App\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"../Internships/AllInternships.css\";\n// import { Alert } from \"bootstrap\";\n\nconst AllFreshersJobs = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [freshersJobs, setFreshersJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // console.log(res.data.jobs);\n          // setJobs(res.data.jobs);\n          // console.log(jobs);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-freshersjobs\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.freshersjobs);\n          setFreshersJobs(res.data.freshersjobs);\n          console.log(freshersJobs);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [freshersJobs]);\n\n  if (freshersJobs && freshersJobs[4]) {\n    console.log(freshersJobs[4]);\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : freshersJobs && !freshersJobs.length > 0 ? (\n          <Alert variant=\"danger\" className='w-100' style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>No Fresher Jobs available right now</Alert>\n        ) : (\n          freshersJobs &&\n          freshersJobs.map((fresher) => {\n            return (\n              <Col\n                key={fresher._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {fresher.companyName}\n                      {state &&\n                        fresher.createdBy &&\n                        state.user._id == fresher.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-fresher/${fresher._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(fresher._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {fresher.location}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {fresher.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Salary: {fresher.salary}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(fresher.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(fresher.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {fresher.techstack &&\n                        fresher.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllFreshersJobs;\n","/home/pankaj/easy-job-intern/src/components/Jobs/AllJobs.js",["234","235","236"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Col,\n  Dropdown,\n  ListGroup,\n  ListGroupItem,\n  Row,Spinner,Alert\n} from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { UserContext } from \"../../App\";\nimport { Link } from \"react-router-dom\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"../Internships/AllInternships.css\";\n\nconst AllJobs = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [jobs, setJobs] = useState([]);\n  const [loading,setLoading]=useState(true)\n  // useEffect(() => {\n  //   axios({\n  //     method: \"get\",\n  //     url: \"http://localhost:5000/user/all-jobs\",\n  //     headers: {\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n  //     },\n  //   })\n  //     .then((res) => {\n  //       console.log(res);\n  //       if (res.data.error) {\n  //         console.log(res.data.error);\n  //         // alert(res.data.error);\n  //         const notify = () => toast(res.data.error);\n  //         notify();\n  //       } else {\n  //         // if (res && res.data) {\n  //           console.log(res.data.jobs);\n  //           setJobs(res.data.jobs);\n  //           console.log(jobs);\n  //         // }\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"Error: \", err);\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-jobs\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false)\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.jobs);\n\n          setJobs(res.data.jobs);\n          console.log(jobs);\n        }\n      })\n      .catch((err) => {\n        setLoading(false)\n        console.log(\"Error: \", err);\n      });\n  }, [jobs]);\n\n  if (jobs && jobs[4]) {\n    console.log(jobs[4]);\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-job\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // console.log(res.data.jobs);\n          // setJobs(res.data.jobs);\n          // console.log(jobs);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : jobs && !jobs.length > 0 ? (\n          <Alert variant=\"danger\" className=\"w-100\" style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>\n            No Jobs available right now\n          </Alert>\n        ) : (\n          jobs &&\n          jobs.map((job) => {\n            return (\n              <Col\n                key={job._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {job.companyName}{\" \"}\n                      {state &&\n                        job.createdBy &&\n                        state.user._id == job.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-job/${job._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(job._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {job.location}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {job.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Salary: {job.salary}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Work Experience: {job.experience && \"Atleast\"}{\" \"}\n                        {job.experience} {job.experience === 1 && \"year\"}{\" \"}\n                        {job.experience > 1 && \"years\"}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(job.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(job.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {job.techstack &&\n                        job.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllJobs;\n","/home/pankaj/easy-job-intern/src/components/UpdateForm/InternshipUpdate.js",["237","238"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateInternship = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [internship, setInternship] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    stipend: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    endDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    industry: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    stream: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  // const setInitialValue = () => {\n  // const updatedFormElementD = { ...updatedFormValues[\"description\"] };\n  // const updatedFormElementL = { ...updatedFormValues[\"location\"] };\n  // const updatedFormElementS = { ...updatedFormValues[\"stipend\"] };\n  // const updatedFormElementTS = { ...updatedFormValues[\"techstack\"] };\n  // const updatedFormElementLD = { ...updatedFormValues[\"lastDate\"] };\n  // const updatedFormElementSD = { ...updatedFormValues[\"startDate\"] };\n  // const updatedFormElementED = { ...updatedFormValues[\"endDate\"] };\n  // updatedFormElementD.value =nullnternship.description;\n  // updatedFormElementL.value = internship.location;\n  // updatedFormElementS.value = internship.stipend;\n  // updatedFormElementTS.value = internship.techstack;\n  // updatedFormElementLD.value = internship.lastDate;\n  // updatedFormElementSD.value = internship.startDate;\n  // updatedFormElementED.value = internship.endDate;\n  // updatedFormValues[\"description\"] = updatedFormElementD;\n  // updatedFormValues[\"location\"] = updatedFormElementL;\n  // updatedFormValues[\"stipend\"] = updatedFormElementS;\n  // updatedFormValues[\"techstack\"] = updatedFormElementTS;\n  // updatedFormValues[\"lastDate\"] = updatedFormElementLD;\n  // updatedFormValues[\"startDate\"] = updatedFormElementSD;\n  // updatedFormValues[\"endDate\"] = updatedFormElementED;\n  // };\n  // useEffect(() => {\n  //   if (internship) {\n  //     setInitialState((prev) => {\n  //       return {\n  //         ...prev,\n  //         description: {\n  //           ...prev.description,\n  //           value: internship.description,\n  //         },\n  //         location: {\n  //           ...prev.location,\n  //           value: internship.location,\n  //         },\n  //         stipend: {\n  //           ...prev.stipend,\n  //           value: internship.stipend,\n  //         },\n  //       };\n  //     });\n\n  //     setFormValues(initialState);\n  //   }\n  // }, [internship]);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-internship/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internship);\n          setInternship(res.data.internship);\n          console.log(internship);\n          // if (internship) {\n          // console.log(res.data.internship.description);\n          // setInitialValue();\n          // setInitialValue(\"description\", res.data.internship.description);\n          // setInitialValue(\"location\", res.data.internship.location);\n          // setInitialValue(\"stipend\", res.data.internship.stipend);\n          // setInitialValue(\"lastDate\", new Date(res.data.internship.lastDate));\n          // setInitialValue(\"startDate\", new Date(res.data.internship.startDate));\n          // setInitialValue(\"endDate\", res.data.internship.endDate);\n          // setInitialValue(\"techstack\", res.data.internship.techstack);\n          // }\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n    console.log(typeof formValues.startDate.value);\n    const duration =\n      new Date(formValues.endDate.value) - new Date(formValues.startDate.value);\n    console.log(duration);\n\n    const {\n      description,\n      location,\n      stipend,\n      techstack,\n      lastDate,\n      startDate,\n      endDate,\n      industry,\n      stream\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-internship\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        stipend: stipend.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n        endDate: endDate.value,\n        industry: industry.value,\n        stream: stream.value,\n        duration: duration,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {internship && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Internship\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || internship.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || internship.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"exampleForm.ControlSelect1\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  name=\"industry\"\n                  value={formValues.industry.value || internship.industry}\n                  onChange={handleChange}\n                >\n                  <option>Select Industry</option>\n                  <option value=\"IT\">IT</option>\n                  <option value=\"Marketing\">Marketing</option>\n                  <option value=\"Design\">Design</option>\n                  <option value=\"MBA\">MBA</option>\n                  <option value=\"Engineering\">Engineering</option>\n                  <option value=\"Media\">Media</option>\n                  <option value=\"Teaching\">Teaching</option>\n                  <option value=\"Finance\">Finance</option>\n                </Form.Control>\n              </Form.Group>\n\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  name=\"stream\"\n                  value={formValues.stream.value || internship.stream}\n                  onChange={handleChange}\n                >\n                  <option>Select Stream</option>\n                  <option value=\"Management\">Management</option>\n                  <option value=\"Manufacturing\">Manufacturing</option>\n                  <option value=\"Accounts\">Accounts</option>\n                  <option value=\"Architecture\">Architecture</option>\n                  <option value=\"Machine Learning\">Machine Learning</option>\n                  <option value=\"Data Science\">Data Science</option>\n                  <option value=\"Development\">Development</option>\n                  <option value=\"Design\">Design</option>\n                </Form.Control>\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stipend</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter stipend\"\n                  name=\"stipend\"\n                  value={formValues.stipend.value || internship.stipend}\n                  onChange={handleChange}\n                />\n                {formValues.stipend.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.stipend.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || internship.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={\n                    formValues.lastDate.value || new Date(internship.lastDate)\n                  }\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={\n                    formValues.startDate.value || new Date(internship.startDate)\n                  }\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  End Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter end date\"\n                  name=\"endDate\"\n                  value={\n                    formValues.endDate.value || new Date(internship.endDate)\n                  }\n                  onChange={handleChange}\n                />\n                {formValues.endDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.endDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateInternship;\n","/home/pankaj/easy-job-intern/src/components/UpdateForm/JobUpdate.js",["239","240"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateJob = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [job, setJob] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    salary: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    experience: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-job/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.job);\n          setJob(res.data.job);\n          console.log(job);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n\n    const {\n      description,\n      location,\n      salary,\n      techstack,\n      lastDate,\n      startDate,\n      experience,\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-job\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        salary: salary.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n        experience: experience.value,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {job && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Job\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || job.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || job.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter salary\"\n                  name=\"salary\"\n                  value={formValues.salary.value || job.salary}\n                  onChange={handleChange}\n                />\n                {formValues.salary.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.salary.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || job.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={formValues.lastDate.value || job.lastDate}\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={formValues.startDate.value || job.startDate}\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Experience\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"Number\"\n                  placeholder=\"Enter experince\"\n                  name=\"experience\"\n                  value={formValues.experience.value || job.experience}\n                  onChange={handleChange}\n                />\n                {formValues.experience.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.experience.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateJob;\n","/home/pankaj/easy-job-intern/src/components/UpdateForm/FresherJobUpdate.js",["241","242"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateFresherJob = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [job, setJob] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    salary: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    experience: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-freshersjob/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.job);\n          setJob(res.data.job);\n          console.log(job);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n\n    const {\n      description,\n      location,\n      salary,\n      techstack,\n      lastDate,\n      startDate,\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-fresherjob\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        salary: salary.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {job && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Fresher's Job\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || job.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || job.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter salary\"\n                  name=\"salary\"\n                  value={formValues.salary.value || job.salary}\n                  onChange={handleChange}\n                />\n                {formValues.salary.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.salary.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || job.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={formValues.lastDate.value || job.lastDate}\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={formValues.startDate.value || job.startDate}\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateFresherJob;\n","/home/pankaj/easy-job-intern/src/components/welcomeSignup/welcomeSignup.js",[],"/home/pankaj/easy-job-intern/src/components/welcomeSignup/welcomeSignupEmployer.js",[],"/home/pankaj/easy-job-intern/src/utils/checkValidation.js",[],"/home/pankaj/easy-job-intern/src/components/student-profile/Start.js",["243","244","245","246","247"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Skills from \"./Skills\"\nimport Input from \"./Input\";\n\nconst Start=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  profileLink:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   profileLink: '' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n      return( <>\n        <form className=\"form-main\" onSubmit={handleSubmit}>\n        <div className=\"side\">\n        <label className=\"label-text\">First Name<span>*</span></label><br/>\n        <input type=\"text\" placeholder=\"Enter your first name\" className=\"text-long\"></input><br/>\n        </div>\n\n        <div className=\"side\">\n        <label className=\"label-text\">Last Name<span>*</span></label><br/>\n        <input type=\"text\" placeholder=\"Enter your last name\" className=\"text-long\"></input><br/>\n        </div>\n\n        <label className=\"label-text\">Studnet Address<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your student address\"></input><br/>\n\n        <label className=\"label-text\">Github Link<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your github link\"></input><br/>\n        \n        \n        <label className=\"label-text\">LinkedIn Link<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your linkedinlink\"></input><br/>\n\n        \n        <label className=\"label-text\">other Profile Link<span>*</span></label><br/>\n        {/* <input type=\"text\" className=\"text-long\" placeholder=\"Enter your other profile link\"></input> */}\n\n\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n            <input\n              name=\"profileLink\"\n              label=\"Profile Link\"\n              value={inputField.profileLink}\n              className=\"text-long\"\n              placeholder=\"Enter your other profile link\"\n              onChange={event => handleChangeInput(inputField.id, event)}\n            ></input>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n            </div>\n        ))}\n        </form><hr></hr>\n        </>\n      );\n}\n\nexport default Start;","/home/pankaj/easy-job-intern/src/components/student-profile/Experience.js",["248","249","250"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Experience() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), company:'', title:'',sd:'', ld:'', location:'', desc:''},\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(),  company:'', title:'',sd:'', ld:'', location:'', desc:''}])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n    <Container>\n      <h2 className=\"center\">Experience</h2>\n      <form className=\"experience\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"Company/Organization\"/><br/>\n            <input\n              name=\"company\"\n              label=\"Company/organization\"\n              placeholder=\"Enter Company/organization Name\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Title\"/><br/>\n             <input\n              name=\"title\"\n              label=\"Title\"\n              placeholder=\"Enter Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Start Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Location\"/><br/>\n             <input\n              name=\"location\"\n              label=\"Location\"\n              placeholder=\"Enter Location\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Description\"/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n    </Container>\n  );\n}\n\nexport default Experience;","/home/pankaj/easy-job-intern/src/components/student-profile/Education.js",["251","252","253","254"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Education() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' }])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n  <>\n  <h2 className=\"edu\">Education</h2>\n      <form className=\"education\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"School\"/><br/>\n            <input\n              name=\"school\"\n              label=\"School Name\"\n              placeholder=\"Ex:Boston University\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Degree\"/><br/>\n             <input\n              name=\"degree\"\n              label=\"Degree\"\n              placeholder=\"Ex:Bachelors\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Field of Study\"/><br/>\n            <input\n              name=\"study\"\n              label=\"Study \"\n              placeholder=\"Ex:Business\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Star Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Grade\"/><br/>\n            <input\n              name=\"grade\"\n              label=\"Grade \"\n              placeholder=\"Enter Your Grade\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Description\"/><br/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n      </>\n    \n  );\n}\n\nexport default Education;","/home/pankaj/easy-job-intern/src/components/student-profile/Project.js",["255","256","257"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Project() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' }])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n    <Container>\n      <h2 className=\"edu\">Project</h2>\n      <form className=\"projects\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"Project-Title\"/><br/>\n            <input\n              name=\"project\"\n              label=\"Project Name\"\n              placeholder=\"Enter Project Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Project-Link\"/><br/>\n             <input\n              name=\"project\"\n              label=\"Project Name\"\n              placeholder=\"Enter Project Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Star Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Description\"/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n    </Container>\n  );\n}\n\nexport default Project;","/home/pankaj/easy-job-intern/src/components/student-profile/Other.js",["258","259","260","261"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Other=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  Other:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   Other:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"Other\">\n        <h2>Other</h2>\n        <Label value=\"Other\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"Other\"\n        label=\"Other\"\n        value={inputField.Other}\n        className=\"text-long\"\n        placeholder=\"Enter your Other\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n      \n\n      );}\n\n      export default Other;","/home/pankaj/easy-job-intern/src/components/student-profile/Volunteer.js",["262","263","264","265"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Volunteer=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  volunteer:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   volunteer:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"volunteer\">\n        <h2>Volunteer Experience</h2>\n        <Label value=\"Volunteer Experience\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"volunteer\"\n        label=\"volunteer\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your Skills\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Volunteer;","/home/pankaj/easy-job-intern/src/components/student-profile/Achievments.js",["266","267","268","269"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Achievments=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  skills:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   skills:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"skills\">\n        <h2>Achievments</h2>\n        <Label value=\"Achievments\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"achievments\"\n        label=\"achievments\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your achievments\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Achievments;","/home/pankaj/easy-job-intern/src/components/student-profile/Input.js",[],"/home/pankaj/easy-job-intern/src/components/student-profile/Skills.js",["270","271","272","273"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Skills=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  skills:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   skills:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"skills edu\">\n        <h2 >Skills</h2>\n        <Label value=\"Skills\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"skills\"\n        label=\"skills\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your Skills\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Skills;","/home/pankaj/easy-job-intern/src/components/student-profile/Label.js",[],{"ruleId":"274","severity":1,"message":"275","line":49,"column":10,"nodeType":"276","messageId":"277","endLine":49,"endColumn":21},{"ruleId":"274","severity":1,"message":"275","line":114,"column":10,"nodeType":"276","messageId":"277","endLine":114,"endColumn":21},{"ruleId":"274","severity":1,"message":"275","line":84,"column":10,"nodeType":"276","messageId":"277","endLine":84,"endColumn":21},{"ruleId":"274","severity":1,"message":"275","line":48,"column":10,"nodeType":"276","messageId":"277","endLine":48,"endColumn":21},{"ruleId":"274","severity":1,"message":"278","line":3,"column":11,"nodeType":"276","messageId":"277","endLine":3,"endColumn":19},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"281","line":6,"column":8,"nodeType":"276","messageId":"277","endLine":6,"endColumn":18},{"ruleId":"274","severity":1,"message":"282","line":7,"column":8,"nodeType":"276","messageId":"277","endLine":7,"endColumn":18},{"ruleId":"274","severity":1,"message":"283","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":15},{"ruleId":"274","severity":1,"message":"284","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":13},{"ruleId":"274","severity":1,"message":"285","line":11,"column":8,"nodeType":"276","messageId":"277","endLine":11,"endColumn":13},{"ruleId":"274","severity":1,"message":"286","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":14},{"ruleId":"274","severity":1,"message":"287","line":3,"column":16,"nodeType":"276","messageId":"277","endLine":3,"endColumn":25},{"ruleId":"274","severity":1,"message":"279","line":5,"column":3,"nodeType":"276","messageId":"277","endLine":5,"endColumn":9},{"ruleId":"274","severity":1,"message":"288","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":17},{"ruleId":"274","severity":1,"message":"289","line":12,"column":3,"nodeType":"276","messageId":"277","endLine":12,"endColumn":8},{"ruleId":"274","severity":1,"message":"290","line":23,"column":18,"nodeType":"276","messageId":"277","endLine":23,"endColumn":26},{"ruleId":"291","severity":1,"message":"292","line":161,"column":40,"nodeType":"293","messageId":"294","endLine":161,"endColumn":42},{"ruleId":"274","severity":1,"message":"286","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":14},{"ruleId":"274","severity":1,"message":"279","line":5,"column":3,"nodeType":"276","messageId":"277","endLine":5,"endColumn":9},{"ruleId":"274","severity":1,"message":"288","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":17},{"ruleId":"274","severity":1,"message":"289","line":12,"column":3,"nodeType":"276","messageId":"277","endLine":12,"endColumn":8},{"ruleId":"274","severity":1,"message":"290","line":25,"column":18,"nodeType":"276","messageId":"277","endLine":25,"endColumn":26},{"ruleId":"295","severity":1,"message":"296","line":58,"column":6,"nodeType":"297","endLine":58,"endColumn":19,"suggestions":"298"},{"ruleId":"291","severity":1,"message":"292","line":173,"column":40,"nodeType":"293","messageId":"294","endLine":173,"endColumn":42},{"ruleId":"274","severity":1,"message":"286","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":14},{"ruleId":"274","severity":1,"message":"279","line":5,"column":3,"nodeType":"276","messageId":"277","endLine":5,"endColumn":9},{"ruleId":"274","severity":1,"message":"288","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":17},{"ruleId":"274","severity":1,"message":"289","line":12,"column":3,"nodeType":"276","messageId":"277","endLine":12,"endColumn":8},{"ruleId":"274","severity":1,"message":"290","line":25,"column":18,"nodeType":"276","messageId":"277","endLine":25,"endColumn":26},{"ruleId":"295","severity":1,"message":"299","line":58,"column":6,"nodeType":"297","endLine":58,"endColumn":19,"suggestions":"300"},{"ruleId":"291","severity":1,"message":"292","line":173,"column":40,"nodeType":"293","messageId":"294","endLine":173,"endColumn":42},{"ruleId":"274","severity":1,"message":"286","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":14},{"ruleId":"274","severity":1,"message":"279","line":5,"column":3,"nodeType":"276","messageId":"277","endLine":5,"endColumn":9},{"ruleId":"274","severity":1,"message":"288","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":17},{"ruleId":"274","severity":1,"message":"289","line":12,"column":3,"nodeType":"276","messageId":"277","endLine":12,"endColumn":8},{"ruleId":"274","severity":1,"message":"290","line":25,"column":18,"nodeType":"276","messageId":"277","endLine":25,"endColumn":26},{"ruleId":"295","severity":1,"message":"301","line":58,"column":6,"nodeType":"297","endLine":58,"endColumn":19,"suggestions":"302"},{"ruleId":"291","severity":1,"message":"292","line":173,"column":40,"nodeType":"293","messageId":"294","endLine":173,"endColumn":42},{"ruleId":"274","severity":1,"message":"290","line":20,"column":18,"nodeType":"276","messageId":"277","endLine":20,"endColumn":26},{"ruleId":"291","severity":1,"message":"292","line":147,"column":40,"nodeType":"293","messageId":"294","endLine":147,"endColumn":42},{"ruleId":"274","severity":1,"message":"286","line":13,"column":10,"nodeType":"276","messageId":"277","endLine":13,"endColumn":14},{"ruleId":"274","severity":1,"message":"290","line":19,"column":18,"nodeType":"276","messageId":"277","endLine":19,"endColumn":26},{"ruleId":"291","severity":1,"message":"292","line":177,"column":40,"nodeType":"293","messageId":"294","endLine":177,"endColumn":42},{"ruleId":"274","severity":1,"message":"275","line":98,"column":10,"nodeType":"276","messageId":"277","endLine":98,"endColumn":21},{"ruleId":"295","severity":1,"message":"303","line":182,"column":6,"nodeType":"297","endLine":182,"endColumn":8,"suggestions":"304"},{"ruleId":"274","severity":1,"message":"275","line":80,"column":10,"nodeType":"276","messageId":"277","endLine":80,"endColumn":21},{"ruleId":"295","severity":1,"message":"305","line":106,"column":6,"nodeType":"297","endLine":106,"endColumn":8,"suggestions":"306"},{"ruleId":"274","severity":1,"message":"275","line":80,"column":10,"nodeType":"276","messageId":"277","endLine":80,"endColumn":21},{"ruleId":"295","severity":1,"message":"305","line":106,"column":6,"nodeType":"297","endLine":106,"endColumn":8,"suggestions":"307"},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"284","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":13},{"ruleId":"274","severity":1,"message":"308","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":14},{"ruleId":"274","severity":1,"message":"285","line":11,"column":8,"nodeType":"276","messageId":"277","endLine":11,"endColumn":13},{"ruleId":"274","severity":1,"message":"309","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":17},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":12},{"ruleId":"274","severity":1,"message":"310","line":2,"column":8,"nodeType":"276","messageId":"277","endLine":2,"endColumn":17},{"ruleId":"274","severity":1,"message":"309","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":17},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":12},{"ruleId":"274","severity":1,"message":"309","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":17},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":12},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"285","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":13},{"ruleId":"274","severity":1,"message":"311","line":20,"column":13,"nodeType":"276","messageId":"277","endLine":20,"endColumn":25},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"285","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":13},{"ruleId":"274","severity":1,"message":"311","line":20,"column":13,"nodeType":"276","messageId":"277","endLine":20,"endColumn":25},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"285","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":13},{"ruleId":"274","severity":1,"message":"311","line":20,"column":13,"nodeType":"276","messageId":"277","endLine":20,"endColumn":25},{"ruleId":"274","severity":1,"message":"279","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":12},{"ruleId":"274","severity":1,"message":"285","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":13},{"ruleId":"274","severity":1,"message":"311","line":20,"column":13,"nodeType":"276","messageId":"277","endLine":20,"endColumn":25},"no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'DropdownButton' is defined but never used.","'Modal' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'industry'. Either include it or remove the dependency array.","ArrayExpression",["312"],"React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.",["314"],"React Hook useEffect has missing dependencies: 'internship' and 'postId'. Either include them or remove the dependency array.",["315"],"React Hook useEffect has missing dependencies: 'job' and 'postId'. Either include them or remove the dependency array.",["316"],["317"],"'Skills' is defined but never used.","'TextField' is defined but never used.","'Container' is defined but never used.","'handleSubmit' is assigned a value but never used.",{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"326","fix":"328"},"Update the dependencies array to be: [industry, internships]",{"range":"329","text":"330"},"Update the dependencies array to be: [internships, stream]",{"range":"331","text":"332"},"Update the dependencies array to be: [internships, location]",{"range":"333","text":"334"},"Update the dependencies array to be: [internship, postId]",{"range":"335","text":"336"},"Update the dependencies array to be: [job, postId]",{"range":"337","text":"338"},{"range":"339","text":"338"},[1499,1512],"[industry, internships]",[1491,1504],"[internships, stream]",[1499,1512],"[internships, location]",[5333,5335],"[internship, postId]",[2465,2467],"[job, postId]",[2480,2482]]