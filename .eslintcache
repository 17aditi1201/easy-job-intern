[{"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\index.js":"1","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\reportWebVitals.js":"2","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\App.js":"3","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\reducers\\userReducer.js":"4","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\home\\home.js":"5","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\about-us\\about-us.js":"6","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\footer\\footer.js":"7","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\terms-condition\\terms-condition.js":"8","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\employer\\employerSignin.js":"9","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\privacy-policy\\privacy-policy.js":"10","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\contact-us\\contact-us.js":"11","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreateInternship.js":"12","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreatFreshersJob.js":"13","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreateJob.js":"14","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\employer\\employerSignup.js":"15","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student\\login.js":"16","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student\\register.js":"17","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Profile.js":"18","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByStream.js":"19","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByLocation.js":"20","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByStream.js":"21","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipsGroupedByIndustry.js":"22","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByIndustry.js":"23","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js":"24","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByLocation.js":"25","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipsGroupedByLoction.js":"26","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipGroupedByStream.js":"27","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByIndustry.js":"28","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\AllJobs.js":"29","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Error\\Error.js":"30","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\InternshipUpdate.js":"31","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\JobUpdate.js":"32","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js":"33","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\FreshersJob\\AllFresherJob.js":"34","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\FresherJobUpdate.js":"35","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\welcomeSignup\\welcomeSignup.js":"36","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\navbar\\navbar.js":"37","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\AllInternships.js":"38","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\checkValidation.js":"39","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Start.js":"40","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Education.js":"41","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Project.js":"42","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Experience.js":"43","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Volunteer.js":"44","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Other.js":"45","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Input.js":"46","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Label.js":"47","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Skills.js":"48","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Achievments.js":"49","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\InternshipCard\\InternshipCard.js":"50","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\JobsCard\\JobsCard.js":"51","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\FresherJobCard\\FresherJobCard.js":"52"},{"size":517,"mtime":1615393714645,"results":"53","hashOfConfig":"54"},{"size":375,"mtime":1615393714647,"results":"55","hashOfConfig":"54"},{"size":10139,"mtime":1622182416025,"results":"56","hashOfConfig":"54"},{"size":212,"mtime":1618207705533,"results":"57","hashOfConfig":"54"},{"size":10873,"mtime":1622045079529,"results":"58","hashOfConfig":"54"},{"size":4007,"mtime":1618207705511,"results":"59","hashOfConfig":"54"},{"size":7852,"mtime":1621498172765,"results":"60","hashOfConfig":"54"},{"size":2196,"mtime":1615393714644,"results":"61","hashOfConfig":"54"},{"size":8548,"mtime":1621498172567,"results":"62","hashOfConfig":"54"},{"size":1754,"mtime":1615655421866,"results":"63","hashOfConfig":"54"},{"size":6937,"mtime":1618207705522,"results":"64","hashOfConfig":"54"},{"size":16211,"mtime":1621498172453,"results":"65","hashOfConfig":"54"},{"size":14311,"mtime":1621498172447,"results":"66","hashOfConfig":"54"},{"size":15266,"mtime":1621683739935,"results":"67","hashOfConfig":"54"},{"size":14275,"mtime":1621498172653,"results":"68","hashOfConfig":"54"},{"size":8399,"mtime":1618333175480,"results":"69","hashOfConfig":"54"},{"size":17613,"mtime":1618333175482,"results":"70","hashOfConfig":"54"},{"size":1272,"mtime":1618562990383,"results":"71","hashOfConfig":"54"},{"size":4108,"mtime":1622179205842,"results":"72","hashOfConfig":"54"},{"size":4920,"mtime":1622182279865,"results":"73","hashOfConfig":"54"},{"size":4914,"mtime":1622182363000,"results":"74","hashOfConfig":"54"},{"size":4439,"mtime":1622179205853,"results":"75","hashOfConfig":"54"},{"size":4979,"mtime":1622182199833,"results":"76","hashOfConfig":"54"},{"size":4351,"mtime":1622181951053,"results":"77","hashOfConfig":"54"},{"size":4118,"mtime":1622179205828,"results":"78","hashOfConfig":"54"},{"size":4512,"mtime":1622179205854,"results":"79","hashOfConfig":"54"},{"size":4506,"mtime":1622179205851,"results":"80","hashOfConfig":"54"},{"size":4118,"mtime":1622179205820,"results":"81","hashOfConfig":"54"},{"size":4569,"mtime":1622182056670,"results":"82","hashOfConfig":"54"},{"size":602,"mtime":1621925225274,"results":"83","hashOfConfig":"54"},{"size":17448,"mtime":1621498172565,"results":"84","hashOfConfig":"54"},{"size":13806,"mtime":1621498172566,"results":"85","hashOfConfig":"54"},{"size":863,"mtime":1621498172768,"results":"86","hashOfConfig":"54"},{"size":3957,"mtime":1622181967001,"results":"87","hashOfConfig":"54"},{"size":12934,"mtime":1621498172462,"results":"88","hashOfConfig":"54"},{"size":840,"mtime":1621498172767,"results":"89","hashOfConfig":"54"},{"size":7279,"mtime":1622182451259,"results":"90","hashOfConfig":"54"},{"size":3788,"mtime":1622179205819,"results":"91","hashOfConfig":"54"},{"size":1874,"mtime":1618476130692,"results":"92","hashOfConfig":"54"},{"size":3422,"mtime":1618562991053,"results":"93","hashOfConfig":"54"},{"size":4543,"mtime":1618562990366,"results":"94","hashOfConfig":"54"},{"size":3849,"mtime":1618562990384,"results":"95","hashOfConfig":"54"},{"size":4243,"mtime":1618562990367,"results":"96","hashOfConfig":"54"},{"size":2107,"mtime":1618562991054,"results":"97","hashOfConfig":"54"},{"size":2055,"mtime":1618562990382,"results":"98","hashOfConfig":"54"},{"size":182,"mtime":1618562990368,"results":"99","hashOfConfig":"54"},{"size":205,"mtime":1618562990379,"results":"100","hashOfConfig":"54"},{"size":2063,"mtime":1618562991045,"results":"101","hashOfConfig":"54"},{"size":2093,"mtime":1618562990364,"results":"102","hashOfConfig":"54"},{"size":4514,"mtime":1622179205893,"results":"103","hashOfConfig":"54"},{"size":4229,"mtime":1622133243130,"results":"104","hashOfConfig":"54"},{"size":4096,"mtime":1622135463469,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"eg88cv",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"108"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"108"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"108"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"108"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"108"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"108"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\index.js",[],["227","228"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\reportWebVitals.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\App.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\reducers\\userReducer.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\home\\home.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\about-us\\about-us.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\footer\\footer.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\terms-condition\\terms-condition.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\employer\\employerSignin.js",["229"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form,  InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction EmployerSignin() {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/employer/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          // toast(res.data.error);\r\n          console.log(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"employee\"))\r\n          dispatch({ type: \"USER\", payload: {user: res.data.user , userType: \"employee\"} });\r\n          console.log(state);\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          // toast(\"Signin Successfull\");\r\n          const notify = () => toast('Signin Successfull');\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <Form.Group\r\n                  style={{\r\n                    textAlign: \"left\",\r\n                    fontSize: \"1.5vh\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <Link to=\"/employer-signup\">\r\n                    <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                      Don't have an account? Sign up\r\n                    </a>\r\n                  </Link>\r\n                </Form.Group>\r\n              </Form.Group>\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployerSignin;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\privacy-policy\\privacy-policy.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\contact-us\\contact-us.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreateInternship.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreatFreshersJob.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\CreateNew\\CreateJob.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\employer\\employerSignup.js",["230"],"import React, { useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst EmployerSignup = () => {\r\n  const history = useHistory();\r\n  //listing initial states of the fields present in the form\r\n  const initialState = {\r\n    companyName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 3,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    personName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      companyName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      personName,\r\n      contact,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/employer/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          companyName: companyName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.push(\"/employer-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => {\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the company */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Company Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.companyName.valid &&\r\n                    formValues.companyName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter the company name\"\r\n                  name=\"companyName\"\r\n                  value={formValues.companyName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.companyName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.companyName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*Email  */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Password Confirmation */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Person Name */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* contact */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              {/* For Existing user */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/employer-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployerSignup;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student\\login.js",["231"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction LoginForm() {\r\n  const { dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/student/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"student\"));\r\n          dispatch({ type: \"USER\", payload: { user: res.data.user , userType: \"student\"} });\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          const notify = () => toast(\"Signin Successfull\");\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  fontSize: \"1.5vh\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <Link to=\"/student-signup\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Don't have an account? Sign up\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default LoginForm;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student\\register.js",["232"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Card, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst StudentSignup = () => {\r\n  const history = useHistory();\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    personName: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    degree: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    institutionName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    branch: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    year: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false); //boolean to check that the whole form is valid or not\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      personName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      contact,\r\n      branch,\r\n      year,\r\n      degree,\r\n      institutionName,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/student/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          branch: branch.value,\r\n          year: year.value,\r\n          degree: degree.value,\r\n          institutionName: institutionName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.pushState(\"/student-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => { // to handle visibility of passsword \r\n    \r\n      setFormValues({...formValues, showPassword: !(formValues.showPassword)});\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the student */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Email address */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*  Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.password.valid && formValues.password.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type={formValues.showPassword?\"text\":\"password\"}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  value={formValues.password.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.password.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.password.errorMessage}\r\n                  </span>\r\n                )}\r\n                <InputGroup.Append>\r\n                      <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                        <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                        >\r\n                          {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton> \r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Confirm Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                      <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton> \r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Contact Number */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Degree */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which degree you are pursuing?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.degree.valid && formValues.degree.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter complete name of your degree\"\r\n                  name=\"degree\"\r\n                  value={formValues.degree.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.degree.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.degree.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* College Name */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicName\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  College Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.institutionName.valid &&\r\n                    formValues.institutionName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Your college name\"\r\n                  name=\"institutionName\"\r\n                  value={formValues.institutionName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.institutionName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.institutionName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Branch of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Field of study\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.branch.valid && formValues.branch.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your field of study\"\r\n                  name=\"branch\"\r\n                  value={formValues.branch.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.branch.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.branch.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Year of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which year of college you are in?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.year.valid && formValues.year.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your college year\"\r\n                  name=\"year\"\r\n                  value={formValues.year.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.year.errorMessage && (\r\n                  <span className=\"error\">{formValues.year.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Already a user? */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/student-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default StudentSignup;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Profile.js",["233","234","235","236","237","238","239","240"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Skills from \"./Skills\"\r\nimport Input from \"./Input\";\r\nimport Achievments from \"./Achievments\";\r\nimport Volunteer from \"./Volunteer\";\r\nimport Other from \"./Other\";\r\nimport Project from \"./Project\";\r\nimport Experience from \"./Experience\";\r\nimport Education from \"./Education\";\r\nimport Start from \"./Start\";\r\n\r\nconst Profile=()=>\r\n{\r\n  \r\n\r\n   return(\r\n        <>\r\n        <h1 className=\"heading\">Student Profile Builder</h1>\r\n        <h6>Please Enter the details below to complete your student profile:-</h6>\r\n        <div className=\"main-box\">\r\n\r\n            <Start/>        \r\n            <Education/>\r\n            <Experience/>\r\n            <Project/>\r\n             <Skills/>\r\n             <Achievments/>\r\n             <Volunteer/>\r\n             <Other/>\r\n             \r\n\r\n\r\n          \r\n\r\n \r\n        </div>\r\n        <br/>\r\n\r\n        \r\n        </>\r\n   );\r\n    \r\n}\r\n\r\n\r\nexport default Profile;\r\n\r\n\r\n\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByStream.js",["241","242","243"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByLocation.js",["244","245"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByStream.js",["246","247"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipsGroupedByIndustry.js",["248","249","250"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\JobsGroupedByIndustry.js",["251","252","253","254","255","256"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js",["257"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByLocation.js",["258","259","260"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipsGroupedByLoction.js",["261","262","263"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipGroupedByStream.js",["264","265","266"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\InternshipByIndustry.js",["267","268","269"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Jobs\\AllJobs.js",["270","271"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Error\\Error.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\InternshipUpdate.js",["272","273"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateInternship = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [internship, setInternship] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stipend: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    endDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  // const setInitialValue = () => {\r\n  // const updatedFormElementD = { ...updatedFormValues[\"description\"] };\r\n  // const updatedFormElementL = { ...updatedFormValues[\"location\"] };\r\n  // const updatedFormElementS = { ...updatedFormValues[\"stipend\"] };\r\n  // const updatedFormElementTS = { ...updatedFormValues[\"techstack\"] };\r\n  // const updatedFormElementLD = { ...updatedFormValues[\"lastDate\"] };\r\n  // const updatedFormElementSD = { ...updatedFormValues[\"startDate\"] };\r\n  // const updatedFormElementED = { ...updatedFormValues[\"endDate\"] };\r\n  // updatedFormElementD.value =nullnternship.description;\r\n  // updatedFormElementL.value = internship.location;\r\n  // updatedFormElementS.value = internship.stipend;\r\n  // updatedFormElementTS.value = internship.techstack;\r\n  // updatedFormElementLD.value = internship.lastDate;\r\n  // updatedFormElementSD.value = internship.startDate;\r\n  // updatedFormElementED.value = internship.endDate;\r\n  // updatedFormValues[\"description\"] = updatedFormElementD;\r\n  // updatedFormValues[\"location\"] = updatedFormElementL;\r\n  // updatedFormValues[\"stipend\"] = updatedFormElementS;\r\n  // updatedFormValues[\"techstack\"] = updatedFormElementTS;\r\n  // updatedFormValues[\"lastDate\"] = updatedFormElementLD;\r\n  // updatedFormValues[\"startDate\"] = updatedFormElementSD;\r\n  // updatedFormValues[\"endDate\"] = updatedFormElementED;\r\n  // };\r\n  // useEffect(() => {\r\n  //   if (internship) {\r\n  //     setInitialState((prev) => {\r\n  //       return {\r\n  //         ...prev,\r\n  //         description: {\r\n  //           ...prev.description,\r\n  //           value: internship.description,\r\n  //         },\r\n  //         location: {\r\n  //           ...prev.location,\r\n  //           value: internship.location,\r\n  //         },\r\n  //         stipend: {\r\n  //           ...prev.stipend,\r\n  //           value: internship.stipend,\r\n  //         },\r\n  //       };\r\n  //     });\r\n\r\n  //     setFormValues(initialState);\r\n  //   }\r\n  // }, [internship]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-internship/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internship);\r\n          setInternship(res.data.internship);\r\n          console.log(internship);\r\n          // if (internship) {\r\n          // console.log(res.data.internship.description);\r\n          // setInitialValue();\r\n          // setInitialValue(\"description\", res.data.internship.description);\r\n          // setInitialValue(\"location\", res.data.internship.location);\r\n          // setInitialValue(\"stipend\", res.data.internship.stipend);\r\n          // setInitialValue(\"lastDate\", new Date(res.data.internship.lastDate));\r\n          // setInitialValue(\"startDate\", new Date(res.data.internship.startDate));\r\n          // setInitialValue(\"endDate\", res.data.internship.endDate);\r\n          // setInitialValue(\"techstack\", res.data.internship.techstack);\r\n          // }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n    console.log(typeof formValues.startDate.value);\r\n    const duration =\r\n      new Date(formValues.endDate.value) - new Date(formValues.startDate.value);\r\n    console.log(duration);\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      stipend,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      endDate,\r\n      industry,\r\n      stream\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-internship\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        stipend: stipend.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        endDate: endDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n        duration: duration,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {internship && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Internship\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || internship.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || internship.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"exampleForm.ControlSelect1\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || internship.industry}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Industry</option>\r\n                  <option value=\"IT\">IT</option>\r\n                  <option value=\"Marketing\">Marketing</option>\r\n                  <option value=\"Design\">Design</option>\r\n                  <option value=\"MBA\">MBA</option>\r\n                  <option value=\"Engineering\">Engineering</option>\r\n                  <option value=\"Media\">Media</option>\r\n                  <option value=\"Teaching\">Teaching</option>\r\n                  <option value=\"Finance\">Finance</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || internship.stream}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Stream</option>\r\n                  <option value=\"Management\">Management</option>\r\n                  <option value=\"Manufacturing\">Manufacturing</option>\r\n                  <option value=\"Accounts\">Accounts</option>\r\n                  <option value=\"Architecture\">Architecture</option>\r\n                  <option value=\"Machine Learning\">Machine Learning</option>\r\n                  <option value=\"Data Science\">Data Science</option>\r\n                  <option value=\"Development\">Development</option>\r\n                  <option value=\"Design\">Design</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stipend</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter stipend\"\r\n                  name=\"stipend\"\r\n                  value={formValues.stipend.value || internship.stipend}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stipend.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stipend.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || internship.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={\r\n                    formValues.lastDate.value || new Date(internship.lastDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={\r\n                    formValues.startDate.value || new Date(internship.startDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  End Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter end date\"\r\n                  name=\"endDate\"\r\n                  value={\r\n                    formValues.endDate.value || new Date(internship.endDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.endDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.endDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateInternship;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\JobUpdate.js",["274","275"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-job/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      experience,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-job\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        experience: experience.value,\r\n        stream: stream.value,\r\n        industry: industry.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Experience\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"Number\"\r\n                  placeholder=\"Enter experince\"\r\n                  name=\"experience\"\r\n                  value={formValues.experience.value || job.experience}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.experience.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.experience.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateJob;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\FreshersJob\\AllFresherJob.js",["276"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\UpdateForm\\FresherJobUpdate.js",["277","278"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateFresherJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-freshersjob/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-fresherjob\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Fresher's Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Location\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateFresherJob;\r\n","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\welcomeSignup\\welcomeSignup.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\navbar\\navbar.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\Internships\\AllInternships.js",["279","280"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\checkValidation.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Start.js",["281","282","283","284","285"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Skills from \"./Skills\"\r\nimport Input from \"./Input\";\r\n\r\nconst Start=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  profileLink:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   profileLink: '' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n      return( <>\r\n        <form className=\"form-main\" onSubmit={handleSubmit}>\r\n        <div className=\"side\">\r\n        <label className=\"label-text\">First Name<span>*</span></label><br/>\r\n        <input type=\"text\" placeholder=\"Enter your first name\" className=\"text-long\"></input><br/>\r\n        </div>\r\n\r\n        <div className=\"side\">\r\n        <label className=\"label-text\">Last Name<span>*</span></label><br/>\r\n        <input type=\"text\" placeholder=\"Enter your last name\" className=\"text-long\"></input><br/>\r\n        </div>\r\n\r\n        <label className=\"label-text\">Studnet Address<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your student address\"></input><br/>\r\n\r\n        <label className=\"label-text\">Github Link<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your github link\"></input><br/>\r\n        \r\n        \r\n        <label className=\"label-text\">LinkedIn Link<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your linkedinlink\"></input><br/>\r\n\r\n        \r\n        <label className=\"label-text\">other Profile Link<span>*</span></label><br/>\r\n        {/* <input type=\"text\" className=\"text-long\" placeholder=\"Enter your other profile link\"></input> */}\r\n\r\n\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n            <input\r\n              name=\"profileLink\"\r\n              label=\"Profile Link\"\r\n              value={inputField.profileLink}\r\n              className=\"text-long\"\r\n              placeholder=\"Enter your other profile link\"\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            ></input>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n            </div>\r\n        ))}\r\n        </form><hr></hr>\r\n        </>\r\n      );\r\n}\r\n\r\nexport default Start;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Education.js",["286","287","288","289"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Education() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' },\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' }])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n  <>\r\n  <h2 className=\"edu\">Education</h2>\r\n      <form className=\"education\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"School\"/><br/>\r\n            <input\r\n              name=\"school\"\r\n              label=\"School Name\"\r\n              placeholder=\"Ex:Boston University\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Degree\"/><br/>\r\n             <input\r\n              name=\"degree\"\r\n              label=\"Degree\"\r\n              placeholder=\"Ex:Bachelors\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Field of Study\"/><br/>\r\n            <input\r\n              name=\"study\"\r\n              label=\"Study \"\r\n              placeholder=\"Ex:Business\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Star Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Grade\"/><br/>\r\n            <input\r\n              name=\"grade\"\r\n              label=\"Grade \"\r\n              placeholder=\"Enter Your Grade\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Description\"/><br/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n      </>\r\n    \r\n  );\r\n}\r\n\r\nexport default Education;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Project.js",["290","291","292"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Project() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' },\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' }])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h2 className=\"edu\">Project</h2>\r\n      <form className=\"projects\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"Project-Title\"/><br/>\r\n            <input\r\n              name=\"project\"\r\n              label=\"Project Name\"\r\n              placeholder=\"Enter Project Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Project-Link\"/><br/>\r\n             <input\r\n              name=\"project\"\r\n              label=\"Project Name\"\r\n              placeholder=\"Enter Project Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Star Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Description\"/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Project;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Experience.js",["293","294","295"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Experience() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), company:'', title:'',sd:'', ld:'', location:'', desc:''},\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(),  company:'', title:'',sd:'', ld:'', location:'', desc:''}])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h2 className=\"center\">Experience</h2>\r\n      <form className=\"experience\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"Company/Organization\"/><br/>\r\n            <input\r\n              name=\"company\"\r\n              label=\"Company/organization\"\r\n              placeholder=\"Enter Company/organization Name\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Title\"/><br/>\r\n             <input\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              placeholder=\"Enter Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Start Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Location\"/><br/>\r\n             <input\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              placeholder=\"Enter Location\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Description\"/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Experience;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Volunteer.js",["296","297","298","299"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Volunteer=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  volunteer:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   volunteer:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"volunteer\">\r\n        <h2>Volunteer Experience</h2>\r\n        <Label value=\"Volunteer Experience\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"volunteer\"\r\n        label=\"volunteer\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Skills\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Volunteer;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Other.js",["300","301","302","303"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Other=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  Other:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   Other:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"Other\">\r\n        <h2>Other</h2>\r\n        <Label value=\"Other\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"Other\"\r\n        label=\"Other\"\r\n        value={inputField.Other}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Other\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n      \r\n\r\n      );}\r\n\r\n      export default Other;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Input.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Label.js",[],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Skills.js",["304","305","306","307"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Skills=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  skills:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   skills:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"skills edu\">\r\n        <h2 >Skills</h2>\r\n        <Label value=\"Skills\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"skills\"\r\n        label=\"skills\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Skills\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Skills;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\components\\student-profile\\Achievments.js",["308","309","310","311"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Achievments=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  skills:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   skills:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"skills\">\r\n        <h2>Achievments</h2>\r\n        <Label value=\"Achievments\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"achievments\"\r\n        label=\"achievments\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your achievments\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Achievments;","D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\InternshipCard\\InternshipCard.js",["312"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\JobsCard\\JobsCard.js",["313"],"D:\\Coding\\OPENSOURCE\\easy-job-intern-1\\src\\utils\\UI\\FresherJobCard\\FresherJobCard.js",["314"],{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","severity":1,"message":"320","line":48,"column":10,"nodeType":"321","messageId":"322","endLine":48,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":84,"column":10,"nodeType":"321","messageId":"322","endLine":84,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":49,"column":10,"nodeType":"321","messageId":"322","endLine":49,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":114,"column":10,"nodeType":"321","messageId":"322","endLine":114,"endColumn":21},{"ruleId":"319","severity":1,"message":"323","line":3,"column":11,"nodeType":"321","messageId":"322","endLine":3,"endColumn":19},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"326","line":6,"column":8,"nodeType":"321","messageId":"322","endLine":6,"endColumn":18},{"ruleId":"319","severity":1,"message":"327","line":7,"column":8,"nodeType":"321","messageId":"322","endLine":7,"endColumn":18},{"ruleId":"319","severity":1,"message":"328","line":8,"column":8,"nodeType":"321","messageId":"322","endLine":8,"endColumn":15},{"ruleId":"319","severity":1,"message":"329","line":9,"column":8,"nodeType":"321","messageId":"322","endLine":9,"endColumn":13},{"ruleId":"319","severity":1,"message":"330","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":3,"column":10,"nodeType":"321","messageId":"322","endLine":3,"endColumn":14},{"ruleId":"319","severity":1,"message":"332","line":13,"column":18,"nodeType":"321","messageId":"322","endLine":13,"endColumn":26},{"ruleId":"333","severity":1,"message":"334","line":46,"column":6,"nodeType":"335","endLine":46,"endColumn":8,"suggestions":"336"},{"ruleId":"319","severity":1,"message":"332","line":11,"column":18,"nodeType":"321","messageId":"322","endLine":11,"endColumn":26},{"ruleId":"333","severity":1,"message":"337","line":69,"column":6,"nodeType":"335","endLine":69,"endColumn":8,"suggestions":"338"},{"ruleId":"319","severity":1,"message":"332","line":11,"column":18,"nodeType":"321","messageId":"322","endLine":11,"endColumn":26},{"ruleId":"333","severity":1,"message":"337","line":69,"column":6,"nodeType":"335","endLine":69,"endColumn":8,"suggestions":"339"},{"ruleId":"319","severity":1,"message":"332","line":12,"column":18,"nodeType":"321","messageId":"322","endLine":12,"endColumn":26},{"ruleId":"333","severity":1,"message":"340","line":45,"column":6,"nodeType":"335","endLine":45,"endColumn":8,"suggestions":"341"},{"ruleId":"319","severity":1,"message":"342","line":49,"column":11,"nodeType":"321","messageId":"322","endLine":49,"endColumn":12},{"ruleId":"319","severity":1,"message":"343","line":4,"column":3,"nodeType":"321","messageId":"322","endLine":4,"endColumn":7},{"ruleId":"319","severity":1,"message":"344","line":6,"column":3,"nodeType":"321","messageId":"322","endLine":6,"endColumn":11},{"ruleId":"319","severity":1,"message":"345","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":12},{"ruleId":"319","severity":1,"message":"346","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":16},{"ruleId":"319","severity":1,"message":"325","line":15,"column":13,"nodeType":"321","messageId":"322","endLine":15,"endColumn":17},{"ruleId":"319","severity":1,"message":"332","line":21,"column":18,"nodeType":"321","messageId":"322","endLine":21,"endColumn":26},{"ruleId":"319","severity":1,"message":"332","line":12,"column":18,"nodeType":"321","messageId":"322","endLine":12,"endColumn":26},{"ruleId":"319","severity":1,"message":"331","line":3,"column":10,"nodeType":"321","messageId":"322","endLine":3,"endColumn":14},{"ruleId":"319","severity":1,"message":"332","line":13,"column":18,"nodeType":"321","messageId":"322","endLine":13,"endColumn":26},{"ruleId":"333","severity":1,"message":"347","line":46,"column":6,"nodeType":"335","endLine":46,"endColumn":8,"suggestions":"348"},{"ruleId":"319","severity":1,"message":"332","line":12,"column":18,"nodeType":"321","messageId":"322","endLine":12,"endColumn":26},{"ruleId":"333","severity":1,"message":"340","line":45,"column":6,"nodeType":"335","endLine":45,"endColumn":8,"suggestions":"349"},{"ruleId":"319","severity":1,"message":"342","line":52,"column":11,"nodeType":"321","messageId":"322","endLine":52,"endColumn":12},{"ruleId":"319","severity":1,"message":"332","line":12,"column":18,"nodeType":"321","messageId":"322","endLine":12,"endColumn":26},{"ruleId":"333","severity":1,"message":"340","line":45,"column":6,"nodeType":"335","endLine":45,"endColumn":8,"suggestions":"350"},{"ruleId":"319","severity":1,"message":"342","line":52,"column":11,"nodeType":"321","messageId":"322","endLine":52,"endColumn":12},{"ruleId":"319","severity":1,"message":"331","line":3,"column":10,"nodeType":"321","messageId":"322","endLine":3,"endColumn":14},{"ruleId":"319","severity":1,"message":"332","line":13,"column":18,"nodeType":"321","messageId":"322","endLine":13,"endColumn":26},{"ruleId":"333","severity":1,"message":"351","line":46,"column":6,"nodeType":"335","endLine":46,"endColumn":8,"suggestions":"352"},{"ruleId":"319","severity":1,"message":"332","line":11,"column":18,"nodeType":"321","messageId":"322","endLine":11,"endColumn":26},{"ruleId":"333","severity":1,"message":"337","line":69,"column":6,"nodeType":"335","endLine":69,"endColumn":8,"suggestions":"353"},{"ruleId":"319","severity":1,"message":"320","line":98,"column":10,"nodeType":"321","messageId":"322","endLine":98,"endColumn":21},{"ruleId":"333","severity":1,"message":"354","line":182,"column":6,"nodeType":"335","endLine":182,"endColumn":8,"suggestions":"355"},{"ruleId":"319","severity":1,"message":"320","line":98,"column":10,"nodeType":"321","messageId":"322","endLine":98,"endColumn":21},{"ruleId":"333","severity":1,"message":"356","line":124,"column":6,"nodeType":"335","endLine":124,"endColumn":8,"suggestions":"357"},{"ruleId":"319","severity":1,"message":"332","line":17,"column":18,"nodeType":"321","messageId":"322","endLine":17,"endColumn":26},{"ruleId":"319","severity":1,"message":"320","line":98,"column":10,"nodeType":"321","messageId":"322","endLine":98,"endColumn":21},{"ruleId":"333","severity":1,"message":"356","line":124,"column":6,"nodeType":"335","endLine":124,"endColumn":8,"suggestions":"358"},{"ruleId":"319","severity":1,"message":"332","line":15,"column":18,"nodeType":"321","messageId":"322","endLine":15,"endColumn":26},{"ruleId":"333","severity":1,"message":"340","line":46,"column":6,"nodeType":"335","endLine":46,"endColumn":8,"suggestions":"359"},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"329","line":9,"column":8,"nodeType":"321","messageId":"322","endLine":9,"endColumn":13},{"ruleId":"319","severity":1,"message":"360","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":14},{"ruleId":"319","severity":1,"message":"330","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":13},{"ruleId":"319","severity":1,"message":"361","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":17},{"ruleId":"319","severity":1,"message":"362","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":17},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":8,"column":8,"nodeType":"321","messageId":"322","endLine":8,"endColumn":12},{"ruleId":"319","severity":1,"message":"362","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":17},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":8,"column":8,"nodeType":"321","messageId":"322","endLine":8,"endColumn":12},{"ruleId":"319","severity":1,"message":"362","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":17},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":8,"column":8,"nodeType":"321","messageId":"322","endLine":8,"endColumn":12},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"330","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":13},{"ruleId":"319","severity":1,"message":"363","line":20,"column":13,"nodeType":"321","messageId":"322","endLine":20,"endColumn":25},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"330","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":13},{"ruleId":"319","severity":1,"message":"363","line":20,"column":13,"nodeType":"321","messageId":"322","endLine":20,"endColumn":25},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"330","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":13},{"ruleId":"319","severity":1,"message":"363","line":20,"column":13,"nodeType":"321","messageId":"322","endLine":20,"endColumn":25},{"ruleId":"319","severity":1,"message":"324","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"330","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":13},{"ruleId":"319","severity":1,"message":"363","line":20,"column":13,"nodeType":"321","messageId":"322","endLine":20,"endColumn":25},{"ruleId":"364","severity":1,"message":"365","line":130,"column":11,"nodeType":"366","endLine":130,"endColumn":50},{"ruleId":"364","severity":1,"message":"365","line":125,"column":11,"nodeType":"366","endLine":125,"endColumn":50},{"ruleId":"364","severity":1,"message":"365","line":117,"column":11,"nodeType":"366","endLine":117,"endColumn":50},"no-native-reassign",["367"],"no-negated-in-lhs",["368"],"no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'internships' and 'stream'. Either include them or remove the dependency array.","ArrayExpression",["369"],"React Hook useEffect has a missing dependency: 'jobs'. Either include it or remove the dependency array.",["370"],["371"],"React Hook useEffect has a missing dependency: 'internships'. Either include it or remove the dependency array.",["372"],"'t' is assigned a value but never used.","'Card' is defined but never used.","'Dropdown' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","React Hook useEffect has missing dependencies: 'internships' and 'location'. Either include them or remove the dependency array.",["373"],["374"],["375"],"React Hook useEffect has missing dependencies: 'industry' and 'internships'. Either include them or remove the dependency array.",["376"],["377"],"React Hook useEffect has missing dependencies: 'internship' and 'postId'. Either include them or remove the dependency array.",["378"],"React Hook useEffect has missing dependencies: 'job' and 'postId'. Either include them or remove the dependency array.",["379"],["380"],["381"],"'Skills' is defined but never used.","'Container' is defined but never used.","'TextField' is defined but never used.","'handleSubmit' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"384","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"387","fix":"391"},{"desc":"387","fix":"392"},{"desc":"393","fix":"394"},{"desc":"384","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"398","fix":"400"},{"desc":"387","fix":"401"},"Update the dependencies array to be: [internships, stream]",{"range":"402","text":"403"},"Update the dependencies array to be: [jobs]",{"range":"404","text":"405"},{"range":"406","text":"405"},"Update the dependencies array to be: [internships]",{"range":"407","text":"408"},"Update the dependencies array to be: [internships, location]",{"range":"409","text":"410"},{"range":"411","text":"408"},{"range":"412","text":"408"},"Update the dependencies array to be: [industry, internships]",{"range":"413","text":"414"},{"range":"415","text":"405"},"Update the dependencies array to be: [internship, postId]",{"range":"416","text":"417"},"Update the dependencies array to be: [job, postId]",{"range":"418","text":"419"},{"range":"420","text":"419"},{"range":"421","text":"408"},[1468,1470],"[internships, stream]",[2079,2081],"[jobs]",[2075,2077],[1446,1448],"[internships]",[1476,1478],"[internships, location]",[1446,1448],[1442,1444],[1476,1478],"[industry, internships]",[2061,2063],[5514,5516],"[internship, postId]",[2938,2940],"[job, postId]",[2953,2955],[1372,1374]]