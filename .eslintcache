[{"D:\\girlscript\\easy-job-intern\\src\\index.js":"1","D:\\girlscript\\easy-job-intern\\src\\reportWebVitals.js":"2","D:\\girlscript\\easy-job-intern\\src\\App.js":"3","D:\\girlscript\\easy-job-intern\\src\\reducers\\userReducer.js":"4","D:\\girlscript\\easy-job-intern\\src\\components\\navbar\\navbar.js":"5","D:\\girlscript\\easy-job-intern\\src\\components\\contact-us\\contact-us.js":"6","D:\\girlscript\\easy-job-intern\\src\\components\\home\\home.js":"7","D:\\girlscript\\easy-job-intern\\src\\components\\student\\register.js":"8","D:\\girlscript\\easy-job-intern\\src\\components\\terms-condition\\terms-condition.js":"9","D:\\girlscript\\easy-job-intern\\src\\components\\footer\\footer.js":"10","D:\\girlscript\\easy-job-intern\\src\\components\\privacy-policy\\privacy-policy.js":"11","D:\\girlscript\\easy-job-intern\\src\\components\\Error\\Error.js":"12","D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreateJob.js":"13","D:\\girlscript\\easy-job-intern\\src\\components\\about-us\\about-us.js":"14","D:\\girlscript\\easy-job-intern\\src\\components\\student\\login.js":"15","D:\\girlscript\\easy-job-intern\\src\\components\\employer\\employerSignin.js":"16","D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreatFreshersJob.js":"17","D:\\girlscript\\easy-job-intern\\src\\components\\employer\\employerSignup.js":"18","D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreateInternship.js":"19","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\AllInternships.js":"20","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByLoction.js":"21","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Profile.js":"22","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByStream.js":"23","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipGroupedByStream.js":"24","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByLocation.js":"25","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByIndustry.js":"26","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByLocation.js":"27","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByIndustry.js":"28","D:\\girlscript\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js":"29","D:\\girlscript\\easy-job-intern\\src\\components\\FreshersJob\\AllFresherJob.js":"30","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\AllJobs.js":"31","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByIndustry.js":"32","D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\InternshipUpdate.js":"33","D:\\girlscript\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignup.js":"34","D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\JobUpdate.js":"35","D:\\girlscript\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js":"36","D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\FresherJobUpdate.js":"37","D:\\girlscript\\easy-job-intern\\src\\utils\\checkValidation.js":"38","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Start.js":"39","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Project.js":"40","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Experience.js":"41","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Education.js":"42","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Other.js":"43","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Volunteer.js":"44","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Achievments.js":"45","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Input.js":"46","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Skills.js":"47","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Label.js":"48","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByStream.js":"49"},{"size":517,"mtime":1621942901621,"results":"50","hashOfConfig":"51"},{"size":375,"mtime":1621942901622,"results":"52","hashOfConfig":"51"},{"size":10137,"mtime":1622044104710,"results":"53","hashOfConfig":"51"},{"size":212,"mtime":1621942901622,"results":"54","hashOfConfig":"51"},{"size":7255,"mtime":1622052800332,"results":"55","hashOfConfig":"51"},{"size":6937,"mtime":1621942901596,"results":"56","hashOfConfig":"51"},{"size":10873,"mtime":1621965472207,"results":"57","hashOfConfig":"51"},{"size":17613,"mtime":1621942901617,"results":"58","hashOfConfig":"51"},{"size":2196,"mtime":1621942901618,"results":"59","hashOfConfig":"51"},{"size":7852,"mtime":1621942901600,"results":"60","hashOfConfig":"51"},{"size":1754,"mtime":1621942901605,"results":"61","hashOfConfig":"51"},{"size":602,"mtime":1621942901576,"results":"62","hashOfConfig":"51"},{"size":15266,"mtime":1621942901574,"results":"63","hashOfConfig":"51"},{"size":4007,"mtime":1621942901594,"results":"64","hashOfConfig":"51"},{"size":8399,"mtime":1621942901615,"results":"65","hashOfConfig":"51"},{"size":8548,"mtime":1621942901598,"results":"66","hashOfConfig":"51"},{"size":14311,"mtime":1621942901572,"results":"67","hashOfConfig":"51"},{"size":14275,"mtime":1621942901598,"results":"68","hashOfConfig":"51"},{"size":16211,"mtime":1621942901573,"results":"69","hashOfConfig":"51"},{"size":8151,"mtime":1621942901581,"results":"70","hashOfConfig":"51"},{"size":9279,"mtime":1621942901587,"results":"71","hashOfConfig":"51"},{"size":1272,"mtime":1621942901610,"results":"72","hashOfConfig":"51"},{"size":8392,"mtime":1621942901584,"results":"73","hashOfConfig":"51"},{"size":9273,"mtime":1621942901585,"results":"74","hashOfConfig":"51"},{"size":8402,"mtime":1621942901583,"results":"75","hashOfConfig":"51"},{"size":8402,"mtime":1621942901582,"results":"76","hashOfConfig":"51"},{"size":9220,"mtime":1621948254549,"results":"77","hashOfConfig":"51"},{"size":9127,"mtime":1621942901589,"results":"78","hashOfConfig":"51"},{"size":8386,"mtime":1621942901579,"results":"79","hashOfConfig":"51"},{"size":7574,"mtime":1621942901578,"results":"80","hashOfConfig":"51"},{"size":8475,"mtime":1621942901589,"results":"81","hashOfConfig":"51"},{"size":9326,"mtime":1621942901586,"results":"82","hashOfConfig":"51"},{"size":17448,"mtime":1621942901591,"results":"83","hashOfConfig":"51"},{"size":840,"mtime":1621942901619,"results":"84","hashOfConfig":"51"},{"size":13806,"mtime":1621942901592,"results":"85","hashOfConfig":"51"},{"size":863,"mtime":1621942901620,"results":"86","hashOfConfig":"51"},{"size":12934,"mtime":1621942901591,"results":"87","hashOfConfig":"51"},{"size":1874,"mtime":1621942901624,"results":"88","hashOfConfig":"51"},{"size":3422,"mtime":1621942901613,"results":"89","hashOfConfig":"51"},{"size":3849,"mtime":1621942901611,"results":"90","hashOfConfig":"51"},{"size":4243,"mtime":1621942901607,"results":"91","hashOfConfig":"51"},{"size":4543,"mtime":1621942901607,"results":"92","hashOfConfig":"51"},{"size":2055,"mtime":1621942901609,"results":"93","hashOfConfig":"51"},{"size":2107,"mtime":1621942901613,"results":"94","hashOfConfig":"51"},{"size":2093,"mtime":1621942901606,"results":"95","hashOfConfig":"51"},{"size":182,"mtime":1621942901608,"results":"96","hashOfConfig":"51"},{"size":2063,"mtime":1621942901612,"results":"97","hashOfConfig":"51"},{"size":205,"mtime":1621942901608,"results":"98","hashOfConfig":"51"},{"size":9214,"mtime":1622044104711,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1dh6722",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"102"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"102"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"102"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"102"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"102"},"D:\\girlscript\\easy-job-intern\\src\\index.js",[],["228","229"],"D:\\girlscript\\easy-job-intern\\src\\reportWebVitals.js",[],"D:\\girlscript\\easy-job-intern\\src\\App.js",[],"D:\\girlscript\\easy-job-intern\\src\\reducers\\userReducer.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\navbar\\navbar.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\contact-us\\contact-us.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\home\\home.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\student\\register.js",["230"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Card, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst StudentSignup = () => {\r\n  const history = useHistory();\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    personName: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    degree: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    institutionName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    branch: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    year: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false); //boolean to check that the whole form is valid or not\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      personName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      contact,\r\n      branch,\r\n      year,\r\n      degree,\r\n      institutionName,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/student/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          branch: branch.value,\r\n          year: year.value,\r\n          degree: degree.value,\r\n          institutionName: institutionName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.pushState(\"/student-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => { // to handle visibility of passsword \r\n    \r\n      setFormValues({...formValues, showPassword: !(formValues.showPassword)});\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the student */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Email address */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*  Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.password.valid && formValues.password.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type={formValues.showPassword?\"text\":\"password\"}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  value={formValues.password.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.password.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.password.errorMessage}\r\n                  </span>\r\n                )}\r\n                <InputGroup.Append>\r\n                      <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                        <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                        >\r\n                          {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton> \r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Confirm Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                      <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton> \r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Contact Number */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Degree */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which degree you are pursuing?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.degree.valid && formValues.degree.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter complete name of your degree\"\r\n                  name=\"degree\"\r\n                  value={formValues.degree.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.degree.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.degree.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* College Name */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicName\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  College Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.institutionName.valid &&\r\n                    formValues.institutionName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Your college name\"\r\n                  name=\"institutionName\"\r\n                  value={formValues.institutionName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.institutionName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.institutionName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Branch of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Field of study\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.branch.valid && formValues.branch.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your field of study\"\r\n                  name=\"branch\"\r\n                  value={formValues.branch.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.branch.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.branch.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Year of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which year of college you are in?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.year.valid && formValues.year.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your college year\"\r\n                  name=\"year\"\r\n                  value={formValues.year.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.year.errorMessage && (\r\n                  <span className=\"error\">{formValues.year.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Already a user? */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/student-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default StudentSignup;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\terms-condition\\terms-condition.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\footer\\footer.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\privacy-policy\\privacy-policy.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\Error\\Error.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreateJob.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\about-us\\about-us.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\student\\login.js",["231"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction LoginForm() {\r\n  const { dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/student/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"student\"));\r\n          dispatch({ type: \"USER\", payload: { user: res.data.user , userType: \"student\"} });\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          const notify = () => toast(\"Signin Successfull\");\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  fontSize: \"1.5vh\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <Link to=\"/student-signup\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Don't have an account? Sign up\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default LoginForm;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\employer\\employerSignin.js",["232"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form,  InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction EmployerSignin() {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/employer/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          // toast(res.data.error);\r\n          console.log(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"employee\"))\r\n          dispatch({ type: \"USER\", payload: {user: res.data.user , userType: \"employee\"} });\r\n          console.log(state);\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          // toast(\"Signin Successfull\");\r\n          const notify = () => toast('Signin Successfull');\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <Form.Group\r\n                  style={{\r\n                    textAlign: \"left\",\r\n                    fontSize: \"1.5vh\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <Link to=\"/employer-signup\">\r\n                    <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                      Don't have an account? Sign up\r\n                    </a>\r\n                  </Link>\r\n                </Form.Group>\r\n              </Form.Group>\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployerSignin;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreatFreshersJob.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\employer\\employerSignup.js",["233"],"import React, { useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst EmployerSignup = () => {\r\n  const history = useHistory();\r\n  //listing initial states of the fields present in the form\r\n  const initialState = {\r\n    companyName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 3,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    personName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      companyName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      personName,\r\n      contact,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/employer/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          companyName: companyName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.push(\"/employer-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => {\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the company */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Company Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.companyName.valid &&\r\n                    formValues.companyName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter the company name\"\r\n                  name=\"companyName\"\r\n                  value={formValues.companyName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.companyName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.companyName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*Email  */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Password Confirmation */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Person Name */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* contact */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              {/* For Existing user */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/employer-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployerSignup;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\CreateNew\\CreateInternship.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\AllInternships.js",["234","235","236","237","238","239","240"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,Spinner,Alert\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst AllInternships = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/all-internships\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [internships]);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert variant=\"danger\" className=\"w-100 \" style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {internship.companyName}{\" \"}\r\n                      {state &&\r\n                        internship.createdBy &&\r\n                        state.user._id == internship.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-internship/${internship._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(internship._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {internship.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {internship.industry} {internship.industry && internship.stream && \",\"} {internship.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {internship.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Stipend: {internship.stipend}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Duration: {GettingDuration(internship.duration)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(internship.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        End Date: {GettingMonth(internship.endDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {internship.techstack &&\r\n                        internship.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default AllInternships;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByLoction.js",["241","242","243","244","245","246","247","248","249"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsGroupedByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/location`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n//   console.log(internships);\r\n  console.log(internships[0]);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    // console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                        {/* {internship.companyName} */}\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {internship.companyName}{\" \"}\r\n                            {state &&\r\n                              internship.createdBy &&\r\n                              state.user._id == internship.createdBy._id && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-internship/${internship._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(internship._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {internship.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {internship.industry}{\" \"}\r\n                            {internship.industry && internship.stream && \",\"}{\" \"}\r\n                            {internship.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {internship.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Stipend: {internship.stipend}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Duration: {GettingDuration(internship.duration)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(internship.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              End Date: {GettingMonth(internship.endDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply:{\" \"}\r\n                              {GettingDate(internship.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {internship.techstack &&\r\n                              internship.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByLocation;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Profile.js",["250","251","252","253","254","255","256","257"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Skills from \"./Skills\"\r\nimport Input from \"./Input\";\r\nimport Achievments from \"./Achievments\";\r\nimport Volunteer from \"./Volunteer\";\r\nimport Other from \"./Other\";\r\nimport Project from \"./Project\";\r\nimport Experience from \"./Experience\";\r\nimport Education from \"./Education\";\r\nimport Start from \"./Start\";\r\n\r\nconst Profile=()=>\r\n{\r\n  \r\n\r\n   return(\r\n        <>\r\n        <h1 className=\"heading\">Student Profile Builder</h1>\r\n        <h6>Please Enter the details below to complete your student profile:-</h6>\r\n        <div className=\"main-box\">\r\n\r\n            <Start/>        \r\n            <Education/>\r\n            <Experience/>\r\n            <Project/>\r\n             <Skills/>\r\n             <Achievments/>\r\n             <Volunteer/>\r\n             <Other/>\r\n             \r\n\r\n\r\n          \r\n\r\n \r\n        </div>\r\n        <br/>\r\n\r\n        \r\n        </>\r\n   );\r\n    \r\n}\r\n\r\n\r\nexport default Profile;\r\n\r\n\r\n\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByStream.js",["258","259","260","261","262","263","264"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { stream } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/stream-internship/${stream}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [internships]);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {internship.companyName}{\" \"}\r\n                      {state &&\r\n                        internship.createdBy &&\r\n                        state.user._id == internship.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-internship/${internship._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(internship._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {internship.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {internship.industry}{\" \"}\r\n                      {internship.industry && internship.stream && \",\"}{\" \"}\r\n                      {internship.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {internship.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Stipend: {internship.stipend}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Duration: {GettingDuration(internship.duration)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(internship.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        End Date: {GettingMonth(internship.endDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {internship.techstack &&\r\n                        internship.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByStream;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipGroupedByStream.js",["265","266","267","268","269","270","271","272","273"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsGroupedByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/stream`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n//   console.log(internships);\r\n  console.log(internships[0]);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    // console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                        {/* {internship.companyName} */}\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {internship.companyName}{\" \"}\r\n                            {state &&\r\n                              internship.createdBy &&\r\n                              state.user._id == internship.createdBy._id && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-internship/${internship._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(internship._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {internship.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {internship.industry}{\" \"}\r\n                            {internship.industry && internship.stream && \",\"}{\" \"}\r\n                            {internship.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {internship.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Stipend: {internship.stipend}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Duration: {GettingDuration(internship.duration)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(internship.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              End Date: {GettingMonth(internship.endDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply:{\" \"}\r\n                              {GettingDate(internship.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {internship.techstack &&\r\n                              internship.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByStream;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByLocation.js",["274","275","276","277","278","279","280"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { location } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/location-internship/${location}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [internships]);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {internship.companyName}{\" \"}\r\n                      {state &&\r\n                        internship.createdBy &&\r\n                        state.user._id == internship.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-internship/${internship._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(internship._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {internship.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {internship.industry}{\" \"}\r\n                      {internship.industry && internship.stream && \",\"}{\" \"}\r\n                      {internship.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {internship.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Stipend: {internship.stipend}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Duration: {GettingDuration(internship.duration)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(internship.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        End Date: {GettingMonth(internship.endDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {internship.techstack &&\r\n                        internship.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByLocation;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipByIndustry.js",["281","282","283","284","285","286","287"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { industry } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/industry-internship/${industry}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [internships]);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {internship.companyName}{\" \"}\r\n                      {state &&\r\n                        internship.createdBy &&\r\n                        state.user._id == internship.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-internship/${internship._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(internship._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {internship.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {internship.industry}{\" \"}\r\n                      {internship.industry && internship.stream && \",\"}{\" \"}\r\n                      {internship.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {internship.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Stipend: {internship.stipend}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Duration: {GettingDuration(internship.duration)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(internship.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        End Date: {GettingMonth(internship.endDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {internship.techstack &&\r\n                        internship.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByIndustry;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByLocation.js",["288","289","290","291"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n\r\nconst JobsGroupedByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/location\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.jobs);\r\n\r\n          setJobs(res.data.jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.jobs &&\r\n                intern.jobs.map((job) => {\r\n                  // console.log(job.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {job.companyName} */}\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {job.companyName}{\" \"}\r\n                            {state &&\r\n                              job.createdBy &&\r\n                              state.user._id == job.createdBy._id && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-job/${job._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(job._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {job.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {job.industry} {job.industry && job.stream && \",\"}{\" \"}\r\n                            {job.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {job.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Salary: {job.salary}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Work Experience: {job.experience && \"Atleast\"}{\" \"}\r\n                              {job.experience} {job.experience === 1 && \"year\"}{\" \"}\r\n                              {job.experience > 1 && \"years\"}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(job.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply: {GettingDate(job.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {job.techstack &&\r\n                              job.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByLocation;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByIndustry.js",["292","293"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n\r\nconst JobsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/industry\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          // console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        // console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          \r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((catejob) => (\r\n          <div key={catejob._id}>\r\n            <h1 className=\"parameter\">{catejob._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catejob.jobs &&\r\n                catejob.jobs.map((job) => {\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {job.companyName}{\" \"}\r\n                            {state &&\r\n                              job.createdBy &&\r\n                              state.user._id == job.createdBy && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-job/${job._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(job._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {job.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {job.industry} {job.industry && job.stream && \",\"}{\" \"}\r\n                            {job.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {job.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Salary: {job.salary}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Work Experience: {job.experience && \"Atleast\"}{\" \"}\r\n                              {job.experience} {job.experience === 1 && \"year\"}{\" \"}\r\n                              {job.experience > 1 && \"years\"}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(job.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply: {GettingDate(job.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {job.techstack &&\r\n                              job.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByIndustry;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js",["294","295","296"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst FresherJobsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/freshersjob/industry\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.freshersjobs);\r\n          console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Fresher Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        freshersJobs &&\r\n        freshersJobs.map((catefresher) => (\r\n          <div key={catefresher._id}>\r\n            <h1 className=\"parameter\">{catefresher._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catefresher.freshersjobs &&\r\n                catefresher.freshersjobs.map((fresher) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={fresher._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {fresher.companyName}\r\n                            {state &&\r\n                              fresher.createdBy &&\r\n                              state.user._id == fresher.createdBy && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-fresher/${fresher._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(fresher._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {fresher.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {fresher.industry}{\" \"}\r\n                            {fresher.industry && fresher.stream && \",\"}{\" \"}\r\n                            {fresher.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {fresher.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Salary: {fresher.salary}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(fresher.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply:{\" \"}\r\n                              {GettingDate(fresher.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {fresher.techstack &&\r\n                              fresher.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default FresherJobsGroupedByIndustry;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\FreshersJob\\AllFresherJob.js",["297","298"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst AllFreshersJobs = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/all-freshersjobs\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.freshersjobs);\r\n          console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [freshersJobs]);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100\"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No Fresher Jobs available right now\r\n          </Alert>\r\n        ) : (\r\n          freshersJobs &&\r\n          freshersJobs.map((fresher) => {\r\n            return (\r\n              <Col\r\n                key={fresher._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {fresher.companyName}\r\n                      {state &&\r\n                        fresher.createdBy &&\r\n                        state.user._id == fresher.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-fresher/${fresher._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(fresher._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {fresher.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {fresher.industry}{\" \"}\r\n                      {fresher.industry && fresher.stream && \",\"}{\" \"}\r\n                      {fresher.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {fresher.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Salary: {fresher.salary}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(fresher.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(fresher.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {fresher.techstack &&\r\n                        fresher.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default AllFreshersJobs;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\AllJobs.js",["299","300","301"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n\r\nconst AllJobs = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/all-jobs\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.jobs);\r\n\r\n          setJobs(res.data.jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [jobs]);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : jobs && !jobs.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100\"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No Jobs available right now\r\n          </Alert>\r\n        ) : (\r\n          jobs &&\r\n          jobs.map((job) => {\r\n            return (\r\n              <Col\r\n                key={job._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <Card className=\"cardPost\">\r\n                  <Card.Body>\r\n                    <Card.Title className=\"titleOfPost\">\r\n                      {job.companyName}{\" \"}\r\n                      {state &&\r\n                        job.createdBy &&\r\n                        state.user._id == job.createdBy._id && (\r\n                          <Dropdown className=\"postOptions\">\r\n                            <Dropdown.Toggle\r\n                              className=\"postOptionsBtn\"\r\n                              variant=\"success\"\r\n                              id=\"dropdown-basic\"\r\n                            >\r\n                              <Icon.ThreeDotsVertical\r\n                                style={{ fontSize: \"1.4rem\" }}\r\n                              />\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"optionMenu\">\r\n                              <Dropdown.Item\r\n                                className=\"optionItem\"\r\n                                href={`/update-job/${job._id}`}\r\n                              >\r\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => deletePost(job._id)}\r\n                                className=\"optionItem\"\r\n                              >\r\n                                <Icon.Trash className=\"optionsMenuIcon\" />\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        )}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"subtitleOfPost\">\r\n                      {job.location}\r\n                    </Card.Subtitle>\r\n                    <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                      {job.industry}{\" \"}\r\n                      {job.industry && job.stream && \",\"}{\" \"}\r\n                      {job.stream}\r\n                    </Card.Subtitle>\r\n                    <Card.Text className=\"textPost\">\r\n                      {job.description}\r\n                    </Card.Text>\r\n                    <ListGroup>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Salary: {job.salary}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Work Experience: {job.experience && \"Atleast\"}{\" \"}\r\n                        {job.experience} {job.experience === 1 && \"year\"}{\" \"}\r\n                        {job.experience > 1 && \"years\"}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost\">\r\n                        Start Date: {GettingMonth(job.startDate)}\r\n                      </ListGroupItem>\r\n                      <ListGroupItem className=\"itemPost last\">\r\n                        Last Date to Apply: {GettingDate(job.lastDate)}\r\n                      </ListGroupItem>\r\n                    </ListGroup>\r\n                    <div className=\"tech\">\r\n                      {job.techstack &&\r\n                        job.techstack.map((skill, i) => (\r\n                          <Card.Link key={i} className=\"TechStack\">\r\n                            {skill}\r\n                          </Card.Link>\r\n                        ))}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default AllJobs;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByIndustry.js",["302","303","304","305","306","307","308","309","310"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst InternshipsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/industry`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  //   console.log(internships);\r\n  console.log(internships[0]);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const GettingDuration = (time) => {\r\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\r\n    // console.log(t);\r\n    return t > 1 ? t + \" Months\" : t + \" Month\";\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.internships);\r\n          // setInternships(res.data.internships);\r\n          // console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          window.location.reload(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {internship.companyName} */}\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {internship.companyName}{\" \"}\r\n                            {state &&\r\n                              internship.createdBy &&\r\n                              state.user._id == internship.createdBy && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-internship/${internship._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(internship._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {internship.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {internship.industry}{\" \"}\r\n                            {internship.industry && internship.stream && \",\"}{\" \"}\r\n                            {internship.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {internship.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Stipend: {internship.stipend}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Duration: {GettingDuration(internship.duration)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(internship.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              End Date: {GettingMonth(internship.endDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply:{\" \"}\r\n                              {GettingDate(internship.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {internship.techstack &&\r\n                              internship.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByIndustry;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\InternshipUpdate.js",["311","312"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateInternship = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [internship, setInternship] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stipend: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    endDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  // const setInitialValue = () => {\r\n  // const updatedFormElementD = { ...updatedFormValues[\"description\"] };\r\n  // const updatedFormElementL = { ...updatedFormValues[\"location\"] };\r\n  // const updatedFormElementS = { ...updatedFormValues[\"stipend\"] };\r\n  // const updatedFormElementTS = { ...updatedFormValues[\"techstack\"] };\r\n  // const updatedFormElementLD = { ...updatedFormValues[\"lastDate\"] };\r\n  // const updatedFormElementSD = { ...updatedFormValues[\"startDate\"] };\r\n  // const updatedFormElementED = { ...updatedFormValues[\"endDate\"] };\r\n  // updatedFormElementD.value =nullnternship.description;\r\n  // updatedFormElementL.value = internship.location;\r\n  // updatedFormElementS.value = internship.stipend;\r\n  // updatedFormElementTS.value = internship.techstack;\r\n  // updatedFormElementLD.value = internship.lastDate;\r\n  // updatedFormElementSD.value = internship.startDate;\r\n  // updatedFormElementED.value = internship.endDate;\r\n  // updatedFormValues[\"description\"] = updatedFormElementD;\r\n  // updatedFormValues[\"location\"] = updatedFormElementL;\r\n  // updatedFormValues[\"stipend\"] = updatedFormElementS;\r\n  // updatedFormValues[\"techstack\"] = updatedFormElementTS;\r\n  // updatedFormValues[\"lastDate\"] = updatedFormElementLD;\r\n  // updatedFormValues[\"startDate\"] = updatedFormElementSD;\r\n  // updatedFormValues[\"endDate\"] = updatedFormElementED;\r\n  // };\r\n  // useEffect(() => {\r\n  //   if (internship) {\r\n  //     setInitialState((prev) => {\r\n  //       return {\r\n  //         ...prev,\r\n  //         description: {\r\n  //           ...prev.description,\r\n  //           value: internship.description,\r\n  //         },\r\n  //         location: {\r\n  //           ...prev.location,\r\n  //           value: internship.location,\r\n  //         },\r\n  //         stipend: {\r\n  //           ...prev.stipend,\r\n  //           value: internship.stipend,\r\n  //         },\r\n  //       };\r\n  //     });\r\n\r\n  //     setFormValues(initialState);\r\n  //   }\r\n  // }, [internship]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-internship/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internship);\r\n          setInternship(res.data.internship);\r\n          console.log(internship);\r\n          // if (internship) {\r\n          // console.log(res.data.internship.description);\r\n          // setInitialValue();\r\n          // setInitialValue(\"description\", res.data.internship.description);\r\n          // setInitialValue(\"location\", res.data.internship.location);\r\n          // setInitialValue(\"stipend\", res.data.internship.stipend);\r\n          // setInitialValue(\"lastDate\", new Date(res.data.internship.lastDate));\r\n          // setInitialValue(\"startDate\", new Date(res.data.internship.startDate));\r\n          // setInitialValue(\"endDate\", res.data.internship.endDate);\r\n          // setInitialValue(\"techstack\", res.data.internship.techstack);\r\n          // }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n    console.log(typeof formValues.startDate.value);\r\n    const duration =\r\n      new Date(formValues.endDate.value) - new Date(formValues.startDate.value);\r\n    console.log(duration);\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      stipend,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      endDate,\r\n      industry,\r\n      stream\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-internship\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        stipend: stipend.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        endDate: endDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n        duration: duration,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {internship && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Internship\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || internship.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || internship.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"exampleForm.ControlSelect1\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || internship.industry}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Industry</option>\r\n                  <option value=\"IT\">IT</option>\r\n                  <option value=\"Marketing\">Marketing</option>\r\n                  <option value=\"Design\">Design</option>\r\n                  <option value=\"MBA\">MBA</option>\r\n                  <option value=\"Engineering\">Engineering</option>\r\n                  <option value=\"Media\">Media</option>\r\n                  <option value=\"Teaching\">Teaching</option>\r\n                  <option value=\"Finance\">Finance</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || internship.stream}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Stream</option>\r\n                  <option value=\"Management\">Management</option>\r\n                  <option value=\"Manufacturing\">Manufacturing</option>\r\n                  <option value=\"Accounts\">Accounts</option>\r\n                  <option value=\"Architecture\">Architecture</option>\r\n                  <option value=\"Machine Learning\">Machine Learning</option>\r\n                  <option value=\"Data Science\">Data Science</option>\r\n                  <option value=\"Development\">Development</option>\r\n                  <option value=\"Design\">Design</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stipend</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter stipend\"\r\n                  name=\"stipend\"\r\n                  value={formValues.stipend.value || internship.stipend}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stipend.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stipend.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || internship.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={\r\n                    formValues.lastDate.value || new Date(internship.lastDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={\r\n                    formValues.startDate.value || new Date(internship.startDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  End Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter end date\"\r\n                  name=\"endDate\"\r\n                  value={\r\n                    formValues.endDate.value || new Date(internship.endDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.endDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.endDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateInternship;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignup.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\JobUpdate.js",["313","314"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-job/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      experience,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-job\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        experience: experience.value,\r\n        stream: stream.value,\r\n        industry: industry.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Experience\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"Number\"\r\n                  placeholder=\"Enter experince\"\r\n                  name=\"experience\"\r\n                  value={formValues.experience.value || job.experience}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.experience.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.experience.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateJob;\r\n","D:\\girlscript\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\UpdateForm\\FresherJobUpdate.js",["315","316"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateFresherJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-freshersjob/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-fresherjob\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Fresher's Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Location\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateFresherJob;\r\n","D:\\girlscript\\easy-job-intern\\src\\utils\\checkValidation.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Start.js",["317","318","319","320","321"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Skills from \"./Skills\"\r\nimport Input from \"./Input\";\r\n\r\nconst Start=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  profileLink:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   profileLink: '' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n      return( <>\r\n        <form className=\"form-main\" onSubmit={handleSubmit}>\r\n        <div className=\"side\">\r\n        <label className=\"label-text\">First Name<span>*</span></label><br/>\r\n        <input type=\"text\" placeholder=\"Enter your first name\" className=\"text-long\"></input><br/>\r\n        </div>\r\n\r\n        <div className=\"side\">\r\n        <label className=\"label-text\">Last Name<span>*</span></label><br/>\r\n        <input type=\"text\" placeholder=\"Enter your last name\" className=\"text-long\"></input><br/>\r\n        </div>\r\n\r\n        <label className=\"label-text\">Studnet Address<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your student address\"></input><br/>\r\n\r\n        <label className=\"label-text\">Github Link<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your github link\"></input><br/>\r\n        \r\n        \r\n        <label className=\"label-text\">LinkedIn Link<span>*</span></label><br/>\r\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your linkedinlink\"></input><br/>\r\n\r\n        \r\n        <label className=\"label-text\">other Profile Link<span>*</span></label><br/>\r\n        {/* <input type=\"text\" className=\"text-long\" placeholder=\"Enter your other profile link\"></input> */}\r\n\r\n\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n            <input\r\n              name=\"profileLink\"\r\n              label=\"Profile Link\"\r\n              value={inputField.profileLink}\r\n              className=\"text-long\"\r\n              placeholder=\"Enter your other profile link\"\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            ></input>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n            </div>\r\n        ))}\r\n        </form><hr></hr>\r\n        </>\r\n      );\r\n}\r\n\r\nexport default Start;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Project.js",["322","323","324"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Project() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' },\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' }])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h2 className=\"edu\">Project</h2>\r\n      <form className=\"projects\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"Project-Title\"/><br/>\r\n            <input\r\n              name=\"project\"\r\n              label=\"Project Name\"\r\n              placeholder=\"Enter Project Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Project-Link\"/><br/>\r\n             <input\r\n              name=\"project\"\r\n              label=\"Project Name\"\r\n              placeholder=\"Enter Project Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Star Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Description\"/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Project;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Experience.js",["325","326","327"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Experience() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), company:'', title:'',sd:'', ld:'', location:'', desc:''},\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(),  company:'', title:'',sd:'', ld:'', location:'', desc:''}])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h2 className=\"center\">Experience</h2>\r\n      <form className=\"experience\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"Company/Organization\"/><br/>\r\n            <input\r\n              name=\"company\"\r\n              label=\"Company/organization\"\r\n              placeholder=\"Enter Company/organization Name\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Title\"/><br/>\r\n             <input\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              placeholder=\"Enter Title\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Start Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Location\"/><br/>\r\n             <input\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              placeholder=\"Enter Location\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Description\"/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Experience;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Education.js",["328","329","330","331"],"import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./profile.css\";\r\nimport Label from \"./Label\";\r\n\r\n\r\nfunction  Education() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' },\r\n  ]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"InputFields\", inputFields);\r\n  };\r\n\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map(i => {\r\n      if(id === i.id) {\r\n        i[event.target.name] = event.target.value\r\n      }\r\n      return i;\r\n    })\r\n    \r\n    setInputFields(newInputFields);\r\n  }\r\n\r\n  const handleAddFields = () => {\r\n    setInputFields([...inputFields, { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' }])\r\n  }\r\n\r\n  const handleRemoveFields = id => {\r\n    const values  = [...inputFields];\r\n    values.splice(values.findIndex(value => value.id === id), 1);\r\n    setInputFields(values);\r\n  }\r\n\r\n  return (\r\n  <>\r\n  <h2 className=\"edu\">Education</h2>\r\n      <form className=\"education\" onSubmit={handleSubmit}>\r\n        { inputFields.map(inputField => (\r\n          <div key={inputField.id}>\r\n          <Label value=\"School\"/><br/>\r\n            <input\r\n              name=\"school\"\r\n              label=\"School Name\"\r\n              placeholder=\"Ex:Boston University\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Degree\"/><br/>\r\n             <input\r\n              name=\"degree\"\r\n              label=\"Degree\"\r\n              placeholder=\"Ex:Bachelors\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Field of Study\"/><br/>\r\n            <input\r\n              name=\"study\"\r\n              label=\"Study \"\r\n              placeholder=\"Ex:Business\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <div className=\"side\">\r\n            <Label value=\"Start Date\"/><br/>\r\n            <input\r\n              name=\"sd\"\r\n              type=\"date\"\r\n              label=\"Star Date\"\r\n              placeholder=\"Enter Start Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <div className=\"byside\">\r\n            <Label value=\"Last Date\"/><br/>\r\n            <input\r\n              name=\"ld\"\r\n              type=\"date\"\r\n              label=\"Last Date\"\r\n              placeholder=\"Enter Last Date\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            </div>\r\n            <Label value=\"Grade\"/><br/>\r\n            <input\r\n              name=\"grade\"\r\n              label=\"Grade \"\r\n              placeholder=\"Enter Your Grade\"\r\n              className=\"text-long\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <Label value=\"Description\"/><br/>\r\n            <textarea\r\n              name=\"desc\" rows=\"3\" cols=\"82\"\r\n              label=\"Description\"\r\n              variant=\"filled\"\r\n              value={inputField.firstName}\r\n              onChange={event => handleChangeInput(inputField.id, event)}\r\n            /><br/>\r\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n              <RemoveIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleAddFields}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </div>\r\n        )) }\r\n      </form><hr/>\r\n      </>\r\n    \r\n  );\r\n}\r\n\r\nexport default Education;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Other.js",["332","333","334","335"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Other=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  Other:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   Other:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"Other\">\r\n        <h2>Other</h2>\r\n        <Label value=\"Other\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"Other\"\r\n        label=\"Other\"\r\n        value={inputField.Other}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Other\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n      \r\n\r\n      );}\r\n\r\n      export default Other;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Volunteer.js",["336","337","338","339"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Volunteer=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  volunteer:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   volunteer:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"volunteer\">\r\n        <h2>Volunteer Experience</h2>\r\n        <Label value=\"Volunteer Experience\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"volunteer\"\r\n        label=\"volunteer\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Skills\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Volunteer;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Achievments.js",["340","341","342","343"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Achievments=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  skills:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   skills:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"skills\">\r\n        <h2>Achievments</h2>\r\n        <Label value=\"Achievments\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"achievments\"\r\n        label=\"achievments\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your achievments\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Achievments;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Input.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Skills.js",["344","345","346","347"],"import React from \"react\";\r\nimport \"./profile.css\";\r\nimport {  useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Label from \"./Label\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n\r\nconst Skills=()=>\r\n{\r\n    const [inputFields, setInputFields] = useState([\r\n        {  skills:'' },\r\n      ]);\r\n\r\n      const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"InputFields\", inputFields);\r\n      };\r\n\r\n      const handleChangeInput = (id, event) => {\r\n        const newInputFields = inputFields.map(i => {\r\n          if(id === i.id) {\r\n            i[event.target.name] = event.target.value\r\n          }\r\n          return i;\r\n        })\r\n        \r\n        setInputFields(newInputFields);\r\n      }\r\n\r\n      const handleAddFields = () => {\r\n        setInputFields([...inputFields, {   skills:'' }])\r\n      }\r\n\r\n      const handleRemoveFields = id => {\r\n        const values  = [...inputFields];\r\n        values.splice(values.findIndex(value => value.id === id), 1);\r\n        setInputFields(values);\r\n      }\r\n\r\n      return (\r\n        <form className=\"skills edu\">\r\n        <h2 >Skills</h2>\r\n        <Label value=\"Skills\"/><br/>\r\n        { inputFields.map(inputField => (\r\n    <div key={inputField.id}>\r\n      <input\r\n        name=\"skills\"\r\n        label=\"skills\"\r\n        value={inputField.skills}\r\n        className=\"text-long\"\r\n        placeholder=\"Enter your Skills\"\r\n        onChange={event => handleChangeInput(inputField.id, event)}\r\n      ></input>\r\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleAddFields}\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n      </div>\r\n     ))}\r\n          \r\n        <hr/>\r\n      </form>\r\n\r\n      );}\r\n\r\n      export default Skills;","D:\\girlscript\\easy-job-intern\\src\\components\\student-profile\\Label.js",[],"D:\\girlscript\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByStream.js",["348","349","350","351"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\n\r\nconst JobsGroupedByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/stream\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.jobs);\r\n\r\n          setJobs(res.data.jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const GettingMonth = (date) => {\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const time =\r\n      monthNames[new Date(date).getMonth()] +\r\n      \", \" +\r\n      new Date(date).getFullYear();\r\n    return time;\r\n  };\r\n\r\n  const GettingDate = (date) => {\r\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\r\n    return time;\r\n  };\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.jobs &&\r\n                intern.jobs.map((job) => {\r\n                  // console.log(job.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {job.companyName} */}\r\n                      <Card className=\"cardPost\">\r\n                        <Card.Body>\r\n                          <Card.Title className=\"titleOfPost\">\r\n                            {job.companyName}{\" \"}\r\n                            {state &&\r\n                              job.createdBy &&\r\n                              state.user._id == job.createdBy._id && (\r\n                                <Dropdown className=\"postOptions\">\r\n                                  <Dropdown.Toggle\r\n                                    className=\"postOptionsBtn\"\r\n                                    variant=\"success\"\r\n                                    id=\"dropdown-basic\"\r\n                                  >\r\n                                    <Icon.ThreeDotsVertical\r\n                                      style={{ fontSize: \"1.4rem\" }}\r\n                                    />\r\n                                  </Dropdown.Toggle>\r\n\r\n                                  <Dropdown.Menu className=\"optionMenu\">\r\n                                    <Dropdown.Item\r\n                                      className=\"optionItem\"\r\n                                      href={`/update-job/${job._id}`}\r\n                                    >\r\n                                      <Icon.PencilSquare className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item\r\n                                      onClick={() => deletePost(job._id)}\r\n                                      className=\"optionItem\"\r\n                                    >\r\n                                      <Icon.Trash className=\"optionsMenuIcon\" />\r\n                                    </Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                                </Dropdown>\r\n                              )}\r\n                          </Card.Title>\r\n                          <Card.Subtitle className=\"subtitleOfPost\">\r\n                            {job.location}\r\n                          </Card.Subtitle>\r\n                          <Card.Subtitle className=\"subsubtitleOfPost\">\r\n                            {job.industry} {job.industry && job.stream && \",\"}{\" \"}\r\n                            {job.stream}\r\n                          </Card.Subtitle>\r\n                          <Card.Text className=\"textPost\">\r\n                            {job.description}\r\n                          </Card.Text>\r\n                          <ListGroup>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Salary: {job.salary}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Work Experience: {job.experience && \"Atleast\"}{\" \"}\r\n                              {job.experience} {job.experience === 1 && \"year\"}{\" \"}\r\n                              {job.experience > 1 && \"years\"}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost\">\r\n                              Start Date: {GettingMonth(job.startDate)}\r\n                            </ListGroupItem>\r\n                            <ListGroupItem className=\"itemPost last\">\r\n                              Last Date to Apply: {GettingDate(job.lastDate)}\r\n                            </ListGroupItem>\r\n                          </ListGroup>\r\n                          <div className=\"tech\">\r\n                            {job.techstack &&\r\n                              job.techstack.map((skill, i) => (\r\n                                <Card.Link key={i} className=\"TechStack\">\r\n                                  {skill}\r\n                                </Card.Link>\r\n                              ))}\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByStream;\r\n",{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":114,"column":10,"nodeType":"358","messageId":"359","endLine":114,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":49,"column":10,"nodeType":"358","messageId":"359","endLine":49,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":48,"column":10,"nodeType":"358","messageId":"359","endLine":48,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":84,"column":10,"nodeType":"358","messageId":"359","endLine":84,"endColumn":21},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"361","line":3,"column":16,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":23,"column":18,"nodeType":"358","messageId":"359","endLine":23,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":161,"column":40,"nodeType":"368","messageId":"369","endLine":161,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"361","line":3,"column":16,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"371","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":8,"suggestions":"373"},{"ruleId":"356","severity":1,"message":"374","line":65,"column":11,"nodeType":"358","messageId":"359","endLine":65,"endColumn":12},{"ruleId":"366","severity":1,"message":"367","line":182,"column":46,"nodeType":"368","messageId":"369","endLine":182,"endColumn":48},{"ruleId":"356","severity":1,"message":"375","line":3,"column":11,"nodeType":"358","messageId":"359","endLine":3,"endColumn":19},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"377","line":6,"column":8,"nodeType":"358","messageId":"359","endLine":6,"endColumn":18},{"ruleId":"356","severity":1,"message":"378","line":7,"column":8,"nodeType":"358","messageId":"359","endLine":7,"endColumn":18},{"ruleId":"356","severity":1,"message":"379","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":15},{"ruleId":"356","severity":1,"message":"380","line":9,"column":8,"nodeType":"358","messageId":"359","endLine":9,"endColumn":13},{"ruleId":"356","severity":1,"message":"381","line":11,"column":8,"nodeType":"358","messageId":"359","endLine":11,"endColumn":13},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"382","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":19,"suggestions":"383"},{"ruleId":"366","severity":1,"message":"367","line":173,"column":40,"nodeType":"368","messageId":"369","endLine":173,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"361","line":3,"column":16,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"371","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":8,"suggestions":"384"},{"ruleId":"356","severity":1,"message":"374","line":65,"column":11,"nodeType":"358","messageId":"359","endLine":65,"endColumn":12},{"ruleId":"366","severity":1,"message":"367","line":182,"column":46,"nodeType":"368","messageId":"369","endLine":182,"endColumn":48},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"385","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":19,"suggestions":"386"},{"ruleId":"366","severity":1,"message":"367","line":173,"column":40,"nodeType":"368","messageId":"369","endLine":173,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"387","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":19,"suggestions":"388"},{"ruleId":"366","severity":1,"message":"367","line":173,"column":40,"nodeType":"368","messageId":"369","endLine":173,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":15,"column":10,"nodeType":"358","messageId":"359","endLine":15,"endColumn":14},{"ruleId":"356","severity":1,"message":"365","line":21,"column":18,"nodeType":"358","messageId":"359","endLine":21,"endColumn":26},{"ruleId":"370","severity":1,"message":"389","line":79,"column":6,"nodeType":"372","endLine":79,"endColumn":8,"suggestions":"390"},{"ruleId":"366","severity":1,"message":"367","line":193,"column":46,"nodeType":"368","messageId":"369","endLine":193,"endColumn":48},{"ruleId":"356","severity":1,"message":"365","line":20,"column":18,"nodeType":"358","messageId":"359","endLine":20,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":191,"column":46,"nodeType":"368","messageId":"369","endLine":191,"endColumn":48},{"ruleId":"356","severity":1,"message":"365","line":21,"column":18,"nodeType":"358","messageId":"359","endLine":21,"endColumn":26},{"ruleId":"370","severity":1,"message":"391","line":83,"column":6,"nodeType":"372","endLine":83,"endColumn":8,"suggestions":"392"},{"ruleId":"366","severity":1,"message":"367","line":164,"column":46,"nodeType":"368","messageId":"369","endLine":164,"endColumn":48},{"ruleId":"356","severity":1,"message":"365","line":21,"column":18,"nodeType":"358","messageId":"359","endLine":21,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":158,"column":40,"nodeType":"368","messageId":"369","endLine":158,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":15,"column":10,"nodeType":"358","messageId":"359","endLine":15,"endColumn":14},{"ruleId":"356","severity":1,"message":"365","line":21,"column":18,"nodeType":"358","messageId":"359","endLine":21,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":187,"column":40,"nodeType":"368","messageId":"369","endLine":187,"endColumn":42},{"ruleId":"356","severity":1,"message":"360","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":14},{"ruleId":"356","severity":1,"message":"361","line":3,"column":16,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":9},{"ruleId":"356","severity":1,"message":"363","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":17},{"ruleId":"356","severity":1,"message":"364","line":12,"column":3,"nodeType":"358","messageId":"359","endLine":12,"endColumn":8},{"ruleId":"356","severity":1,"message":"365","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":26},{"ruleId":"370","severity":1,"message":"371","line":58,"column":6,"nodeType":"372","endLine":58,"endColumn":8,"suggestions":"393"},{"ruleId":"356","severity":1,"message":"374","line":65,"column":11,"nodeType":"358","messageId":"359","endLine":65,"endColumn":12},{"ruleId":"366","severity":1,"message":"367","line":183,"column":46,"nodeType":"368","messageId":"369","endLine":183,"endColumn":48},{"ruleId":"356","severity":1,"message":"357","line":98,"column":10,"nodeType":"358","messageId":"359","endLine":98,"endColumn":21},{"ruleId":"370","severity":1,"message":"394","line":182,"column":6,"nodeType":"372","endLine":182,"endColumn":8,"suggestions":"395"},{"ruleId":"356","severity":1,"message":"357","line":98,"column":10,"nodeType":"358","messageId":"359","endLine":98,"endColumn":21},{"ruleId":"370","severity":1,"message":"396","line":124,"column":6,"nodeType":"372","endLine":124,"endColumn":8,"suggestions":"397"},{"ruleId":"356","severity":1,"message":"357","line":98,"column":10,"nodeType":"358","messageId":"359","endLine":98,"endColumn":21},{"ruleId":"370","severity":1,"message":"396","line":124,"column":6,"nodeType":"372","endLine":124,"endColumn":8,"suggestions":"398"},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"380","line":9,"column":8,"nodeType":"358","messageId":"359","endLine":9,"endColumn":13},{"ruleId":"356","severity":1,"message":"399","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":14},{"ruleId":"356","severity":1,"message":"381","line":11,"column":8,"nodeType":"358","messageId":"359","endLine":11,"endColumn":13},{"ruleId":"356","severity":1,"message":"400","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":17},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":12},{"ruleId":"356","severity":1,"message":"400","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":17},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":12},{"ruleId":"356","severity":1,"message":"401","line":2,"column":8,"nodeType":"358","messageId":"359","endLine":2,"endColumn":17},{"ruleId":"356","severity":1,"message":"400","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":17},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":12},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"381","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":13},{"ruleId":"356","severity":1,"message":"402","line":20,"column":13,"nodeType":"358","messageId":"359","endLine":20,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"381","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":13},{"ruleId":"356","severity":1,"message":"402","line":20,"column":13,"nodeType":"358","messageId":"359","endLine":20,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"381","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":13},{"ruleId":"356","severity":1,"message":"402","line":20,"column":13,"nodeType":"358","messageId":"359","endLine":20,"endColumn":25},{"ruleId":"356","severity":1,"message":"362","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"376","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"381","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":13},{"ruleId":"356","severity":1,"message":"402","line":20,"column":13,"nodeType":"358","messageId":"359","endLine":20,"endColumn":25},{"ruleId":"356","severity":1,"message":"360","line":15,"column":10,"nodeType":"358","messageId":"359","endLine":15,"endColumn":14},{"ruleId":"356","severity":1,"message":"365","line":21,"column":18,"nodeType":"358","messageId":"359","endLine":21,"endColumn":26},{"ruleId":"370","severity":1,"message":"389","line":79,"column":6,"nodeType":"372","endLine":79,"endColumn":8,"suggestions":"403"},{"ruleId":"366","severity":1,"message":"367","line":193,"column":46,"nodeType":"368","messageId":"369","endLine":193,"endColumn":48},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useParams' is defined but never used.","'Button' is defined but never used.","'DropdownButton' is defined but never used.","'Modal' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'internships'. Either include it or remove the dependency array.","ArrayExpression",["406"],"'t' is assigned a value but never used.","'useState' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["407"],["408"],"React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.",["409"],"React Hook useEffect has a missing dependency: 'industry'. Either include it or remove the dependency array.",["410"],"React Hook useEffect has a missing dependency: 'jobs'. Either include it or remove the dependency array.",["411"],"React Hook useEffect has a missing dependency: 'freshersJobs'. Either include it or remove the dependency array.",["412"],["413"],"React Hook useEffect has missing dependencies: 'internship' and 'postId'. Either include them or remove the dependency array.",["414"],"React Hook useEffect has missing dependencies: 'job' and 'postId'. Either include them or remove the dependency array.",["415"],["416"],"'Skills' is defined but never used.","'TextField' is defined but never used.","'Container' is defined but never used.","'handleSubmit' is assigned a value but never used.",["417"],"no-global-assign","no-unsafe-negation",{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"418","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"418","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"434","fix":"436"},{"desc":"427","fix":"437"},"Update the dependencies array to be: [internships]",{"range":"438","text":"439"},"Update the dependencies array to be: [internships, stream]",{"range":"440","text":"441"},{"range":"442","text":"439"},"Update the dependencies array to be: [internships, location]",{"range":"443","text":"444"},"Update the dependencies array to be: [industry, internships]",{"range":"445","text":"446"},"Update the dependencies array to be: [jobs]",{"range":"447","text":"448"},"Update the dependencies array to be: [freshersJobs]",{"range":"449","text":"450"},{"range":"451","text":"439"},"Update the dependencies array to be: [internship, postId]",{"range":"452","text":"453"},"Update the dependencies array to be: [job, postId]",{"range":"454","text":"455"},{"range":"456","text":"455"},{"range":"457","text":"448"},[1579,1581],"[internships]",[1548,1561],"[internships, stream]",[1575,1577],[1556,1569],"[internships, location]",[1556,1569],"[industry, internships]",[2179,2181],"[jobs]",[2340,2342],"[freshersJobs]",[1579,1581],[5514,5516],"[internship, postId]",[2938,2940],"[job, postId]",[2953,2955],[2175,2177]]