[{"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\index.js":"1","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\reportWebVitals.js":"2","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\App.js":"3","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\reducers\\userReducer.js":"4","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\footer\\footer.js":"5","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student\\login.js":"6","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\employer\\employerSignup.js":"7","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student\\register.js":"8","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\employer\\employerSignin.js":"9","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\contact-us\\contact-us.js":"10","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\about-us\\about-us.js":"11","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\privacy-policy\\privacy-policy.js":"12","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\terms-condition\\terms-condition.js":"13","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreateInternship.js":"14","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreateJob.js":"15","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreatFreshersJob.js":"16","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Profile.js":"17","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\JobUpdate.js":"18","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\InternshipUpdate.js":"19","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignup.js":"20","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\FresherJobUpdate.js":"21","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js":"22","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\navbar\\navbar.js":"23","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\home\\home.js":"24","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Error\\Error.js":"25","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\AllInternships.js":"26","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByIndustry.js":"27","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByStream.js":"28","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByLocation.js":"29","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByLoction.js":"30","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipGroupedByStream.js":"31","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\AllJobs.js":"32","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByIndustry.js":"33","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\AllFresherJob.js":"34","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByIndustry.js":"35","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByLocation.js":"36","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByStream.js":"37","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js":"38","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Start.js":"39","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Experience.js":"40","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Education.js":"41","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Other.js":"42","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Project.js":"43","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Achievments.js":"44","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Volunteer.js":"45","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Input.js":"46","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Skills.js":"47","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Label.js":"48","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\checkValidation.js":"49","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\JobsCard\\JobsCard.js":"50","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\FresherJobCard\\FresherJobCard.js":"51","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\InternshipCard\\InternshipCard.js":"52","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByCompany.js":"53","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsByCompanyName.js":"54","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByLocation.js":"55","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FreshersJobByCompanyName.js":"56","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipCompanyNames.js":"57","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByStream.js":"58","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobCompanyName.js":"59","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FreshersJobCompanyName.js":"60"},{"size":517,"mtime":1617712689619,"results":"61","hashOfConfig":"62"},{"size":375,"mtime":1617712043731,"results":"63","hashOfConfig":"62"},{"size":13353,"mtime":1622397422051,"results":"64","hashOfConfig":"62"},{"size":212,"mtime":1618028176556,"results":"65","hashOfConfig":"62"},{"size":7852,"mtime":1620708058259,"results":"66","hashOfConfig":"62"},{"size":8399,"mtime":1618294654225,"results":"67","hashOfConfig":"62"},{"size":14275,"mtime":1620708058255,"results":"68","hashOfConfig":"62"},{"size":17613,"mtime":1618294778068,"results":"69","hashOfConfig":"62"},{"size":8548,"mtime":1620709324226,"results":"70","hashOfConfig":"62"},{"size":6937,"mtime":1618146226170,"results":"71","hashOfConfig":"62"},{"size":4007,"mtime":1618146226167,"results":"72","hashOfConfig":"62"},{"size":1754,"mtime":1617712043725,"results":"73","hashOfConfig":"62"},{"size":2196,"mtime":1617712043729,"results":"74","hashOfConfig":"62"},{"size":16211,"mtime":1619197227001,"results":"75","hashOfConfig":"62"},{"size":15266,"mtime":1621367413237,"results":"76","hashOfConfig":"62"},{"size":14311,"mtime":1621369218379,"results":"77","hashOfConfig":"62"},{"size":1253,"mtime":1622371114380,"results":"78","hashOfConfig":"62"},{"size":13806,"mtime":1621367649525,"results":"79","hashOfConfig":"62"},{"size":17448,"mtime":1619196368515,"results":"80","hashOfConfig":"62"},{"size":840,"mtime":1620708058261,"results":"81","hashOfConfig":"62"},{"size":12934,"mtime":1621369394927,"results":"82","hashOfConfig":"62"},{"size":863,"mtime":1620708058262,"results":"83","hashOfConfig":"62"},{"size":7796,"mtime":1622365052651,"results":"84","hashOfConfig":"62"},{"size":10873,"mtime":1622221208367,"results":"85","hashOfConfig":"62"},{"size":602,"mtime":1622221208075,"results":"86","hashOfConfig":"62"},{"size":3931,"mtime":1622396673785,"results":"87","hashOfConfig":"62"},{"size":4118,"mtime":1622221208158,"results":"88","hashOfConfig":"62"},{"size":4108,"mtime":1622221208185,"results":"89","hashOfConfig":"62"},{"size":4118,"mtime":1622221208170,"results":"90","hashOfConfig":"62"},{"size":4512,"mtime":1622221208280,"results":"91","hashOfConfig":"62"},{"size":4506,"mtime":1622221208251,"results":"92","hashOfConfig":"62"},{"size":4574,"mtime":1622397172057,"results":"93","hashOfConfig":"62"},{"size":4979,"mtime":1622221208297,"results":"94","hashOfConfig":"62"},{"size":4838,"mtime":1622379456241,"results":"95","hashOfConfig":"62"},{"size":4439,"mtime":1622221208263,"results":"96","hashOfConfig":"62"},{"size":4920,"mtime":1622221208303,"results":"97","hashOfConfig":"62"},{"size":4914,"mtime":1622221208326,"results":"98","hashOfConfig":"62"},{"size":4351,"mtime":1622221208096,"results":"99","hashOfConfig":"62"},{"size":4317,"mtime":1622372377894,"results":"100","hashOfConfig":"62"},{"size":4882,"mtime":1622373336415,"results":"101","hashOfConfig":"62"},{"size":5270,"mtime":1622372812389,"results":"102","hashOfConfig":"62"},{"size":2078,"mtime":1622373098869,"results":"103","hashOfConfig":"62"},{"size":4329,"mtime":1622373436679,"results":"104","hashOfConfig":"62"},{"size":2116,"mtime":1622373048109,"results":"105","hashOfConfig":"62"},{"size":2130,"mtime":1622373076503,"results":"106","hashOfConfig":"62"},{"size":182,"mtime":1618503616102,"results":"107","hashOfConfig":"62"},{"size":2085,"mtime":1622372998509,"results":"108","hashOfConfig":"62"},{"size":205,"mtime":1618503616103,"results":"109","hashOfConfig":"62"},{"size":1874,"mtime":1618503616116,"results":"110","hashOfConfig":"62"},{"size":6154,"mtime":1622397220786,"results":"111","hashOfConfig":"62"},{"size":5144,"mtime":1622379170812,"results":"112","hashOfConfig":"62"},{"size":6881,"mtime":1622396758998,"results":"113","hashOfConfig":"62"},{"size":4125,"mtime":1622221742044,"results":"114","hashOfConfig":"62"},{"size":4694,"mtime":1622223974235,"results":"115","hashOfConfig":"62"},{"size":4351,"mtime":1622223974233,"results":"116","hashOfConfig":"62"},{"size":4133,"mtime":1622224545471,"results":"117","hashOfConfig":"62"},{"size":1666,"mtime":1622351570801,"results":"118","hashOfConfig":"62"},{"size":4342,"mtime":1622310054358,"results":"119","hashOfConfig":"62"},{"size":1617,"mtime":1622397509025,"results":"120","hashOfConfig":"62"},{"size":1672,"mtime":1622352514093,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1gbhm1z",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"124"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"124"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"124"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"124"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"124"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"124"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"124"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"124"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"124"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"124"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"124"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"124"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"124"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"124"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"124"},"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\index.js",[],["267","268"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\reportWebVitals.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\App.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\reducers\\userReducer.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\footer\\footer.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student\\login.js",["269"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction LoginForm() {\r\n  const { dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/student/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"student\"));\r\n          dispatch({ type: \"USER\", payload: { user: res.data.user , userType: \"student\"} });\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          const notify = () => toast(\"Signin Successfull\");\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  fontSize: \"1.5vh\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <Link to=\"/student-signup\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Don't have an account? Sign up\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default LoginForm;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\employer\\employerSignup.js",["270"],"import React, { useState } from \"react\";\r\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst EmployerSignup = () => {\r\n  const history = useHistory();\r\n  //listing initial states of the fields present in the form\r\n  const initialState = {\r\n    companyName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 3,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    personName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      companyName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      personName,\r\n      contact,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/employer/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          companyName: companyName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.push(\"/employer-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => {\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n        <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the company */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Company Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.companyName.valid &&\r\n                    formValues.companyName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter the company name\"\r\n                  name=\"companyName\"\r\n                  value={formValues.companyName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.companyName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.companyName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*Email  */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Password Confirmation */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#6EE2CD\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/* Person Name */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* contact */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              {/* For Existing user */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/employer-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployerSignup;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student\\register.js",["271"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Card, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport \"./register.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst StudentSignup = () => {\r\n  const history = useHistory();\r\n  //creating a dicitionary for every field of the form\r\n  const initialState = {\r\n    personName: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n    email: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    passwordConfirmation: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n        checkPassword: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n    contact: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        Length: 10,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    degree: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    institutionName: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    branch: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    year: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [signupError, setSignupError] = useState(null);\r\n\r\n  const [formIsValid ,setFormIsValid] = useState(false); //boolean to check that the whole form is valid or not\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const passwordIsValidChecker = () => {\r\n    const { password, passwordConfirmation } = formValues;\r\n    return password.value === passwordConfirmation.value;\r\n  };\r\n\r\n  const submitSignup = (e) => {\r\n    const {\r\n      personName,\r\n      email,\r\n      password,\r\n      passwordConfirmation,\r\n      contact,\r\n      branch,\r\n      year,\r\n      degree,\r\n      institutionName,\r\n    } = formValues;\r\n\r\n    e.preventDefault();\r\n    if (!passwordIsValidChecker()) {\r\n      setSignupError(\"Passwords do not match\");\r\n      return;\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:5000/student/signup\", {\r\n          personName: personName.value,\r\n          email: email.value,\r\n          password: password.value,\r\n          contact: contact.value,\r\n          passwordConfirmation: passwordConfirmation.value,\r\n          branch: branch.value,\r\n          year: year.value,\r\n          degree: degree.value,\r\n          institutionName: institutionName.value,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data.user);\r\n          // alert(res.data.message);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          if(res.data.user){\r\n            history.pushState(\"/student-login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFormValues(initialState);\r\n  };\r\n  const togglePasswordVisiblity = () => { // to handle visibility of passsword \r\n    \r\n      setFormValues({...formValues, showPassword: !(formValues.showPassword)});\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#6EE2CD\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Student Signup\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignup(e)}>\r\n              {/* Name of the student */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.personName.valid &&\r\n                    formValues.personName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  name=\"personName\"\r\n                  value={formValues.personName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.personName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.personName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Email address */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/*  Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n                <InputGroup>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.password.valid && formValues.password.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type={formValues.showPassword?\"text\":\"password\"}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  value={formValues.password.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.password.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.password.errorMessage}\r\n                  </span>\r\n                )}\r\n                <InputGroup.Append>\r\n                      <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                        <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                        >\r\n                          {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton> \r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Confirm Password */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    className={`${\r\n                      !formValues.passwordConfirmation.valid &&\r\n                      formValues.passwordConfirmation.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                    type=\"password\"\r\n                    placeholder=\"Re-enter Password\"\r\n                    name=\"passwordConfirmation\"\r\n                    value={formValues.passwordConfirmation.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.passwordConfirmation.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.passwordConfirmation.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\r\n                      <IconButton style={{width: \"25px\"}}\r\n                          onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton> \r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              {/* Contact Number */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.contact.valid && formValues.contact.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"number\"\r\n                  placeholder=\"Enter your contact number\"\r\n                  name=\"contact\"\r\n                  value={formValues.contact.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.contact.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.contact.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Degree */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which degree you are pursuing?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.degree.valid && formValues.degree.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter complete name of your degree\"\r\n                  name=\"degree\"\r\n                  value={formValues.degree.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.degree.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.degree.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* College Name */}\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicName\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  College Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.institutionName.valid &&\r\n                    formValues.institutionName.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Your college name\"\r\n                  name=\"institutionName\"\r\n                  value={formValues.institutionName.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.institutionName.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.institutionName.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Branch of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Field of study\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.branch.valid && formValues.branch.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your field of study\"\r\n                  name=\"branch\"\r\n                  value={formValues.branch.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.branch.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.branch.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Year of study */}\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Which year of college you are in?\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className={`${\r\n                    !formValues.year.valid && formValues.year.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your college year\"\r\n                  name=\"year\"\r\n                  value={formValues.year.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.year.errorMessage && (\r\n                  <span className=\"error\">{formValues.year.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {/* Already a user? */}\r\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\r\n                <Link to=\"/student-login\">\r\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                    Already have an account? Sign in\r\n                  </a>\r\n                </Link>\r\n              </Form.Group>\r\n\r\n              {signupError ? (\r\n                <Form.Text\r\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\r\n                  className=\"text-danger\"\r\n                >\r\n                  {signupError}\r\n                </Form.Text>\r\n              ) : null}\r\n              <Button\r\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default StudentSignup;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\employer\\employerSignin.js",["272"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Card, Form,  InputGroup } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\nimport axios from \"axios\";\r\nimport \"./employer.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { UserContext } from \"../../App\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction EmployerSignin() {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const initialState = {\r\n    email: {\r\n      //value of the input field\r\n      value: \"\",\r\n      //rules to check while validating the input\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      //error messages to show in case any validation rule is not followed\r\n      errorMessage: \"\",\r\n      // boolean value to check if the whole input field is valid or not\r\n      valid: false,\r\n      //boolean value to check if the input field is touched or not\r\n      touched: false,\r\n    },\r\n\r\n    password: {\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 8,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    showPassword: false,\r\n  };\r\n  const [formValues, setFormValues] = useState(initialState);\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation,\r\n      updatedFormValues.password.value\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitSignin = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = formValues;\r\n    axios\r\n      .post(\"http://localhost:5000/employer/signin\", {\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          // toast(res.data.error);\r\n          console.log(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          localStorage.setItem(\"jwt\", res.data.token);\r\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n          localStorage.setItem(\"type\", JSON.stringify(\"employee\"))\r\n          dispatch({ type: \"USER\", payload: {user: res.data.user , userType: \"employee\"} });\r\n          console.log(state);\r\n          console.log(\r\n            \"Token: \",\r\n            res.data.token,\r\n            \"User Details: \",\r\n            res.data.user\r\n          );\r\n          // alert(\"Signin Successfull\");\r\n          // toast(\"Signin Successfull\");\r\n          const notify = () => toast('Signin Successfull');\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    // to handle visibility of passsword\r\n\r\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"employer_form_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Employer Signin\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitSignin(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  className={`${\r\n                    !formValues.email.valid && formValues.email.touched\r\n                      ? \"input-error\"\r\n                      : \"\"\r\n                  }`}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  name=\"email\"\r\n                  value={formValues.email.value}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.email.errorMessage && (\r\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicPassword\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\r\n\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                    type={formValues.showPassword ? \"text\" : \"password\"}\r\n                    className={`${\r\n                      !formValues.password.valid && formValues.password.touched\r\n                        ? \"input-error\"\r\n                        : \"\"\r\n                    }`}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={formValues.password.value}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {formValues.password.errorMessage && (\r\n                    <span className=\"error\">\r\n                      {formValues.password.errorMessage}\r\n                    </span>\r\n                  )}\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text\r\n                      style={{\r\n                        borderColor: \"#ffc107\",\r\n                        color: \"#000000\",\r\n                        height: \"37px\",\r\n                        width: \"28px\",\r\n                        paddingLeft: \"1px\",\r\n                        paddingRight: \"1px\",\r\n                      }}\r\n                    >\r\n                      <IconButton\r\n                        style={{ width: \"25px\" }}\r\n                        onClick={togglePasswordVisiblity}\r\n                      >\r\n                        {formValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <Form.Group\r\n                  style={{\r\n                    textAlign: \"left\",\r\n                    fontSize: \"1.5vh\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <Link to=\"/employer-signup\">\r\n                    <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\r\n                      Don't have an account? Sign up\r\n                    </a>\r\n                  </Link>\r\n                </Form.Group>\r\n              </Form.Group>\r\n              <Button\r\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                variant=\"secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Signin\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployerSignin;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\contact-us\\contact-us.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\about-us\\about-us.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\privacy-policy\\privacy-policy.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\terms-condition\\terms-condition.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreateInternship.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreateJob.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\CreateNew\\CreatFreshersJob.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Profile.js",["273","274","275","276","277","278","279","280"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\JobUpdate.js",["281","282"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-job/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      experience,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-job\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        experience: experience.value,\r\n        stream: stream.value,\r\n        industry: industry.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Experience\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"Number\"\r\n                  placeholder=\"Enter experince\"\r\n                  name=\"experience\"\r\n                  value={formValues.experience.value || job.experience}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.experience.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.experience.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateJob;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\InternshipUpdate.js",["283","284"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateInternship = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [internship, setInternship] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stipend: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    endDate: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      validation: {\r\n        required: true,\r\n      },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  // const setInitialValue = () => {\r\n  // const updatedFormElementD = { ...updatedFormValues[\"description\"] };\r\n  // const updatedFormElementL = { ...updatedFormValues[\"location\"] };\r\n  // const updatedFormElementS = { ...updatedFormValues[\"stipend\"] };\r\n  // const updatedFormElementTS = { ...updatedFormValues[\"techstack\"] };\r\n  // const updatedFormElementLD = { ...updatedFormValues[\"lastDate\"] };\r\n  // const updatedFormElementSD = { ...updatedFormValues[\"startDate\"] };\r\n  // const updatedFormElementED = { ...updatedFormValues[\"endDate\"] };\r\n  // updatedFormElementD.value =nullnternship.description;\r\n  // updatedFormElementL.value = internship.location;\r\n  // updatedFormElementS.value = internship.stipend;\r\n  // updatedFormElementTS.value = internship.techstack;\r\n  // updatedFormElementLD.value = internship.lastDate;\r\n  // updatedFormElementSD.value = internship.startDate;\r\n  // updatedFormElementED.value = internship.endDate;\r\n  // updatedFormValues[\"description\"] = updatedFormElementD;\r\n  // updatedFormValues[\"location\"] = updatedFormElementL;\r\n  // updatedFormValues[\"stipend\"] = updatedFormElementS;\r\n  // updatedFormValues[\"techstack\"] = updatedFormElementTS;\r\n  // updatedFormValues[\"lastDate\"] = updatedFormElementLD;\r\n  // updatedFormValues[\"startDate\"] = updatedFormElementSD;\r\n  // updatedFormValues[\"endDate\"] = updatedFormElementED;\r\n  // };\r\n  // useEffect(() => {\r\n  //   if (internship) {\r\n  //     setInitialState((prev) => {\r\n  //       return {\r\n  //         ...prev,\r\n  //         description: {\r\n  //           ...prev.description,\r\n  //           value: internship.description,\r\n  //         },\r\n  //         location: {\r\n  //           ...prev.location,\r\n  //           value: internship.location,\r\n  //         },\r\n  //         stipend: {\r\n  //           ...prev.stipend,\r\n  //           value: internship.stipend,\r\n  //         },\r\n  //       };\r\n  //     });\r\n\r\n  //     setFormValues(initialState);\r\n  //   }\r\n  // }, [internship]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-internship/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internship);\r\n          setInternship(res.data.internship);\r\n          console.log(internship);\r\n          // if (internship) {\r\n          // console.log(res.data.internship.description);\r\n          // setInitialValue();\r\n          // setInitialValue(\"description\", res.data.internship.description);\r\n          // setInitialValue(\"location\", res.data.internship.location);\r\n          // setInitialValue(\"stipend\", res.data.internship.stipend);\r\n          // setInitialValue(\"lastDate\", new Date(res.data.internship.lastDate));\r\n          // setInitialValue(\"startDate\", new Date(res.data.internship.startDate));\r\n          // setInitialValue(\"endDate\", res.data.internship.endDate);\r\n          // setInitialValue(\"techstack\", res.data.internship.techstack);\r\n          // }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n    console.log(typeof formValues.startDate.value);\r\n    const duration =\r\n      new Date(formValues.endDate.value) - new Date(formValues.startDate.value);\r\n    console.log(duration);\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      stipend,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      endDate,\r\n      industry,\r\n      stream\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-internship\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        stipend: stipend.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        endDate: endDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n        duration: duration,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {internship && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Internship\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Company Name\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || internship.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || internship.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"exampleForm.ControlSelect1\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || internship.industry}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Industry</option>\r\n                  <option value=\"IT\">IT</option>\r\n                  <option value=\"Marketing\">Marketing</option>\r\n                  <option value=\"Design\">Design</option>\r\n                  <option value=\"MBA\">MBA</option>\r\n                  <option value=\"Engineering\">Engineering</option>\r\n                  <option value=\"Media\">Media</option>\r\n                  <option value=\"Teaching\">Teaching</option>\r\n                  <option value=\"Finance\">Finance</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group style={{ textAlign: \"left\" }}>\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || internship.stream}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Select Stream</option>\r\n                  <option value=\"Management\">Management</option>\r\n                  <option value=\"Manufacturing\">Manufacturing</option>\r\n                  <option value=\"Accounts\">Accounts</option>\r\n                  <option value=\"Architecture\">Architecture</option>\r\n                  <option value=\"Machine Learning\">Machine Learning</option>\r\n                  <option value=\"Data Science\">Data Science</option>\r\n                  <option value=\"Development\">Development</option>\r\n                  <option value=\"Design\">Design</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stipend</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter stipend\"\r\n                  name=\"stipend\"\r\n                  value={formValues.stipend.value || internship.stipend}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stipend.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stipend.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || internship.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={\r\n                    formValues.lastDate.value || new Date(internship.lastDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={\r\n                    formValues.startDate.value || new Date(internship.startDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  End Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter end date\"\r\n                  name=\"endDate\"\r\n                  value={\r\n                    formValues.endDate.value || new Date(internship.endDate)\r\n                  }\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.endDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.endDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateInternship;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignup.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\UpdateForm\\FresherJobUpdate.js",["285","286"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport checkValidity from \"../../utils/checkValidation\";\r\n\r\nconst UpdateFresherJob = () => {\r\n  const history = useHistory();\r\n  const postId = useParams().id;\r\n  const [job, setJob] = useState();\r\n\r\n  const initialState = {\r\n    description: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    location: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    stream: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    industry: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    salary: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    techstack: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    lastDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    startDate: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    experience: {\r\n      value: null,\r\n      //   validation: {\r\n      //     required: true,\r\n      //   },\r\n      errorMessage: \"\",\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  };\r\n\r\n  const [formValues, setFormValues] = useState(initialState);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/employer/get-freshersjob/${postId}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.job);\r\n          setJob(res.data.job);\r\n          console.log(job);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const updatedFormValues = { ...formValues };\r\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\r\n    updatedFormElement.value = e.target.value;\r\n    let validOutput = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.valid = validOutput[0];\r\n    updatedFormElement.errorMessage = validOutput[1];\r\n    updatedFormElement.touched = true;\r\n    updatedFormValues[e.target.name] = updatedFormElement;\r\n\r\n    let formValid = true;\r\n    for (let inputIdentifiers in updatedFormValues) {\r\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\r\n    }\r\n    setFormValues(updatedFormValues);\r\n    setFormIsValid(formValid);\r\n  };\r\n\r\n  const submitInternship = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      description,\r\n      location,\r\n      salary,\r\n      techstack,\r\n      lastDate,\r\n      startDate,\r\n      stream,\r\n      industry,\r\n    } = formValues;\r\n\r\n    axios({\r\n      method: \"patch\",\r\n      url: \"http://localhost:5000/employer/update-fresherjob\",\r\n      data: {\r\n        postId,\r\n        description: description.value,\r\n        location: location.value,\r\n        salary: salary.value,\r\n        techstack: techstack.value,\r\n        lastDate: lastDate.value,\r\n        startDate: startDate.value,\r\n        industry: industry.value,\r\n        stream: stream.value,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // setInitialValue(description, )\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n    setFormValues(initialState);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"4vh 0\" }}>\r\n      <Toaster />\r\n      {job && (\r\n        <Card\r\n          style={{\r\n            width: \"40vw\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"4vh\",\r\n            marginBottom: \"4vh\",\r\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\r\n          }}\r\n          className=\"register_card_custom\"\r\n        >\r\n          <Card.Header\r\n            style={{\r\n              backgroundColor: \"#6c6c6c\",\r\n              color: \"#ffc107\",\r\n              fontFamily: '\"Merriweather\", serif',\r\n              fontSize: \"1.25rem\",\r\n            }}\r\n            as=\"h5\"\r\n          >\r\n            Update Fresher's Job\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={(e) => submitInternship(e)}>\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Location\"\r\n                  name=\"location\"\r\n                  value={formValues.location.value || job.location}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.location.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.location.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stream</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Stream\"\r\n                  name=\"stream\"\r\n                  value={formValues.stream.value || job.stream}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.stream.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.stream.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>Industry</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Industry\"\r\n                  name=\"industry\"\r\n                  value={formValues.industry.value || job.industry}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.industry.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.industry.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Internship Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter description\"\r\n                  name=\"description\"\r\n                  value={formValues.description.value || job.description}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.description.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.description.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter salary\"\r\n                  name=\"salary\"\r\n                  value={formValues.salary.value || job.salary}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.salary.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.salary.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  TechStack\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter techstack\"\r\n                  name=\"techstack\"\r\n                  value={formValues.techstack.value || job.techstack}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.techstack.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.techstack.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Last Date\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"date\"\r\n                  placeholder=\"Enter last date\"\r\n                  name=\"lastDate\"\r\n                  value={formValues.lastDate.value || job.lastDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.lastDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.lastDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                style={{ textAlign: \"left\" }}\r\n                controlId=\"formBasicEmail\"\r\n              >\r\n                <Form.Label style={{ fontWeight: \"bold\" }}>\r\n                  Start Month\r\n                </Form.Label>\r\n                <Form.Control\r\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\r\n                  type=\"month\"\r\n                  placeholder=\"Enter start date\"\r\n                  name=\"startDate\"\r\n                  value={formValues.startDate.value || job.startDate}\r\n                  onChange={handleChange}\r\n                />\r\n                {formValues.startDate.errorMessage && (\r\n                  <span className=\"error\">\r\n                    {formValues.startDate.errorMessage}\r\n                  </span>\r\n                )}\r\n              </Form.Group>\r\n\r\n              {\r\n                <Button\r\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\r\n                  variant=\"secondary\"\r\n                  type=\"submit\"\r\n                  // disabled={!formIsValid}\r\n                >\r\n                  Update\r\n                </Button>\r\n              }\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateFresherJob;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\welcomeSignup\\welcomeSignupEmployer.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\navbar\\navbar.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\home\\home.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Error\\Error.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\AllInternships.js",["287","288"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByIndustry.js",["289","290","291"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { industry } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/industry-internship/${industry}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <InternshipCard\r\n                  internship={internship}\r\n                  userId={state.user._id}\r\n                  deletePost={deletePost}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByIndustry;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByStream.js",["292","293","294"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { stream } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/stream-internship/${stream}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <InternshipCard\r\n                  internship={internship}\r\n                  userId={state.user._id}\r\n                  deletePost={deletePost}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByStream;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByLocation.js",["295","296","297"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { location } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/location-internship/${location}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <InternshipCard\r\n                  internship={internship}\r\n                  userId={state.user._id}\r\n                  deletePost={deletePost}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByLocation;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByLoction.js",["298","299","300"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsGroupedByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/location`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  //   console.log(internships);\r\n  console.log(internships[0]);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {internship.companyName} */}\r\n                      <InternshipCard\r\n                        internship={internship}\r\n                        userId={state.user._id}\r\n                        deletePost={deletePost}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByLocation;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipGroupedByStream.js",["301","302","303"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsGroupedByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/stream`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  //   console.log(internships);\r\n  console.log(internships[0]);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {internship.companyName} */}\r\n                      <InternshipCard\r\n                        internship={internship}\r\n                        userId={state.user._id}\r\n                        deletePost={deletePost}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByStream;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\AllJobs.js",["304","305"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByIndustry.js",["306","307","308","309","310","311"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Dropdown,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport JobsCard from \"../../utils/UI/JobsCard/JobsCard\";\r\n\r\nconst JobsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/industry\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          // console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        // console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((catejob) => (\r\n          <div key={catejob._id}>\r\n            <h1 className=\"parameter\">{catejob._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catejob.jobs &&\r\n                catejob.jobs.map((job) => {\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <JobsCard\r\n                        job={job}\r\n                        deletePost={deletePost}\r\n                        key={job._id}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByIndustry;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\AllFresherJob.js",["312"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipsGroupedByIndustry.js",["313","314","315"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  //   const { location } = useParams();\r\n\r\n  //   console.log(internships);\r\n  //   console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/internship/industry`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          //   console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          //   console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (internships && internships[4]) {\r\n    // console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    // console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.internships);\r\n          // setInternships(res.data.internships);\r\n          // console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n          window.location.reload(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : internships && !internships.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100 \"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No internships available right now\r\n        </Alert>\r\n      ) : (\r\n        internships &&\r\n        internships.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.internships &&\r\n                intern.internships.map((internship) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={internship._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <InternshipCard\r\n                        internship={internship}\r\n                        userId={state.user._id}\r\n                        deletePost={deletePost}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n              {/* )} */}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsGroupedByIndustry;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByLocation.js",["316","317"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport JobsCard from \"../../utils/UI/JobsCard/JobsCard\";\r\n\r\nconst JobsGroupedByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/location\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.jobs);\r\n\r\n          setJobs(res.data.jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.jobs &&\r\n                intern.jobs.map((job) => {\r\n                  // console.log(job.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {job.companyName} */}\r\n                      <JobsCard\r\n                        job={job}\r\n                        deletePost={deletePost}\r\n                        key={job._id}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByLocation;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsGroupedByStream.js",["318","319"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport JobsCard from \"../../utils/UI/JobsCard/JobsCard\";\r\n\r\nconst JobsGroupedByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/job/stream\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.jobs);\r\n\r\n          setJobs(res.data.jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : jobs && !jobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        jobs &&\r\n        jobs.map((intern) => (\r\n          <div key={intern._id}>\r\n            <h1 className=\"parameter\">{intern._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {intern.jobs &&\r\n                intern.jobs.map((job) => {\r\n                  // console.log(job.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={job._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      {/* {job.companyName} */}\r\n                      <JobsCard\r\n                        job={job}\r\n                        deletePost={deletePost}\r\n                        key={job._id}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default JobsGroupedByStream;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByIndustry.js",["320"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport FresherJobCard from \"../../utils/UI/FresherJobCard/FresherJobCard\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst FresherJobsGroupedByIndustry = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/freshersjob/industry\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.freshersjobs);\r\n          // console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Fresher Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        freshersJobs &&\r\n        freshersJobs.map((catefresher) => (\r\n          <div key={catefresher._id}>\r\n            <h1 className=\"parameter\">{catefresher._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catefresher.freshersjobs &&\r\n                catefresher.freshersjobs.map((fresher) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={fresher._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <FresherJobCard\r\n                        fresherjob={fresher}\r\n                        deletePost={deletePost}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default FresherJobsGroupedByIndustry;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Start.js",["321","322","323","324","325"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Experience.js",["326","327","328","329"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Education.js",["330","331","332","333"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Other.js",["334","335","336","337"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Project.js",["338","339","340","341"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Achievments.js",["342","343","344","345"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Volunteer.js",["346","347","348","349"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Input.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Skills.js",["350","351","352","353"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\student-profile\\Label.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\checkValidation.js",[],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\JobsCard\\JobsCard.js",["354","355","356"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\FresherJobCard\\FresherJobCard.js",["357","358"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\utils\\UI\\InternshipCard\\InternshipCard.js",["359","360","361"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipByCompany.js",["362","363","364"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport \"./AllInternships.css\";\r\nimport { UserContext } from \"../../App\";\r\nimport InternshipCard from \"../../utils/UI/InternshipCard/InternshipCard\";\r\n\r\nconst InternshipsByCompany = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [internships, setInternships] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { companyName } = useParams();\r\n\r\n  console.log(internships);\r\n  console.log(state);\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/companyName-internship/${companyName}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (internships && internships[4]) {\r\n    console.log(internships[4]);\r\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-internship\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setInternships(res.data.internships);\r\n          console.log(internships);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : internships && !internships.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100 \"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No internships available right now\r\n          </Alert>\r\n        ) : (\r\n          internships &&\r\n          internships.map((internship) => {\r\n            // console.log(internship.createdBy._id, state.user._id);\r\n            return (\r\n              <Col\r\n                key={internship._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <InternshipCard\r\n                  internship={internship}\r\n                  userId={state.user._id}\r\n                  deletePost={deletePost}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default InternshipsByCompany;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobsByCompanyName.js",["365","366"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport JobsCard from \"../../utils/UI/JobsCard/JobsCard\";\r\nimport { useParams } from \"react-router\";\r\n\r\nconst JobsByCompanyName = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { companyName } = useParams();\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: \"http://localhost:5000/user/all-jobs\",\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       if (res.data.error) {\r\n  //         console.log(res.data.error);\r\n  //         // alert(res.data.error);\r\n  //         const notify = () => toast(res.data.error);\r\n  //         notify();\r\n  //       } else {\r\n  //         // if (res && res.data) {\r\n  //           console.log(res.data.jobs);\r\n  //           setJobs(res.data.jobs);\r\n  //           console.log(jobs);\r\n  //         // }\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(\"Error: \", err);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/job/companyName/${companyName}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          console.log(res.data.Jobs);\r\n\r\n          setJobs(res.data.Jobs);\r\n          console.log(jobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (jobs && jobs[4]) {\r\n    console.log(jobs[4]);\r\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-job\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : jobs && !jobs.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100\"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No Jobs available right now\r\n          </Alert>\r\n        ) : (\r\n          jobs &&\r\n          jobs.map((job) => {\r\n            return (\r\n              <Col\r\n                key={job._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <JobsCard\r\n                  job={job}\r\n                  deletePost={deletePost}\r\n                  key={job._id}\r\n                  userId={state.user._id}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default JobsByCompanyName;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByLocation.js",["367"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport FresherJobCard from \"../../utils/UI/FresherJobCard/FresherJobCard\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst FresherJobsGroupedByLocation = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/freshersjob/location\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.freshersJobs);\r\n          // console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Fresher Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        freshersJobs &&\r\n        freshersJobs.map((catefresher) => (\r\n          <div key={catefresher._id}>\r\n            <h1 className=\"parameter\">{catefresher._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catefresher.freshersJobs &&\r\n                catefresher.freshersJobs.map((fresher) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={fresher._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <FresherJobCard\r\n                        fresherjob={fresher}\r\n                        deletePost={deletePost}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default FresherJobsGroupedByLocation;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FreshersJobByCompanyName.js",["368","369","370"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Spinner,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport FresherJobCard from \"../../utils/UI/FresherJobCard/FresherJobCard\";\r\nimport { useParams } from \"react-router\";\r\nimport { CompareArrows } from \"@material-ui/icons\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst FreshersJobByCompanyName = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { companyName } = useParams();\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/freshersJob/companyName/${companyName}`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          // console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.FreshersJobs);\r\n          // console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, [freshersJobs]);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n        {loading ? (\r\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n            <Spinner\r\n              animation=\"border\"\r\n              variant=\"light\"\r\n              style={{\r\n                borderColor: \"#515b66\",\r\n                borderRightColor: \"transparent\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n          <Alert\r\n            variant=\"danger\"\r\n            className=\"w-100\"\r\n            style={{\r\n              backgroundColor: \"#343A40\",\r\n              border: \"none\",\r\n              color: \"#ffc107\",\r\n            }}\r\n          >\r\n            No Fresher Jobs available right now\r\n          </Alert>\r\n        ) : (\r\n          freshersJobs &&\r\n          freshersJobs.map((fresher) => {\r\n            return (\r\n              <Col\r\n                key={fresher._id}\r\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n              >\r\n                <FresherJobCard\r\n                  fresherjob={fresher}\r\n                  deletePost={deletePost}\r\n                  userId={state.user._id}\r\n                />\r\n              </Col>\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default FreshersJobByCompanyName;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Internships\\InternshipCompanyNames.js",["371","372","373","374","375","376"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nconst InternshipCompanyName = () => {\r\n  const history = useHistory();\r\n  const [names, setNames] = useState();\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/companyName-internship`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          //   const notify = () => toast(res.data.error);\r\n          //   notify();\r\n        } else {\r\n          console.log(res.data.internships);\r\n          setNames(res.data.internships);\r\n          console.log(names);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  console.log(names);\r\n  return (\r\n    <div>\r\n      <h1 className=\"companyHeading\">Internships</h1>\r\n      <Row>\r\n        {names &&\r\n          names.map((name) => (\r\n            <Col className=\"col-10 col-md-6 COMPANYNAME\">\r\n              <div\r\n                className=\"NAME-company\"\r\n                onClick={() =>\r\n                  history.push(`/companyName-internship/${name._id}`)\r\n                }\r\n              >\r\n                {name._id}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InternshipCompanyName;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FresherJobsGroupedByStream.js",["377"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nimport \"../Internships/AllInternships.css\";\r\nimport FresherJobCard from \"../../utils/UI/FresherJobCard/FresherJobCard\";\r\n// import { Alert } from \"bootstrap\";\r\n\r\nconst FresherJobsGroupedByStream = () => {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [freshersJobs, setFreshersJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const deletePost = (postId) => {\r\n    axios({\r\n      method: \"delete\",\r\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\r\n      data: {\r\n        postId,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.jobs);\r\n          // setJobs(res.data.jobs);\r\n          // console.log(jobs);\r\n          window.location.reload(false);\r\n          const notify = () => toast(res.data.message);\r\n          notify();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:5000/user/freshersjob/stream\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setLoading(false);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          const notify = () => toast(res.data.error);\r\n          notify();\r\n        } else {\r\n          // console.log(res.data.freshersjobs);\r\n          setFreshersJobs(res.data.freshersjobs);\r\n          // console.log(freshersJobs);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  if (freshersJobs && freshersJobs[4]) {\r\n    console.log(freshersJobs[4]);\r\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\r\n    console.log(t);\r\n  }\r\n\r\n  return (\r\n    <div className=\"internshipsOuterContainer\">\r\n      <Toaster />\r\n      {loading ? (\r\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"light\"\r\n            style={{\r\n              borderColor: \"#515b66\",\r\n              borderRightColor: \"transparent\",\r\n            }}\r\n          />\r\n        </div>\r\n      ) : freshersJobs && !freshersJobs.length > 0 ? (\r\n        <Alert\r\n          variant=\"danger\"\r\n          className=\"w-100\"\r\n          style={{\r\n            backgroundColor: \"#343A40\",\r\n            border: \"none\",\r\n            color: \"#ffc107\",\r\n          }}\r\n        >\r\n          No Fresher Jobs available right now\r\n        </Alert>\r\n      ) : (\r\n        freshersJobs &&\r\n        freshersJobs.map((catefresher) => (\r\n          <div key={catefresher._id}>\r\n            <h1 className=\"parameter\">{catefresher._id}</h1>\r\n            <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\r\n              {catefresher.freshersjobs &&\r\n                catefresher.freshersjobs.map((fresher) => {\r\n                  // console.log(internship.createdBy._id, state.user._id);\r\n                  return (\r\n                    <Col\r\n                      key={fresher._id}\r\n                      className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\r\n                    >\r\n                      <FresherJobCard\r\n                        fresherjob={fresher}\r\n                        deletePost={deletePost}\r\n                        userId={state.user._id}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default FresherJobsGroupedByStream;\r\n","D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\Jobs\\JobCompanyName.js",["378","379","380","381","382","383"],"D:\\WebD\\easyJobIntern\\easy-job-intern\\src\\components\\FreshersJob\\FreshersJobCompanyName.js",["384","385","386","387","388","389"],"import axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nconst FreshersJobCompanyName = () => {\r\n  const history = useHistory();\r\n  const [names, setNames] = useState();\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://localhost:5000/user/companyName-freshersjob`,\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.error) {\r\n          console.log(res.data.error);\r\n          // alert(res.data.error);\r\n          //   const notify = () => toast(res.data.error);\r\n          //   notify();\r\n        } else {\r\n          console.log(res.data.FreshersJobs);\r\n          setNames(res.data.FreshersJobs);\r\n          console.log(names);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // setLoading(false);\r\n        console.log(\"Error: \", err);\r\n      });\r\n  }, []);\r\n\r\n  console.log(names);\r\n  return (\r\n    <div>\r\n      <h1 className=\"companyHeading\">Fresher's Jobs</h1>\r\n      <Row>\r\n        {names &&\r\n          names.map((name) => (\r\n            <Col className=\"col-10 col-md-6 COMPANYNAME\">\r\n              <div\r\n                className=\"NAME-company\"\r\n                onClick={() =>\r\n                  history.push(`/freshers/companyName/${name._id}`)\r\n                }\r\n              >\r\n                {name._id}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreshersJobCompanyName;\r\n",{"ruleId":"390","replacedBy":"391"},{"ruleId":"392","replacedBy":"393"},{"ruleId":"394","severity":1,"message":"395","line":49,"column":10,"nodeType":"396","messageId":"397","endLine":49,"endColumn":21},{"ruleId":"394","severity":1,"message":"395","line":84,"column":10,"nodeType":"396","messageId":"397","endLine":84,"endColumn":21},{"ruleId":"394","severity":1,"message":"395","line":114,"column":10,"nodeType":"396","messageId":"397","endLine":114,"endColumn":21},{"ruleId":"394","severity":1,"message":"395","line":48,"column":10,"nodeType":"396","messageId":"397","endLine":48,"endColumn":21},{"ruleId":"394","severity":1,"message":"398","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":18},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"401","line":6,"column":8,"nodeType":"396","messageId":"397","endLine":6,"endColumn":18},{"ruleId":"394","severity":1,"message":"402","line":7,"column":8,"nodeType":"396","messageId":"397","endLine":7,"endColumn":18},{"ruleId":"394","severity":1,"message":"403","line":8,"column":8,"nodeType":"396","messageId":"397","endLine":8,"endColumn":15},{"ruleId":"394","severity":1,"message":"404","line":9,"column":8,"nodeType":"396","messageId":"397","endLine":9,"endColumn":13},{"ruleId":"394","severity":1,"message":"405","line":11,"column":8,"nodeType":"396","messageId":"397","endLine":11,"endColumn":13},{"ruleId":"394","severity":1,"message":"395","line":98,"column":10,"nodeType":"396","messageId":"397","endLine":98,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":124,"column":6,"nodeType":"408","endLine":124,"endColumn":8,"suggestions":"409"},{"ruleId":"394","severity":1,"message":"395","line":98,"column":10,"nodeType":"396","messageId":"397","endLine":98,"endColumn":21},{"ruleId":"406","severity":1,"message":"410","line":182,"column":6,"nodeType":"408","endLine":182,"endColumn":8,"suggestions":"411"},{"ruleId":"394","severity":1,"message":"395","line":98,"column":10,"nodeType":"396","messageId":"397","endLine":98,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":124,"column":6,"nodeType":"408","endLine":124,"endColumn":8,"suggestions":"412"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"406","severity":1,"message":"414","line":43,"column":6,"nodeType":"408","endLine":43,"endColumn":8,"suggestions":"415"},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"413","line":13,"column":18,"nodeType":"396","messageId":"397","endLine":13,"endColumn":26},{"ruleId":"406","severity":1,"message":"417","line":46,"column":6,"nodeType":"408","endLine":46,"endColumn":8,"suggestions":"418"},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"413","line":13,"column":18,"nodeType":"396","messageId":"397","endLine":13,"endColumn":26},{"ruleId":"406","severity":1,"message":"419","line":46,"column":6,"nodeType":"408","endLine":46,"endColumn":8,"suggestions":"420"},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"413","line":13,"column":18,"nodeType":"396","messageId":"397","endLine":13,"endColumn":26},{"ruleId":"406","severity":1,"message":"421","line":46,"column":6,"nodeType":"408","endLine":46,"endColumn":8,"suggestions":"422"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"406","severity":1,"message":"414","line":45,"column":6,"nodeType":"408","endLine":45,"endColumn":8,"suggestions":"423"},{"ruleId":"394","severity":1,"message":"424","line":52,"column":11,"nodeType":"396","messageId":"397","endLine":52,"endColumn":12},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"406","severity":1,"message":"414","line":45,"column":6,"nodeType":"408","endLine":45,"endColumn":8,"suggestions":"425"},{"ruleId":"394","severity":1,"message":"424","line":52,"column":11,"nodeType":"396","messageId":"397","endLine":52,"endColumn":12},{"ruleId":"394","severity":1,"message":"413","line":11,"column":18,"nodeType":"396","messageId":"397","endLine":11,"endColumn":26},{"ruleId":"406","severity":1,"message":"426","line":69,"column":6,"nodeType":"408","endLine":69,"endColumn":8,"suggestions":"427"},{"ruleId":"394","severity":1,"message":"428","line":4,"column":3,"nodeType":"396","messageId":"397","endLine":4,"endColumn":7},{"ruleId":"394","severity":1,"message":"429","line":6,"column":3,"nodeType":"396","messageId":"397","endLine":6,"endColumn":11},{"ruleId":"394","severity":1,"message":"430","line":7,"column":3,"nodeType":"396","messageId":"397","endLine":7,"endColumn":12},{"ruleId":"394","severity":1,"message":"431","line":8,"column":3,"nodeType":"396","messageId":"397","endLine":8,"endColumn":16},{"ruleId":"394","severity":1,"message":"400","line":15,"column":13,"nodeType":"396","messageId":"397","endLine":15,"endColumn":17},{"ruleId":"394","severity":1,"message":"413","line":21,"column":18,"nodeType":"396","messageId":"397","endLine":21,"endColumn":26},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"406","severity":1,"message":"414","line":45,"column":6,"nodeType":"408","endLine":45,"endColumn":8,"suggestions":"432"},{"ruleId":"394","severity":1,"message":"424","line":49,"column":11,"nodeType":"396","messageId":"397","endLine":49,"endColumn":12},{"ruleId":"394","severity":1,"message":"413","line":11,"column":18,"nodeType":"396","messageId":"397","endLine":11,"endColumn":26},{"ruleId":"406","severity":1,"message":"426","line":69,"column":6,"nodeType":"408","endLine":69,"endColumn":8,"suggestions":"433"},{"ruleId":"394","severity":1,"message":"413","line":11,"column":18,"nodeType":"396","messageId":"397","endLine":11,"endColumn":26},{"ruleId":"406","severity":1,"message":"426","line":69,"column":6,"nodeType":"408","endLine":69,"endColumn":8,"suggestions":"434"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"404","line":9,"column":8,"nodeType":"396","messageId":"397","endLine":9,"endColumn":13},{"ruleId":"394","severity":1,"message":"435","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":14},{"ruleId":"394","severity":1,"message":"405","line":11,"column":8,"nodeType":"396","messageId":"397","endLine":11,"endColumn":13},{"ruleId":"394","severity":1,"message":"436","line":2,"column":8,"nodeType":"396","messageId":"397","endLine":2,"endColumn":17},{"ruleId":"394","severity":1,"message":"437","line":3,"column":8,"nodeType":"396","messageId":"397","endLine":3,"endColumn":17},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":8,"column":8,"nodeType":"396","messageId":"397","endLine":8,"endColumn":12},{"ruleId":"394","severity":1,"message":"436","line":2,"column":8,"nodeType":"396","messageId":"397","endLine":2,"endColumn":17},{"ruleId":"394","severity":1,"message":"437","line":3,"column":8,"nodeType":"396","messageId":"397","endLine":3,"endColumn":17},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":8,"column":8,"nodeType":"396","messageId":"397","endLine":8,"endColumn":12},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"405","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":13},{"ruleId":"394","severity":1,"message":"438","line":20,"column":13,"nodeType":"396","messageId":"397","endLine":20,"endColumn":25},{"ruleId":"394","severity":1,"message":"436","line":2,"column":8,"nodeType":"396","messageId":"397","endLine":2,"endColumn":17},{"ruleId":"394","severity":1,"message":"437","line":3,"column":8,"nodeType":"396","messageId":"397","endLine":3,"endColumn":17},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":8,"column":8,"nodeType":"396","messageId":"397","endLine":8,"endColumn":12},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"405","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":13},{"ruleId":"394","severity":1,"message":"438","line":20,"column":13,"nodeType":"396","messageId":"397","endLine":20,"endColumn":25},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"405","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":13},{"ruleId":"394","severity":1,"message":"438","line":20,"column":13,"nodeType":"396","messageId":"397","endLine":20,"endColumn":25},{"ruleId":"394","severity":1,"message":"399","line":4,"column":8,"nodeType":"396","messageId":"397","endLine":4,"endColumn":14},{"ruleId":"394","severity":1,"message":"400","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":12},{"ruleId":"394","severity":1,"message":"405","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":13},{"ruleId":"394","severity":1,"message":"438","line":20,"column":13,"nodeType":"396","messageId":"397","endLine":20,"endColumn":25},{"ruleId":"394","severity":1,"message":"439","line":7,"column":17,"nodeType":"396","messageId":"397","endLine":7,"endColumn":24},{"ruleId":"394","severity":1,"message":"413","line":10,"column":18,"nodeType":"396","messageId":"397","endLine":10,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":182,"column":11,"nodeType":"442","endLine":182,"endColumn":50},{"ruleId":"394","severity":1,"message":"413","line":8,"column":18,"nodeType":"396","messageId":"397","endLine":8,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":144,"column":11,"nodeType":"442","endLine":144,"endColumn":50},{"ruleId":"394","severity":1,"message":"439","line":7,"column":17,"nodeType":"396","messageId":"397","endLine":7,"endColumn":24},{"ruleId":"394","severity":1,"message":"413","line":10,"column":18,"nodeType":"396","messageId":"397","endLine":10,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":193,"column":13,"nodeType":"442","endLine":193,"endColumn":52},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"413","line":13,"column":18,"nodeType":"396","messageId":"397","endLine":13,"endColumn":26},{"ruleId":"406","severity":1,"message":"443","line":46,"column":6,"nodeType":"408","endLine":46,"endColumn":8,"suggestions":"444"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"406","severity":1,"message":"445","line":71,"column":6,"nodeType":"408","endLine":71,"endColumn":8,"suggestions":"446"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"394","severity":1,"message":"447","line":15,"column":10,"nodeType":"396","messageId":"397","endLine":15,"endColumn":23},{"ruleId":"394","severity":1,"message":"413","line":19,"column":18,"nodeType":"396","messageId":"397","endLine":19,"endColumn":26},{"ruleId":"406","severity":1,"message":"448","line":81,"column":6,"nodeType":"408","endLine":81,"endColumn":20,"suggestions":"449"},{"ruleId":"394","severity":1,"message":"450","line":2,"column":17,"nodeType":"396","messageId":"397","endLine":2,"endColumn":27},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"451","line":3,"column":28,"nodeType":"396","messageId":"397","endLine":3,"endColumn":37},{"ruleId":"394","severity":1,"message":"452","line":4,"column":20,"nodeType":"396","messageId":"397","endLine":4,"endColumn":27},{"ruleId":"394","severity":1,"message":"453","line":4,"column":29,"nodeType":"396","messageId":"397","endLine":4,"endColumn":34},{"ruleId":"406","severity":1,"message":"454","line":34,"column":6,"nodeType":"408","endLine":34,"endColumn":8,"suggestions":"455"},{"ruleId":"394","severity":1,"message":"413","line":12,"column":18,"nodeType":"396","messageId":"397","endLine":12,"endColumn":26},{"ruleId":"394","severity":1,"message":"450","line":2,"column":17,"nodeType":"396","messageId":"397","endLine":2,"endColumn":27},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"451","line":3,"column":28,"nodeType":"396","messageId":"397","endLine":3,"endColumn":37},{"ruleId":"394","severity":1,"message":"452","line":4,"column":20,"nodeType":"396","messageId":"397","endLine":4,"endColumn":27},{"ruleId":"394","severity":1,"message":"453","line":4,"column":29,"nodeType":"396","messageId":"397","endLine":4,"endColumn":34},{"ruleId":"406","severity":1,"message":"454","line":34,"column":6,"nodeType":"408","endLine":34,"endColumn":8,"suggestions":"456"},{"ruleId":"394","severity":1,"message":"450","line":2,"column":17,"nodeType":"396","messageId":"397","endLine":2,"endColumn":27},{"ruleId":"394","severity":1,"message":"416","line":3,"column":10,"nodeType":"396","messageId":"397","endLine":3,"endColumn":14},{"ruleId":"394","severity":1,"message":"451","line":3,"column":28,"nodeType":"396","messageId":"397","endLine":3,"endColumn":37},{"ruleId":"394","severity":1,"message":"452","line":4,"column":20,"nodeType":"396","messageId":"397","endLine":4,"endColumn":27},{"ruleId":"394","severity":1,"message":"453","line":4,"column":29,"nodeType":"396","messageId":"397","endLine":4,"endColumn":34},{"ruleId":"406","severity":1,"message":"454","line":34,"column":6,"nodeType":"408","endLine":34,"endColumn":8,"suggestions":"457"},"no-native-reassign",["458"],"no-negated-in-lhs",["459"],"no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'job' and 'postId'. Either include them or remove the dependency array.","ArrayExpression",["460"],"React Hook useEffect has missing dependencies: 'internship' and 'postId'. Either include them or remove the dependency array.",["461"],["462"],"'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'internships'. Either include it or remove the dependency array.",["463"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'industry' and 'internships'. Either include them or remove the dependency array.",["464"],"React Hook useEffect has missing dependencies: 'internships' and 'stream'. Either include them or remove the dependency array.",["465"],"React Hook useEffect has missing dependencies: 'internships' and 'location'. Either include them or remove the dependency array.",["466"],["467"],"'t' is assigned a value but never used.",["468"],"React Hook useEffect has a missing dependency: 'jobs'. Either include it or remove the dependency array.",["469"],"'Card' is defined but never used.","'Dropdown' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.",["470"],["471"],["472"],"'Skills' is defined but never used.","'Container' is defined but never used.","'TextField' is defined but never used.","'handleSubmit' is assigned a value but never used.","'Toaster' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'companyName' and 'internships'. Either include them or remove the dependency array.",["473"],"React Hook useEffect has missing dependencies: 'companyName' and 'jobs'. Either include them or remove the dependency array.",["474"],"'CompareArrows' is defined but never used.","React Hook useEffect has a missing dependency: 'companyName'. Either include it or remove the dependency array.",["475"],"'useContext' is defined but never used.","'useParams' is defined but never used.","'Spinner' is defined but never used.","'Alert' is defined but never used.","React Hook useEffect has a missing dependency: 'names'. Either include it or remove the dependency array.",["476"],["477"],["478"],"no-global-assign","no-unsafe-negation",{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"479","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"484","fix":"492"},{"desc":"484","fix":"493"},{"desc":"494","fix":"495"},{"desc":"484","fix":"496"},{"desc":"494","fix":"497"},{"desc":"494","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"505","fix":"507"},{"desc":"505","fix":"508"},"Update the dependencies array to be: [job, postId]",{"range":"509","text":"510"},"Update the dependencies array to be: [internship, postId]",{"range":"511","text":"512"},{"range":"513","text":"510"},"Update the dependencies array to be: [internships]",{"range":"514","text":"515"},"Update the dependencies array to be: [industry, internships]",{"range":"516","text":"517"},"Update the dependencies array to be: [internships, stream]",{"range":"518","text":"519"},"Update the dependencies array to be: [internships, location]",{"range":"520","text":"521"},{"range":"522","text":"515"},{"range":"523","text":"515"},"Update the dependencies array to be: [jobs]",{"range":"524","text":"525"},{"range":"526","text":"515"},{"range":"527","text":"525"},{"range":"528","text":"525"},"Update the dependencies array to be: [companyName, internships]",{"range":"529","text":"530"},"Update the dependencies array to be: [companyName, jobs]",{"range":"531","text":"532"},"Update the dependencies array to be: [companyName, freshersJobs]",{"range":"533","text":"534"},"Update the dependencies array to be: [names]",{"range":"535","text":"536"},{"range":"537","text":"536"},{"range":"538","text":"536"},[2938,2940],"[job, postId]",[5514,5516],"[internship, postId]",[2953,2955],[1367,1369],"[internships]",[1476,1478],"[industry, internships]",[1468,1470],"[internships, stream]",[1476,1478],"[internships, location]",[1446,1448],[1442,1444],[2061,2063],"[jobs]",[1446,1448],[2079,2081],[2075,2077],[1484,1486],"[companyName, internships]",[2176,2178],"[companyName, jobs]",[2434,2448],"[companyName, freshersJobs]",[1070,1072],"[names]",[1042,1044],[1074,1076]]