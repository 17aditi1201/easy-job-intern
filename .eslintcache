[{"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/index.js":"1","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/reportWebVitals.js":"2","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/App.js":"3","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/reducers/userReducer.js":"4","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/privacy-policy/privacy-policy.js":"5","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/welcomeSignup/welcomeSignup.js":"6","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/terms-condition/terms-condition.js":"7","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/welcomeSignup/welcomeSignupEmployer.js":"8","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student/register.js":"9","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/navbar/navbar.js":"10","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/home/home.js":"11","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/employer/employerSignup.js":"12","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/contact-us/contact-us.js":"13","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/employer/employerSignin.js":"14","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Error/Error.js":"15","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/about-us/about-us.js":"16","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreateInternship.js":"17","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreateJob.js":"18","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/footer/footer.js":"19","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student/login.js":"20","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/utils/checkValidation.js":"21","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreatFreshersJob.js":"22","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Profile.js":"23","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Internships/AllInternships.js":"24","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Jobs/AllJobs.js":"25","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/FreshersJob/AllFresherJob.js":"26","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/JobUpdate.js":"27","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/FresherJobUpdate.js":"28","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/InternshipUpdate.js":"29","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Start.js":"30","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Education.js":"31","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Experience.js":"32","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Project.js":"33","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Other.js":"34","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Volunteer.js":"35","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Input.js":"36","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Achievments.js":"37","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Skills.js":"38","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Label.js":"39"},{"size":500,"mtime":1615881397434,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1615881397434,"results":"42","hashOfConfig":"41"},{"size":6974,"mtime":1618909445559,"results":"43","hashOfConfig":"41"},{"size":204,"mtime":1617901315524,"results":"44","hashOfConfig":"41"},{"size":1754,"mtime":1615881397434,"results":"45","hashOfConfig":"41"},{"size":807,"mtime":1618911226505,"results":"46","hashOfConfig":"41"},{"size":2196,"mtime":1615881397434,"results":"47","hashOfConfig":"41"},{"size":830,"mtime":1618904980429,"results":"48","hashOfConfig":"41"},{"size":17108,"mtime":1618906447625,"results":"49","hashOfConfig":"41"},{"size":6904,"mtime":1618906447625,"results":"50","hashOfConfig":"41"},{"size":10029,"mtime":1618906447625,"results":"51","hashOfConfig":"41"},{"size":13858,"mtime":1618912149887,"results":"52","hashOfConfig":"41"},{"size":6706,"mtime":1618906447621,"results":"53","hashOfConfig":"41"},{"size":8258,"mtime":1618906447621,"results":"54","hashOfConfig":"41"},{"size":375,"mtime":1618906447621,"results":"55","hashOfConfig":"41"},{"size":4007,"mtime":1618906447621,"results":"56","hashOfConfig":"41"},{"size":11256,"mtime":1618906447621,"results":"57","hashOfConfig":"41"},{"size":11105,"mtime":1618906447621,"results":"58","hashOfConfig":"41"},{"size":6942,"mtime":1618906447625,"results":"59","hashOfConfig":"41"},{"size":8153,"mtime":1618906447625,"results":"60","hashOfConfig":"41"},{"size":1808,"mtime":1618906447625,"results":"61","hashOfConfig":"41"},{"size":10210,"mtime":1618906447621,"results":"62","hashOfConfig":"41"},{"size":1215,"mtime":1618906447625,"results":"63","hashOfConfig":"41"},{"size":7744,"mtime":1618906447621,"results":"64","hashOfConfig":"41"},{"size":7849,"mtime":1618906447621,"results":"65","hashOfConfig":"41"},{"size":6951,"mtime":1618906447621,"results":"66","hashOfConfig":"41"},{"size":11381,"mtime":1618906447621,"results":"67","hashOfConfig":"41"},{"size":10533,"mtime":1618906447621,"results":"68","hashOfConfig":"41"},{"size":14227,"mtime":1618906447621,"results":"69","hashOfConfig":"41"},{"size":3327,"mtime":1618906447625,"results":"70","hashOfConfig":"41"},{"size":4409,"mtime":1618906447625,"results":"71","hashOfConfig":"41"},{"size":4119,"mtime":1618906447625,"results":"72","hashOfConfig":"41"},{"size":3734,"mtime":1618906447625,"results":"73","hashOfConfig":"41"},{"size":1979,"mtime":1618906447625,"results":"74","hashOfConfig":"41"},{"size":2032,"mtime":1618906447625,"results":"75","hashOfConfig":"41"},{"size":174,"mtime":1618906447625,"results":"76","hashOfConfig":"41"},{"size":2018,"mtime":1618906447625,"results":"77","hashOfConfig":"41"},{"size":1988,"mtime":1618906447625,"results":"78","hashOfConfig":"41"},{"size":194,"mtime":1618906447625,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"gl5x39",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"82"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"82"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/index.js",[],["178","179"],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/reportWebVitals.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/App.js",["180"],"import \"./App.css\";\nimport React from \"react\";\nimport NavBar from \"./components/navbar/navbar\";\nimport Footer from \"./components/footer/footer\";\nimport Home from \"./components/home/home\";\nimport Login from \"./components/student/login\";\nimport SignUp from \"./components/student/register\";\nimport EmployerSignup from \"./components/employer/employerSignup\";\nimport EmployerSignin from \"./components/employer/employerSignin\";\nimport ContactUs from \"./components/contact-us/contact-us\";\nimport AboutUs from \"./components/about-us/about-us\";\nimport PrivacyPolicy from \"./components/privacy-policy/privacy-policy\";\nimport TermsCondition from \"./components/terms-condition/terms-condition\";\nimport { BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Error from \"./components/Error/Error\";\nimport { createContext, useContext, useEffect, useReducer } from \"react\";\nimport { initialState, reducer } from \"./reducers/userReducer\";\nimport NewInternship from \"./components/CreateNew/CreateInternship\";\nimport NewJob from \"./components/CreateNew/CreateJob\";\n\nimport Profile from \"./components/student-profile/Profile\";\n\nimport AllInternships from \"./components/Internships/AllInternships\";\nimport AllJobs from \"./components/Jobs/AllJobs\";\nimport NewFreshersJob from \"./components/CreateNew/CreatFreshersJob\";\nimport AllFreshersJobs from \"./components/FreshersJob/AllFresherJob\";\nimport UpdateInternship from \"./components/UpdateForm/InternshipUpdate\";\nimport UpdateJob from \"./components/UpdateForm/JobUpdate\";\nimport UpdateFresherJob from \"./components/UpdateForm/FresherJobUpdate\";\nimport welcomeSignup from \"./components/welcomeSignup/welcomeSignup\";\nimport welcomeSignupEmployer from \"./components/welcomeSignup/welcomeSignupEmployer\";\n\nexport const UserContext = createContext();\n\nconst Routing = () => {\n  const { state, dispatch } = useContext(UserContext);\n\n  let routes;\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const type = JSON.parse(localStorage.getItem(\"type\"));\n    console.log(type);\n    if (user) {\n      dispatch({ type: \"USER\", payload: { user: user, userType: type } });\n    }\n  }, [dispatch]);\n\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact compo>\n        <Home />\n      </Route>\n      <Route path=\"/student-login\" exact>\n        <Login />\n      </Route>\n      <Route path=\"/student-signup\" exact>\n        <SignUp />\n      </Route>\n      <Route path=\"/employer-signup\" exact>\n        <EmployerSignup />\n      </Route>\n      <Route path=\"/employer-login\" exact>\n        <EmployerSignin />\n      </Route>\n      <Route path=\"/create-internship\" exact>\n        <NewInternship />\n      </Route>\n      <Route path=\"/create-job\" exact>\n        <NewJob />\n      </Route>\n      <Route path=\"/about-us\" exact>\n        <AboutUs />\n      </Route>\n      <Route path=\"/contact-us\" exact>\n        <ContactUs />\n      </Route>\n      <Route path=\"/privacy-policy\" exact>\n        <PrivacyPolicy />\n      </Route>\n      <Route path=\"/terms-conditions\" exact>\n        <TermsCondition />\n      </Route>\n      <Route exact path=\"/login/student-profile\">\n        <Profile/>\n      </Route>\n      <Route path=\"/confirm/employer/:confirmationCode\" component={welcomeSignupEmployer} exact/>\n      <Route path=\"/confirm/:confirmationCode\" component={welcomeSignup} exact/>\n\n      <Route component={Error} />\n    </Switch>\n  );\n\n  console.log(state);\n\n  if (state) {\n    if (state.userType === \"employee\") {\n      routes = (\n        <Switch>\n          <Route path=\"/\" exact compo>\n            <Home />\n          </Route>\n          <Route path=\"/create-internship\" exact>\n            <NewInternship />\n          </Route>\n          <Route path=\"/create-job\" exact>\n            <NewJob />\n          </Route>\n          <Route path=\"/create-freshersjob\" exact>\n            <NewFreshersJob />\n          </Route>\n          <Route path=\"/update-internship/:id\" >\n            <UpdateInternship />\n          </Route>\n          <Route path=\"/update-job/:id\" >\n            <UpdateJob />\n          </Route>\n          <Route path=\"/update-fresher/:id\" >\n            <UpdateFresherJob />\n          </Route>\n          <Route path=\"/all-internships\" exact>\n            <AllInternships />\n          </Route>\n          <Route path=\"/all-jobs\" exact>\n            <AllJobs />\n          </Route>\n          <Route path=\"/all-freshersjobs\" exact>\n            <AllFreshersJobs />\n          </Route>\n          <Route path=\"/about-us\" exact>\n            <AboutUs />\n          </Route>\n          <Route path=\"/contact-us\" exact>\n            <ContactUs />\n          </Route>\n          <Route path=\"/privacy-policy\" exact>\n            <PrivacyPolicy />\n          </Route>\n          <Route path=\"/terms-conditions\" exact>\n            <TermsCondition />\n          </Route>\n          <Route component={Error} />\n        </Switch>\n      );\n    } else {\n      routes = (\n        <Switch>\n          <Route path=\"/\" exact compo>\n            <Home />\n          </Route>\n          <Route path=\"/about-us\" exact>\n            <AboutUs />\n          </Route>\n          <Route path=\"/contact-us\" exact>\n            <ContactUs />\n          </Route>\n          <Route path=\"/privacy-policy\" exact>\n            <PrivacyPolicy />\n          </Route>\n          <Route path=\"/terms-conditions\" exact>\n            <TermsCondition />\n          </Route>\n          <Route path=\"/all-internships\" exact>\n            <AllInternships />\n          </Route>\n          <Route path=\"/all-jobs\" exact>\n            <AllJobs />\n          </Route>\n          <Route path=\"/all-freshersjobs\" exact>\n            <AllFreshersJobs />\n          </Route>\n          <Route component={Error} />\n        </Switch>\n      );\n    }\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact compo>\n          <Home />\n        </Route>\n        <Route path=\"/student-login\" exact>\n          <Login />\n        </Route>\n        <Route path=\"/student-signup\" exact>\n          <SignUp />\n        </Route>\n        <Route path=\"/employer-signup\" exact>\n          <EmployerSignup />\n        </Route>\n        <Route path=\"/employer-login\" exact>\n          <EmployerSignin />\n        </Route>\n        <Route path=\"/about-us\" exact>\n          <AboutUs />\n        </Route>\n        <Route path=\"/contact-us\" exact>\n          <ContactUs />\n        </Route>\n        <Route path=\"/privacy-policy\" exact>\n          <PrivacyPolicy />\n        </Route>\n        <Route path=\"/terms-conditions\" exact>\n          <TermsCondition />\n        </Route>\n        <Route component={Error} />\n      </Switch>\n    );\n  }\n\n  return routes;\n\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <UserContext.Provider value={{ state, dispatch }}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <NavBar />\n          <main>\n            <Routing />\n          </main>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/reducers/userReducer.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/privacy-policy/privacy-policy.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/welcomeSignup/welcomeSignup.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/terms-condition/terms-condition.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/welcomeSignup/welcomeSignupEmployer.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student/register.js",["181"],"import React, { useState } from \"react\";\nimport { Button, Form, Card, InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport \"./register.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst StudentSignup = () => {\n  const history = useHistory();\n  //creating a dicitionary for every field of the form\n  const initialState = {\n    personName: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        minLength: 5,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n    email: {\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n        checkPassword: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n    contact: {\n      value: \"\",\n      validation: {\n        required: true,\n        Length: 10,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    degree: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    institutionName: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    branch: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    year: {\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [signupError, setSignupError] = useState(null);\n\n  const [formIsValid ,setFormIsValid] = useState(false); //boolean to check that the whole form is valid or not\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const passwordIsValidChecker = () => {\n    const { password, passwordConfirmation } = formValues;\n    return password.value === passwordConfirmation.value;\n  };\n\n  const submitSignup = (e) => {\n    const {\n      personName,\n      email,\n      password,\n      passwordConfirmation,\n      contact,\n      branch,\n      year,\n      degree,\n      institutionName,\n    } = formValues;\n\n    e.preventDefault();\n    if (!passwordIsValidChecker()) {\n      setSignupError(\"Passwords do not match\");\n      return;\n    } else {\n      axios\n        .post(\"http://localhost:5000/student/signup\", {\n          personName: personName.value,\n          email: email.value,\n          password: password.value,\n          contact: contact.value,\n          passwordConfirmation: passwordConfirmation.value,\n          branch: branch.value,\n          year: year.value,\n          degree: degree.value,\n          institutionName: institutionName.value,\n        })\n        .then((res) => {\n          console.log(res.data.user);\n          // alert(res.data.message);\n          const notify = () => toast(res.data.message);\n          notify();\n          if(res.data.user){\n            history.pushState(\"/student-login\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    setFormValues(initialState);\n  };\n  const togglePasswordVisiblity = () => { // to handle visibility of passsword \n    \n      setFormValues({...formValues, showPassword: !(formValues.showPassword)});\n    \n  };\n\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #6EE2CD)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#6EE2CD\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Student Signup\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignup(e)}>\n              {/* Name of the student */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Name</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.personName.valid &&\n                    formValues.personName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  name=\"personName\"\n                  value={formValues.personName.value}\n                  onChange={handleChange}\n                />\n                {formValues.personName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.personName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Email address */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              {/*  Password */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n                <InputGroup>\n                <Form.Control\n                  className={`${\n                    !formValues.password.valid && formValues.password.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type={formValues.showPassword?\"text\":\"password\"}\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  value={formValues.password.value}\n                  onChange={handleChange}\n                />\n                {formValues.password.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.password.errorMessage}\n                  </span>\n                )}\n                <InputGroup.Append>\n                      <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\n                        <IconButton style={{width: \"25px\"}}\n                          onClick={togglePasswordVisiblity}\n                        >\n                          {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton> \n                      </InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n\n              {/* Confirm Password */}\n              <Form.Group\n                style={{ textAlign: \"left\", marginBottom: \"1.6vh\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Confirm Password\n                </Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    className={`${\n                      !formValues.passwordConfirmation.valid &&\n                      formValues.passwordConfirmation.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                    type=\"password\"\n                    placeholder=\"Re-enter Password\"\n                    name=\"passwordConfirmation\"\n                    value={formValues.passwordConfirmation.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.passwordConfirmation.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.passwordConfirmation.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text style={{borderColor: \"#ffc107\", color: \"#000000\", height: \"37px\", width: \"28px\", paddingLeft:\"1px\",paddingRight:\"1px\" }}>\n                      <IconButton style={{width: \"25px\"}}\n                          onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? <Visibility /> : <VisibilityOff />}\n                      </IconButton> \n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n\n              {/* Contact Number */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Contact</Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.contact.valid && formValues.contact.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"number\"\n                  placeholder=\"Enter your contact number\"\n                  name=\"contact\"\n                  value={formValues.contact.value}\n                  onChange={handleChange}\n                />\n                {formValues.contact.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.contact.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Degree */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Which degree you are pursuing?\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.degree.valid && formValues.degree.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter complete name of your degree\"\n                  name=\"degree\"\n                  value={formValues.degree.value}\n                  onChange={handleChange}\n                />\n                {formValues.degree.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.degree.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* College Name */}\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicName\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  College Name\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.institutionName.valid &&\n                    formValues.institutionName.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Your college name\"\n                  name=\"institutionName\"\n                  value={formValues.institutionName.value}\n                  onChange={handleChange}\n                />\n                {formValues.institutionName.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.institutionName.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Branch of study */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Field of study\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.branch.valid && formValues.branch.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your field of study\"\n                  name=\"branch\"\n                  value={formValues.branch.value}\n                  onChange={handleChange}\n                />\n                {formValues.branch.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.branch.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {/* Year of study */}\n              <Form.Group style={{ textAlign: \"left\" }}>\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Which year of college you are in?\n                </Form.Label>\n                <Form.Control\n                  className={`${\n                    !formValues.year.valid && formValues.year.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  style={{ borderColor: \"#6EE2CD\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter your college year\"\n                  name=\"year\"\n                  value={formValues.year.value}\n                  onChange={handleChange}\n                />\n                {formValues.year.errorMessage && (\n                  <span className=\"error\">{formValues.year.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              {/* Already a user? */}\n              <Form.Group style={{ textAlign: \"left\", fontSize: \"1.5vh\" }}>\n                <Link to=\"/student-login\">\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                    Already have an account? Sign in\n                  </a>\n                </Link>\n              </Form.Group>\n\n              {signupError ? (\n                <Form.Text\n                  style={{ paddingBottom: \"0.6vh\", fontWeight: \"bold\" }}\n                  className=\"text-danger\"\n                >\n                  {signupError}\n                </Form.Text>\n              ) : null}\n              <Button\n                style={{ color: \"#6EE2CD\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Register\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n};\nexport default StudentSignup;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/navbar/navbar.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/home/home.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/employer/employerSignup.js",["182"],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/contact-us/contact-us.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/employer/employerSignin.js",["183"],"import React, { useContext, useState } from \"react\";\nimport { Button, Card, Form,  InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport axios from \"axios\";\nimport \"./employer.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { UserContext } from \"../../App\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nfunction EmployerSignin() {\n  const { state, dispatch } = useContext(UserContext);\n  const history = useHistory();\n\n  const initialState = {\n    email: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n  };\n  const [formValues, setFormValues] = useState(initialState);\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitSignin = (e) => {\n    e.preventDefault();\n    const { email, password } = formValues;\n    axios\n      .post(\"http://localhost:5000/employer/signin\", {\n        email: email.value,\n        password: password.value,\n      })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          // toast(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          localStorage.setItem(\"jwt\", res.data.token);\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n          localStorage.setItem(\"type\", JSON.stringify(\"employee\"))\n          dispatch({ type: \"USER\", payload: {user: res.data.user , userType: \"employee\"} });\n          console.log(state);\n          console.log(\n            \"Token: \",\n            res.data.token,\n            \"User Details: \",\n            res.data.user\n          );\n          // alert(\"Signin Successfull\");\n          // toast(\"Signin Successfull\");\n          const notify = () => toast('Signin Successfull');\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n    setFormValues(initialState);\n  };\n\n  const togglePasswordVisiblity = () => {\n    // to handle visibility of passsword\n\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\n  };\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"employer_form_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Employer Signin\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignin(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n\n                <InputGroup>\n                  <Form.Control\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                    type={formValues.showPassword ? \"text\" : \"password\"}\n                    className={`${\n                      !formValues.password.valid && formValues.password.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={formValues.password.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.password.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.password.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#ffc107\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n\n                <Form.Group\n                  style={{\n                    textAlign: \"left\",\n                    fontSize: \"1.5vh\",\n                    marginTop: \"10px\",\n                  }}\n                >\n                  <Link to=\"/employer-signup\">\n                    <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                      Don't have an account? Sign up\n                    </a>\n                  </Link>\n                </Form.Group>\n              </Form.Group>\n              <Button\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Signin\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n}\n\nexport default EmployerSignin;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Error/Error.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/about-us/about-us.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreateInternship.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreateJob.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/footer/footer.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student/login.js",["184"],"import React, { useContext, useState } from \"react\";\nimport { Button, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\nimport axios from \"axios\";\nimport \"./register.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { UserContext } from \"../../App\";\nimport toast, { Toaster } from 'react-hot-toast';\n\nfunction LoginForm() {\n  const { dispatch } = useContext(UserContext);\n  const history = useHistory();\n\n  //creating a dicitionary for every field of the form\n  const initialState = {\n    email: {\n      //value of the input field\n      value: \"\",\n      //rules to check while validating the input\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      //error messages to show in case any validation rule is not followed\n      errorMessage: \"\",\n      // boolean value to check if the whole input field is valid or not\n      valid: false,\n      //boolean value to check if the input field is touched or not\n      touched: false,\n    },\n\n    password: {\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 8,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    showPassword: false,\n  };\n  const [formValues, setFormValues] = useState(initialState);\n\n  const [formIsValid ,setFormIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      updatedFormValues.password.value\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitSignin = (e) => {\n    e.preventDefault();\n    const { email, password } = formValues;\n    axios\n      .post(\"http://localhost:5000/student/signin\", {\n        email: email.value,\n        password: password.value,\n      })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          localStorage.setItem(\"jwt\", res.data.token);\n          localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n          localStorage.setItem(\"type\", JSON.stringify(\"student\"));\n          dispatch({ type: \"USER\", payload: { user: res.data.user , userType: \"student\"} });\n          console.log(\n            \"Token: \",\n            res.data.token,\n            \"User Details: \",\n            res.data.user\n          );\n          // alert(\"Signin Successfull\");\n          const notify = () => toast(\"Signin Successfull\");\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n    setFormValues(initialState);\n  };\n\n  const togglePasswordVisiblity = () => {\n    // to handle visibility of passsword\n\n    setFormValues({ ...formValues, showPassword: !formValues.showPassword });\n  };\n  return (\n    <>\n      <div style={{ padding: \"4vh 0\" }}>\n        <Toaster />\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Student Signin\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitSignin(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Email address\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  className={`${\n                    !formValues.email.valid && formValues.email.touched\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={formValues.email.value}\n                  onChange={handleChange}\n                />\n                {formValues.email.errorMessage && (\n                  <span className=\"error\">{formValues.email.errorMessage}</span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicPassword\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Password</Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                    type={formValues.showPassword ? \"text\" : \"password\"}\n                    className={`${\n                      !formValues.password.valid && formValues.password.touched\n                        ? \"input-error\"\n                        : \"\"\n                    }`}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={formValues.password.value}\n                    onChange={handleChange}\n                  />\n                  {formValues.password.errorMessage && (\n                    <span className=\"error\">\n                      {formValues.password.errorMessage}\n                    </span>\n                  )}\n                  <InputGroup.Append>\n                    <InputGroup.Text\n                      style={{\n                        borderColor: \"#ffc107\",\n                        color: \"#000000\",\n                        height: \"37px\",\n                        width: \"28px\",\n                        paddingLeft: \"1px\",\n                        paddingRight: \"1px\",\n                      }}\n                    >\n                      <IconButton\n                        style={{ width: \"25px\" }}\n                        onClick={togglePasswordVisiblity}\n                      >\n                        {formValues.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group\n                style={{\n                  textAlign: \"left\",\n                  fontSize: \"1.5vh\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <Link to=\"/student-signup\">\n                  <a href=\"/#\" style={{ fontWeight: \"bold\" }}>\n                    Don't have an account? Sign up\n                  </a>\n                </Link>\n              </Form.Group>\n\n              <Button\n                style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                Signin\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n}\nexport default LoginForm;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/utils/checkValidation.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/CreateNew/CreatFreshersJob.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Profile.js",["185","186","187","188","189","190","191","192"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Skills from \"./Skills\"\nimport Input from \"./Input\";\nimport Achievments from \"./Achievments\";\nimport Volunteer from \"./Volunteer\";\nimport Other from \"./Other\";\nimport Project from \"./Project\";\nimport Experience from \"./Experience\";\nimport Education from \"./Education\";\nimport Start from \"./Start\";\n\nconst Profile=()=>\n{\n  \n\n   return(\n        <>\n        <h1 className=\"heading\">Student Profile Builder</h1>\n        <h6>Please Enter the details below to complete your student profile:-</h6>\n        <div className=\"main-box\">\n\n            <Start/>        \n            <Education/>\n            <Experience/>\n            <Project/>\n             <Skills/>\n             <Achievments/>\n             <Volunteer/>\n             <Other/>\n             \n\n\n          \n\n \n        </div>\n        <br/>\n\n        \n        </>\n   );\n    \n}\n\n\nexport default Profile;\n\n\n\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Internships/AllInternships.js",["193","194","195","196","197","198","199","200"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  Col,\n  Dropdown,\n  DropdownButton,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  Row,Spinner,Alert\n} from \"react-bootstrap\";\n\nimport toast, { Toaster } from \"react-hot-toast\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"./AllInternships.css\";\nimport { UserContext } from \"../../App\";\nimport { colors } from \"@material-ui/core\";\n\nconst AllInternships = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  console.log(internships);\n  console.log(state);\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-internships\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [internships]);\n\n  if (internships && internships[4]) {\n    console.log(internships[4]);\n    const t = new Date(internships[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const GettingDuration = (time) => {\n    const t = Math.floor(Number(time) / (3600 * 1000 * 24 * 30));\n    console.log(t);\n    return t > 1 ? t + \" Months\" : t + \" Month\";\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-internship\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internships);\n          setInternships(res.data.internships);\n          console.log(internships);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : internships && !internships.length > 0 ? (\n          <Alert variant=\"danger\" className=\"w-100 \" style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>\n            No internships available right now\n          </Alert>\n        ) : (\n          internships &&\n          internships.map((internship) => {\n            // console.log(internship.createdBy._id, state.user._id);\n            return (\n              <Col\n                key={internship._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {internship.companyName}{\" \"}\n                      {state &&\n                        internship.createdBy &&\n                        state.user._id == internship.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-internship/${internship._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(internship._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {internship.location}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {internship.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Stipend: {internship.stipend}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Duration: {GettingDuration(internship.duration)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(internship.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        End Date: {GettingMonth(internship.endDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(internship.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {internship.techstack &&\n                        internship.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllInternships;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/Jobs/AllJobs.js",["201","202","203"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Col,\n  Dropdown,\n  ListGroup,\n  ListGroupItem,\n  Row,Spinner,Alert\n} from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { UserContext } from \"../../App\";\nimport { Link } from \"react-router-dom\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"../Internships/AllInternships.css\";\n\nconst AllJobs = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [jobs, setJobs] = useState([]);\n  const [loading,setLoading]=useState(true)\n  // useEffect(() => {\n  //   axios({\n  //     method: \"get\",\n  //     url: \"http://localhost:5000/user/all-jobs\",\n  //     headers: {\n  //       Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n  //     },\n  //   })\n  //     .then((res) => {\n  //       console.log(res);\n  //       if (res.data.error) {\n  //         console.log(res.data.error);\n  //         // alert(res.data.error);\n  //         const notify = () => toast(res.data.error);\n  //         notify();\n  //       } else {\n  //         // if (res && res.data) {\n  //           console.log(res.data.jobs);\n  //           setJobs(res.data.jobs);\n  //           console.log(jobs);\n  //         // }\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"Error: \", err);\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-jobs\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false)\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.jobs);\n\n          setJobs(res.data.jobs);\n          console.log(jobs);\n        }\n      })\n      .catch((err) => {\n        setLoading(false)\n        console.log(\"Error: \", err);\n      });\n  }, [jobs]);\n\n  if (jobs && jobs[4]) {\n    console.log(jobs[4]);\n    const t = new Date(jobs[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-job\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // console.log(res.data.jobs);\n          // setJobs(res.data.jobs);\n          // console.log(jobs);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : jobs && !jobs.length > 0 ? (\n          <Alert variant=\"danger\" className=\"w-100\" style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>\n            No Jobs available right now\n          </Alert>\n        ) : (\n          jobs &&\n          jobs.map((job) => {\n            return (\n              <Col\n                key={job._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {job.companyName}{\" \"}\n                      {state &&\n                        job.createdBy &&\n                        state.user._id == job.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-job/${job._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(job._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {job.location}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {job.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Salary: {job.salary}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Work Experience: {job.experience && \"Atleast\"}{\" \"}\n                        {job.experience} {job.experience === 1 && \"year\"}{\" \"}\n                        {job.experience > 1 && \"years\"}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(job.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(job.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {job.techstack &&\n                        job.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllJobs;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/FreshersJob/AllFresherJob.js",["204","205"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Col,\n  Dropdown,\n  ListGroup,\n  ListGroupItem,\n  Row,\n  Spinner,Alert\n} from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { UserContext } from \"../../App\";\nimport * as Icon from \"react-bootstrap-icons\";\n\nimport \"../Internships/AllInternships.css\";\n// import { Alert } from \"bootstrap\";\n\nconst AllFreshersJobs = () => {\n  const { state, dispatch } = useContext(UserContext);\n  const [freshersJobs, setFreshersJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const deletePost = (postId) => {\n    axios({\n      method: \"delete\",\n      url: \"http://localhost:5000/employer/delete-freshersjob\",\n      data: {\n        postId,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // console.log(res.data.jobs);\n          // setJobs(res.data.jobs);\n          // console.log(jobs);\n          const notify = () => toast(res.data.message);\n          notify();\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:5000/user/all-freshersjobs\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        setLoading(false);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.freshersjobs);\n          setFreshersJobs(res.data.freshersjobs);\n          console.log(freshersJobs);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"Error: \", err);\n      });\n  }, [freshersJobs]);\n\n  if (freshersJobs && freshersJobs[4]) {\n    console.log(freshersJobs[4]);\n    const t = new Date(freshersJobs[4].startDate).toString(\"YYYY-MM-DD\");\n    console.log(t);\n  }\n\n  const GettingMonth = (date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const time =\n      monthNames[new Date(date).getMonth()] +\n      \", \" +\n      new Date(date).getFullYear();\n    return time;\n  };\n\n  const GettingDate = (date) => {\n    const time = new Date(date).getDate() + \" \" + GettingMonth(date);\n    return time;\n  };\n\n  return (\n    <div className=\"internshipsOuterContainer\">\n      <Toaster />\n      <Row className=\"justify-content-xl-start justify-content-lg-around justify-content-sm-center\">\n        {loading ? (\n          <div className=\"h-100 w-100 d-flex justify-content-center align-items-center\">\n            <Spinner\n              animation=\"border\"\n              variant=\"light\"\n              style={{\n                borderColor: \"#515b66\",\n                borderRightColor: \"transparent\",\n              }}\n            />\n          </div>\n        ) : freshersJobs && !freshersJobs.length > 0 ? (\n          <Alert variant=\"danger\" className='w-100' style={{backgroundColor:\"#343A40\",border:\"none\",color:\"#ffc107\"}}>No Fresher Jobs available right now</Alert>\n        ) : (\n          freshersJobs &&\n          freshersJobs.map((fresher) => {\n            return (\n              <Col\n                key={fresher._id}\n                className=\"col-xl-4 col-lg-5 col-md-6 col-sm-11 col-12 colPost\"\n              >\n                <Card className=\"cardPost\">\n                  <Card.Body>\n                    <Card.Title className=\"titleOfPost\">\n                      {fresher.companyName}\n                      {state &&\n                        fresher.createdBy &&\n                        state.user._id == fresher.createdBy._id && (\n                          <Dropdown className=\"postOptions\">\n                            <Dropdown.Toggle\n                              className=\"postOptionsBtn\"\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              <Icon.ThreeDotsVertical\n                                style={{ fontSize: \"1.4rem\" }}\n                              />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"optionMenu\">\n                              <Dropdown.Item\n                                className=\"optionItem\"\n                                href={`/update-fresher/${fresher._id}`}\n                              >\n                                <Icon.PencilSquare className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => deletePost(fresher._id)}\n                                className=\"optionItem\"\n                              >\n                                <Icon.Trash className=\"optionsMenuIcon\" />\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        )}\n                    </Card.Title>\n                    <Card.Subtitle className=\"subtitleOfPost\">\n                      {fresher.location}\n                    </Card.Subtitle>\n                    <Card.Text className=\"textPost\">\n                      {fresher.description}\n                    </Card.Text>\n                    <ListGroup>\n                      <ListGroupItem className=\"itemPost\">\n                        Salary: {fresher.salary}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost\">\n                        Start Date: {GettingMonth(fresher.startDate)}\n                      </ListGroupItem>\n                      <ListGroupItem className=\"itemPost last\">\n                        Last Date to Apply: {GettingDate(fresher.lastDate)}\n                      </ListGroupItem>\n                    </ListGroup>\n                    <div className=\"tech\">\n                      {fresher.techstack &&\n                        fresher.techstack.map((skill, i) => (\n                          <Card.Link key={i} className=\"TechStack\">\n                            {skill}\n                          </Card.Link>\n                        ))}\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })\n        )}\n      </Row>\n    </div>\n  );\n};\nexport default AllFreshersJobs;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/JobUpdate.js",["206","207"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateJob = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [job, setJob] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    salary: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    experience: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-job/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.job);\n          setJob(res.data.job);\n          console.log(job);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n\n    const {\n      description,\n      location,\n      salary,\n      techstack,\n      lastDate,\n      startDate,\n      experience,\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-job\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        salary: salary.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n        experience: experience.value,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {job && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Job\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || job.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || job.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter salary\"\n                  name=\"salary\"\n                  value={formValues.salary.value || job.salary}\n                  onChange={handleChange}\n                />\n                {formValues.salary.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.salary.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || job.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={formValues.lastDate.value || job.lastDate}\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={formValues.startDate.value || job.startDate}\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Experience\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"Number\"\n                  placeholder=\"Enter experince\"\n                  name=\"experience\"\n                  value={formValues.experience.value || job.experience}\n                  onChange={handleChange}\n                />\n                {formValues.experience.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.experience.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateJob;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/FresherJobUpdate.js",["208","209"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateFresherJob = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [job, setJob] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    salary: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    experience: {\n      value: null,\n      //   validation: {\n      //     required: true,\n      //   },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-freshersjob/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.job);\n          setJob(res.data.job);\n          console.log(job);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n\n    const {\n      description,\n      location,\n      salary,\n      techstack,\n      lastDate,\n      startDate,\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-fresherjob\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        salary: salary.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {job && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Fresher's Job\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || job.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || job.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>salary</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter salary\"\n                  name=\"salary\"\n                  value={formValues.salary.value || job.salary}\n                  onChange={handleChange}\n                />\n                {formValues.salary.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.salary.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || job.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={formValues.lastDate.value || job.lastDate}\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={formValues.startDate.value || job.startDate}\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateFresherJob;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/UpdateForm/InternshipUpdate.js",["210","211"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport checkValidity from \"../../utils/checkValidation\";\n\nconst UpdateInternship = () => {\n  const history = useHistory();\n  const postId = useParams().id;\n  const [internship, setInternship] = useState();\n\n  const initialState = {\n    description: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    location: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    stipend: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    techstack: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    lastDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    startDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n    endDate: {\n      value: null,\n      validation: {\n        required: true,\n      },\n      errorMessage: \"\",\n      valid: false,\n      touched: false,\n    },\n  };\n\n  const [formValues, setFormValues] = useState(initialState);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  // const setInitialValue = () => {\n  // const updatedFormElementD = { ...updatedFormValues[\"description\"] };\n  // const updatedFormElementL = { ...updatedFormValues[\"location\"] };\n  // const updatedFormElementS = { ...updatedFormValues[\"stipend\"] };\n  // const updatedFormElementTS = { ...updatedFormValues[\"techstack\"] };\n  // const updatedFormElementLD = { ...updatedFormValues[\"lastDate\"] };\n  // const updatedFormElementSD = { ...updatedFormValues[\"startDate\"] };\n  // const updatedFormElementED = { ...updatedFormValues[\"endDate\"] };\n  // updatedFormElementD.value =nullnternship.description;\n  // updatedFormElementL.value = internship.location;\n  // updatedFormElementS.value = internship.stipend;\n  // updatedFormElementTS.value = internship.techstack;\n  // updatedFormElementLD.value = internship.lastDate;\n  // updatedFormElementSD.value = internship.startDate;\n  // updatedFormElementED.value = internship.endDate;\n  // updatedFormValues[\"description\"] = updatedFormElementD;\n  // updatedFormValues[\"location\"] = updatedFormElementL;\n  // updatedFormValues[\"stipend\"] = updatedFormElementS;\n  // updatedFormValues[\"techstack\"] = updatedFormElementTS;\n  // updatedFormValues[\"lastDate\"] = updatedFormElementLD;\n  // updatedFormValues[\"startDate\"] = updatedFormElementSD;\n  // updatedFormValues[\"endDate\"] = updatedFormElementED;\n  // };\n  // useEffect(() => {\n  //   if (internship) {\n  //     setInitialState((prev) => {\n  //       return {\n  //         ...prev,\n  //         description: {\n  //           ...prev.description,\n  //           value: internship.description,\n  //         },\n  //         location: {\n  //           ...prev.location,\n  //           value: internship.location,\n  //         },\n  //         stipend: {\n  //           ...prev.stipend,\n  //           value: internship.stipend,\n  //         },\n  //       };\n  //     });\n\n  //     setFormValues(initialState);\n  //   }\n  // }, [internship]);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/employer/get-internship/${postId}`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          console.log(res.data.internship);\n          setInternship(res.data.internship);\n          console.log(internship);\n          // if (internship) {\n          // console.log(res.data.internship.description);\n          // setInitialValue();\n          // setInitialValue(\"description\", res.data.internship.description);\n          // setInitialValue(\"location\", res.data.internship.location);\n          // setInitialValue(\"stipend\", res.data.internship.stipend);\n          // setInitialValue(\"lastDate\", new Date(res.data.internship.lastDate));\n          // setInitialValue(\"startDate\", new Date(res.data.internship.startDate));\n          // setInitialValue(\"endDate\", res.data.internship.endDate);\n          // setInitialValue(\"techstack\", res.data.internship.techstack);\n          // }\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const updatedFormValues = { ...formValues };\n    const updatedFormElement = { ...updatedFormValues[e.target.name] };\n    updatedFormElement.value = e.target.value;\n    let validOutput = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.valid = validOutput[0];\n    updatedFormElement.errorMessage = validOutput[1];\n    updatedFormElement.touched = true;\n    updatedFormValues[e.target.name] = updatedFormElement;\n\n    let formValid = true;\n    for (let inputIdentifiers in updatedFormValues) {\n      formValid = updatedFormValues[inputIdentifiers].valid && formValid;\n    }\n    setFormValues(updatedFormValues);\n    setFormIsValid(formValid);\n  };\n\n  const submitInternship = (e) => {\n    e.preventDefault();\n    console.log(typeof formValues.startDate.value);\n    const duration =\n      new Date(formValues.endDate.value) - new Date(formValues.startDate.value);\n    console.log(duration);\n\n    const {\n      description,\n      location,\n      stipend,\n      techstack,\n      lastDate,\n      startDate,\n      endDate,\n    } = formValues;\n\n    axios({\n      method: \"patch\",\n      url: \"http://localhost:5000/employer/update-internship\",\n      data: {\n        postId,\n        description: description.value,\n        location: location.value,\n        stipend: stipend.value,\n        techstack: techstack.value,\n        lastDate: lastDate.value,\n        startDate: startDate.value,\n        endDate: endDate.value,\n        duration: duration,\n      },\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.data.error) {\n          console.log(res.data.error);\n          // alert(res.data.error);\n          const notify = () => toast(res.data.error);\n          notify();\n        } else {\n          // setInitialValue(description, )\n          const notify = () => toast(res.data.message);\n          notify();\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n\n    setFormValues(initialState);\n  };\n\n  return (\n    <div style={{ padding: \"4vh 0\" }}>\n      <Toaster />\n      {internship && (\n        <Card\n          style={{\n            width: \"40vw\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginTop: \"4vh\",\n            marginBottom: \"4vh\",\n            backgroundImage: \"linear-gradient(to right, white , #ffc107)\",\n          }}\n          className=\"register_card_custom\"\n        >\n          <Card.Header\n            style={{\n              backgroundColor: \"#6c6c6c\",\n              color: \"#ffc107\",\n              fontFamily: '\"Merriweather\", serif',\n              fontSize: \"1.25rem\",\n            }}\n            as=\"h5\"\n          >\n            Update Internship\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={(e) => submitInternship(e)}>\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Location</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter Company Name\"\n                  name=\"location\"\n                  value={formValues.location.value || internship.location}\n                  onChange={handleChange}\n                />\n                {formValues.location.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.location.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Internship Description\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  value={formValues.description.value || internship.description}\n                  onChange={handleChange}\n                />\n                {formValues.description.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.description.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>Stipend</Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter stipend\"\n                  name=\"stipend\"\n                  value={formValues.stipend.value|| internship.stipend}\n                  onChange={handleChange}\n                />\n                {formValues.stipend.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.stipend.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  TechStack\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"text\"\n                  placeholder=\"Enter techstack\"\n                  name=\"techstack\"\n                  value={formValues.techstack.value || internship.techstack}\n                  onChange={handleChange}\n                />\n                {formValues.techstack.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.techstack.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Last Date\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"date\"\n                  placeholder=\"Enter last date\"\n                  name=\"lastDate\"\n                  value={formValues.lastDate.value || new Date(internship.lastDate)}\n                  onChange={handleChange}\n                />\n                {formValues.lastDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.lastDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  Start Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter start date\"\n                  name=\"startDate\"\n                  value={formValues.startDate.value || new Date(internship.startDate)}\n                  onChange={handleChange}\n                />\n                {formValues.startDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.startDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              <Form.Group\n                style={{ textAlign: \"left\" }}\n                controlId=\"formBasicEmail\"\n              >\n                <Form.Label style={{ fontWeight: \"bold\" }}>\n                  End Month\n                </Form.Label>\n                <Form.Control\n                  style={{ borderColor: \"#ffc107\", color: \"#000000\" }}\n                  type=\"month\"\n                  placeholder=\"Enter end date\"\n                  name=\"endDate\"\n                  value={formValues.endDate.value || new Date(internship.endDate)}\n                  onChange={handleChange}\n                />\n                {formValues.endDate.errorMessage && (\n                  <span className=\"error\">\n                    {formValues.endDate.errorMessage}\n                  </span>\n                )}\n              </Form.Group>\n\n              {\n                <Button\n                  style={{ color: \"#ffc107\", fontWeight: \"bold\" }}\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  // disabled={!formIsValid}\n                >\n                  Update\n                </Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateInternship;\n","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Start.js",["212","213","214","215","216"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Skills from \"./Skills\"\nimport Input from \"./Input\";\n\nconst Start=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  profileLink:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   profileLink: '' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n      return( <>\n        <form className=\"form-main\" onSubmit={handleSubmit}>\n        <div className=\"side\">\n        <label className=\"label-text\">First Name<span>*</span></label><br/>\n        <input type=\"text\" placeholder=\"Enter your first name\" className=\"text-long\"></input><br/>\n        </div>\n\n        <div className=\"side\">\n        <label className=\"label-text\">Last Name<span>*</span></label><br/>\n        <input type=\"text\" placeholder=\"Enter your last name\" className=\"text-long\"></input><br/>\n        </div>\n\n        <label className=\"label-text\">Studnet Address<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your student address\"></input><br/>\n\n        <label className=\"label-text\">Github Link<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your github link\"></input><br/>\n        \n        \n        <label className=\"label-text\">LinkedIn Link<span>*</span></label><br/>\n        <input type=\"text\" className=\"text-long\" placeholder=\"Enter your linkedinlink\"></input><br/>\n\n        \n        <label className=\"label-text\">other Profile Link<span>*</span></label><br/>\n        {/* <input type=\"text\" className=\"text-long\" placeholder=\"Enter your other profile link\"></input> */}\n\n\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n            <input\n              name=\"profileLink\"\n              label=\"Profile Link\"\n              value={inputField.profileLink}\n              className=\"text-long\"\n              placeholder=\"Enter your other profile link\"\n              onChange={event => handleChangeInput(inputField.id, event)}\n            ></input>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n            </div>\n        ))}\n        </form><hr></hr>\n        </>\n      );\n}\n\nexport default Start;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Education.js",["217","218","219","220"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Education() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(), school:'',degree:'',study:'', sd:'',ld:'', grade:'', desc:'' }])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n  <>\n  <h2 className=\"edu\">Education</h2>\n      <form className=\"education\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"School\"/><br/>\n            <input\n              name=\"school\"\n              label=\"School Name\"\n              placeholder=\"Ex:Boston University\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Degree\"/><br/>\n             <input\n              name=\"degree\"\n              label=\"Degree\"\n              placeholder=\"Ex:Bachelors\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Field of Study\"/><br/>\n            <input\n              name=\"study\"\n              label=\"Study \"\n              placeholder=\"Ex:Business\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Star Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Grade\"/><br/>\n            <input\n              name=\"grade\"\n              label=\"Grade \"\n              placeholder=\"Enter Your Grade\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Description\"/><br/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n      </>\n    \n  );\n}\n\nexport default Education;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Experience.js",["221","222","223"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Experience() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), company:'', title:'',sd:'', ld:'', location:'', desc:''},\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(),  company:'', title:'',sd:'', ld:'', location:'', desc:''}])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n    <Container>\n      <h2 className=\"center\">Experience</h2>\n      <form className=\"experience\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"Company/Organization\"/><br/>\n            <input\n              name=\"company\"\n              label=\"Company/organization\"\n              placeholder=\"Enter Company/organization Name\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Title\"/><br/>\n             <input\n              name=\"title\"\n              label=\"Title\"\n              placeholder=\"Enter Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Start Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Location\"/><br/>\n             <input\n              name=\"location\"\n              label=\"Location\"\n              placeholder=\"Enter Location\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Description\"/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n    </Container>\n  );\n}\n\nexport default Experience;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Project.js",["224","225","226"],"import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"./profile.css\";\nimport Label from \"./Label\";\n\n\nfunction  Project() {\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(), project:'', link:'',sd:'', ld:'', desc:'' }])\n  }\n\n  const handleRemoveFields = id => {\n    const values  = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n    <Container>\n      <h2 className=\"edu\">Project</h2>\n      <form className=\"projects\" onSubmit={handleSubmit}>\n        { inputFields.map(inputField => (\n          <div key={inputField.id}>\n          <Label value=\"Project-Title\"/><br/>\n            <input\n              name=\"project\"\n              label=\"Project Name\"\n              placeholder=\"Enter Project Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <Label value=\"Project-Link\"/><br/>\n             <input\n              name=\"project\"\n              label=\"Project Name\"\n              placeholder=\"Enter Project Title\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <div className=\"side\">\n            <Label value=\"Start Date\"/><br/>\n            <input\n              name=\"sd\"\n              type=\"date\"\n              label=\"Star Date\"\n              placeholder=\"Enter Start Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <div className=\"byside\">\n            <Label value=\"Last Date\"/><br/>\n            <input\n              name=\"ld\"\n              type=\"date\"\n              label=\"Last Date\"\n              placeholder=\"Enter Last Date\"\n              className=\"text-long\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            </div>\n            <Label value=\"Description\"/>\n            <textarea\n              name=\"desc\" rows=\"3\" cols=\"82\"\n              label=\"Description\"\n              variant=\"filled\"\n              value={inputField.firstName}\n              onChange={event => handleChangeInput(inputField.id, event)}\n            /><br/>\n            <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n      </form><hr/>\n    </Container>\n  );\n}\n\nexport default Project;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Other.js",["227","228","229","230"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Other=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  Other:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   Other:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"Other\">\n        <h2>Other</h2>\n        <Label value=\"Other\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"Other\"\n        label=\"Other\"\n        value={inputField.Other}\n        className=\"text-long\"\n        placeholder=\"Enter your Other\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n      \n\n      );}\n\n      export default Other;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Volunteer.js",["231","232","233","234"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Volunteer=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  volunteer:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   volunteer:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"volunteer\">\n        <h2>Volunteer Experience</h2>\n        <Label value=\"Volunteer Experience\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"volunteer\"\n        label=\"volunteer\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your Skills\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Volunteer;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Input.js",[],"/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Achievments.js",["235","236","237","238"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Achievments=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  skills:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   skills:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"skills\">\n        <h2>Achievments</h2>\n        <Label value=\"Achievments\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"achievments\"\n        label=\"achievments\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your achievments\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Achievments;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Skills.js",["239","240","241","242"],"import React from \"react\";\nimport \"./profile.css\";\nimport {  useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Label from \"./Label\";\nimport Input from \"./Input\";\n\n\n\nconst Skills=()=>\n{\n    const [inputFields, setInputFields] = useState([\n        {  skills:'' },\n      ]);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"InputFields\", inputFields);\n      };\n\n      const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            i[event.target.name] = event.target.value\n          }\n          return i;\n        })\n        \n        setInputFields(newInputFields);\n      }\n\n      const handleAddFields = () => {\n        setInputFields([...inputFields, {   skills:'' }])\n      }\n\n      const handleRemoveFields = id => {\n        const values  = [...inputFields];\n        values.splice(values.findIndex(value => value.id === id), 1);\n        setInputFields(values);\n      }\n\n      return (\n        <form className=\"skills edu\">\n        <h2 >Skills</h2>\n        <Label value=\"Skills\"/><br/>\n        { inputFields.map(inputField => (\n    <div key={inputField.id}>\n      <input\n        name=\"skills\"\n        label=\"skills\"\n        value={inputField.skills}\n        className=\"text-long\"\n        placeholder=\"Enter your Skills\"\n        onChange={event => handleChangeInput(inputField.id, event)}\n      ></input>\n      <IconButton disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n        <RemoveIcon />\n      </IconButton>\n      <IconButton\n        onClick={handleAddFields}\n      >\n        <AddIcon />\n      </IconButton>\n      </div>\n     ))}\n          \n        <hr/>\n      </form>\n\n      );}\n\n      export default Skills;","/home/krishnaraj/Desktop/GSSOC Projects/easy-job-intern/src/components/student-profile/Label.js",[],{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":95,"column":3,"nodeType":"249","messageId":"250","endLine":212,"endColumn":17},{"ruleId":"251","severity":1,"message":"252","line":114,"column":10,"nodeType":"253","messageId":"254","endLine":114,"endColumn":21},{"ruleId":"251","severity":1,"message":"252","line":84,"column":10,"nodeType":"253","messageId":"254","endLine":84,"endColumn":21},{"ruleId":"251","severity":1,"message":"252","line":48,"column":10,"nodeType":"253","messageId":"254","endLine":48,"endColumn":21},{"ruleId":"251","severity":1,"message":"252","line":49,"column":10,"nodeType":"253","messageId":"254","endLine":49,"endColumn":21},{"ruleId":"251","severity":1,"message":"255","line":3,"column":11,"nodeType":"253","messageId":"254","endLine":3,"endColumn":19},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"258","line":6,"column":8,"nodeType":"253","messageId":"254","endLine":6,"endColumn":18},{"ruleId":"251","severity":1,"message":"259","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":18},{"ruleId":"251","severity":1,"message":"260","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":15},{"ruleId":"251","severity":1,"message":"261","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":13},{"ruleId":"251","severity":1,"message":"262","line":11,"column":8,"nodeType":"253","messageId":"254","endLine":11,"endColumn":13},{"ruleId":"251","severity":1,"message":"263","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":14},{"ruleId":"251","severity":1,"message":"264","line":3,"column":16,"nodeType":"253","messageId":"254","endLine":3,"endColumn":25},{"ruleId":"251","severity":1,"message":"256","line":5,"column":3,"nodeType":"253","messageId":"254","endLine":5,"endColumn":9},{"ruleId":"251","severity":1,"message":"265","line":9,"column":3,"nodeType":"253","messageId":"254","endLine":9,"endColumn":17},{"ruleId":"251","severity":1,"message":"266","line":12,"column":3,"nodeType":"253","messageId":"254","endLine":12,"endColumn":8},{"ruleId":"251","severity":1,"message":"267","line":21,"column":10,"nodeType":"253","messageId":"254","endLine":21,"endColumn":16},{"ruleId":"251","severity":1,"message":"268","line":24,"column":18,"nodeType":"253","messageId":"254","endLine":24,"endColumn":26},{"ruleId":"269","severity":1,"message":"270","line":162,"column":40,"nodeType":"271","messageId":"272","endLine":162,"endColumn":42},{"ruleId":"251","severity":1,"message":"263","line":13,"column":10,"nodeType":"253","messageId":"254","endLine":13,"endColumn":14},{"ruleId":"251","severity":1,"message":"268","line":19,"column":18,"nodeType":"253","messageId":"254","endLine":19,"endColumn":26},{"ruleId":"269","severity":1,"message":"270","line":177,"column":40,"nodeType":"271","messageId":"272","endLine":177,"endColumn":42},{"ruleId":"251","severity":1,"message":"268","line":20,"column":18,"nodeType":"253","messageId":"254","endLine":20,"endColumn":26},{"ruleId":"269","severity":1,"message":"270","line":147,"column":40,"nodeType":"271","messageId":"272","endLine":147,"endColumn":42},{"ruleId":"251","severity":1,"message":"252","line":80,"column":10,"nodeType":"253","messageId":"254","endLine":80,"endColumn":21},{"ruleId":"273","severity":1,"message":"274","line":106,"column":6,"nodeType":"275","endLine":106,"endColumn":8,"suggestions":"276"},{"ruleId":"251","severity":1,"message":"252","line":80,"column":10,"nodeType":"253","messageId":"254","endLine":80,"endColumn":21},{"ruleId":"273","severity":1,"message":"274","line":106,"column":6,"nodeType":"275","endLine":106,"endColumn":8,"suggestions":"277"},{"ruleId":"251","severity":1,"message":"252","line":80,"column":10,"nodeType":"253","messageId":"254","endLine":80,"endColumn":21},{"ruleId":"273","severity":1,"message":"278","line":164,"column":6,"nodeType":"275","endLine":164,"endColumn":8,"suggestions":"279"},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"261","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":13},{"ruleId":"251","severity":1,"message":"280","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":14},{"ruleId":"251","severity":1,"message":"262","line":11,"column":8,"nodeType":"253","messageId":"254","endLine":11,"endColumn":13},{"ruleId":"251","severity":1,"message":"281","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"282","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":17},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":12},{"ruleId":"251","severity":1,"message":"282","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":17},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":12},{"ruleId":"251","severity":1,"message":"282","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":17},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":12},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"262","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":13},{"ruleId":"251","severity":1,"message":"283","line":20,"column":13,"nodeType":"253","messageId":"254","endLine":20,"endColumn":25},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"262","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":13},{"ruleId":"251","severity":1,"message":"283","line":20,"column":13,"nodeType":"253","messageId":"254","endLine":20,"endColumn":25},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"262","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":13},{"ruleId":"251","severity":1,"message":"283","line":20,"column":13,"nodeType":"253","messageId":"254","endLine":20,"endColumn":25},{"ruleId":"251","severity":1,"message":"256","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":12},{"ruleId":"251","severity":1,"message":"262","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":13},{"ruleId":"251","severity":1,"message":"283","line":20,"column":13,"nodeType":"253","messageId":"254","endLine":20,"endColumn":25},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'DropdownButton' is defined but never used.","'Modal' is defined but never used.","'colors' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'job' and 'postId'. Either include them or remove the dependency array.","ArrayExpression",["286"],["287"],"React Hook useEffect has missing dependencies: 'internship' and 'postId'. Either include them or remove the dependency array.",["288"],"'Skills' is defined but never used.","'Container' is defined but never used.","'TextField' is defined but never used.","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"289","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [job, postId]",{"range":"294","text":"295"},{"range":"296","text":"295"},"Update the dependencies array to be: [internship, postId]",{"range":"297","text":"298"},[2465,2467],"[job, postId]",[2480,2482],[5013,5015],"[internship, postId]"]